
Pyroeffect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a3c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  08007c40  08007c40  00017c40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fe4  08007fe4  00020314  2**0
                  CONTENTS
  4 .ARM          00000008  08007fe4  08007fe4  00017fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fec  08007fec  00020314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fec  08007fec  00017fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ff0  08007ff0  00017ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007ff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001d4  080081c8  000201d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000274  08008268  00020274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000008ec  20000314  08008308  00020314  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000c00  08008308  00020c00  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020314  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00020342  2**0
                  CONTENTS, READONLY
 15 .debug_info   00014806  00000000  00000000  00020385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000031f0  00000000  00000000  00034b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001070  00000000  00000000  00037d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000c85  00000000  00000000  00038df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002add0  00000000  00000000  00039a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001691f  00000000  00000000  00064845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000fe331  00000000  00000000  0007b164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00005224  00000000  00000000  00179498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000049  00000000  00000000  0017e6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000314 	.word	0x20000314
 800021c:	00000000 	.word	0x00000000
 8000220:	08007c24 	.word	0x08007c24

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000318 	.word	0x20000318
 800023c:	08007c24 	.word	0x08007c24

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <MX_ETH_Init+0x84>)
 80005f2:	4a20      	ldr	r2, [pc, #128]	; (8000674 <MX_ETH_Init+0x88>)
 80005f4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80005f6:	4b20      	ldr	r3, [pc, #128]	; (8000678 <MX_ETH_Init+0x8c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80005fc:	4b1e      	ldr	r3, [pc, #120]	; (8000678 <MX_ETH_Init+0x8c>)
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000602:	4b1d      	ldr	r3, [pc, #116]	; (8000678 <MX_ETH_Init+0x8c>)
 8000604:	22e1      	movs	r2, #225	; 0xe1
 8000606:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000608:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <MX_ETH_Init+0x8c>)
 800060a:	2200      	movs	r2, #0
 800060c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800060e:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <MX_ETH_Init+0x8c>)
 8000610:	2200      	movs	r2, #0
 8000612:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000614:	4b18      	ldr	r3, [pc, #96]	; (8000678 <MX_ETH_Init+0x8c>)
 8000616:	2200      	movs	r2, #0
 8000618:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <MX_ETH_Init+0x84>)
 800061c:	4a16      	ldr	r2, [pc, #88]	; (8000678 <MX_ETH_Init+0x8c>)
 800061e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000620:	4b13      	ldr	r3, [pc, #76]	; (8000670 <MX_ETH_Init+0x84>)
 8000622:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000626:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_ETH_Init+0x84>)
 800062a:	4a14      	ldr	r2, [pc, #80]	; (800067c <MX_ETH_Init+0x90>)
 800062c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <MX_ETH_Init+0x84>)
 8000630:	4a13      	ldr	r2, [pc, #76]	; (8000680 <MX_ETH_Init+0x94>)
 8000632:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000634:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_ETH_Init+0x84>)
 8000636:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800063a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800063c:	480c      	ldr	r0, [pc, #48]	; (8000670 <MX_ETH_Init+0x84>)
 800063e:	f000 ffbb 	bl	80015b8 <HAL_ETH_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000648:	f000 fa5c 	bl	8000b04 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800064c:	2238      	movs	r2, #56	; 0x38
 800064e:	2100      	movs	r1, #0
 8000650:	480c      	ldr	r0, [pc, #48]	; (8000684 <MX_ETH_Init+0x98>)
 8000652:	f005 fa74 	bl	8005b3e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <MX_ETH_Init+0x98>)
 8000658:	2221      	movs	r2, #33	; 0x21
 800065a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_ETH_Init+0x98>)
 800065e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000662:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <MX_ETH_Init+0x98>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000368 	.word	0x20000368
 8000674:	40028000 	.word	0x40028000
 8000678:	20000418 	.word	0x20000418
 800067c:	20000274 	.word	0x20000274
 8000680:	200001d4 	.word	0x200001d4
 8000684:	20000330 	.word	0x20000330

08000688 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08e      	sub	sp, #56	; 0x38
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a4e      	ldr	r2, [pc, #312]	; (80007e0 <HAL_ETH_MspInit+0x158>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	f040 8096 	bne.w	80007d8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80006ac:	4b4d      	ldr	r3, [pc, #308]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 80006ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b0:	4a4c      	ldr	r2, [pc, #304]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 80006b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006b6:	6313      	str	r3, [r2, #48]	; 0x30
 80006b8:	4b4a      	ldr	r3, [pc, #296]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 80006ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006c0:	623b      	str	r3, [r7, #32]
 80006c2:	6a3b      	ldr	r3, [r7, #32]
 80006c4:	4b47      	ldr	r3, [pc, #284]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 80006c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c8:	4a46      	ldr	r2, [pc, #280]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 80006ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80006ce:	6313      	str	r3, [r2, #48]	; 0x30
 80006d0:	4b44      	ldr	r3, [pc, #272]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 80006d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80006d8:	61fb      	str	r3, [r7, #28]
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	4b41      	ldr	r3, [pc, #260]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 80006de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e0:	4a40      	ldr	r2, [pc, #256]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 80006e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80006e6:	6313      	str	r3, [r2, #48]	; 0x30
 80006e8:	4b3e      	ldr	r3, [pc, #248]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 80006ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80006f0:	61bb      	str	r3, [r7, #24]
 80006f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f4:	4b3b      	ldr	r3, [pc, #236]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 80006f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f8:	4a3a      	ldr	r2, [pc, #232]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 80006fa:	f043 0304 	orr.w	r3, r3, #4
 80006fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000700:	4b38      	ldr	r3, [pc, #224]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 8000702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000704:	f003 0304 	and.w	r3, r3, #4
 8000708:	617b      	str	r3, [r7, #20]
 800070a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800070c:	4b35      	ldr	r3, [pc, #212]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 800070e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000710:	4a34      	ldr	r2, [pc, #208]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 8000712:	f043 0301 	orr.w	r3, r3, #1
 8000716:	6313      	str	r3, [r2, #48]	; 0x30
 8000718:	4b32      	ldr	r3, [pc, #200]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 800071a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071c:	f003 0301 	and.w	r3, r3, #1
 8000720:	613b      	str	r3, [r7, #16]
 8000722:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000724:	4b2f      	ldr	r3, [pc, #188]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 8000726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000728:	4a2e      	ldr	r2, [pc, #184]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 800072a:	f043 0302 	orr.w	r3, r3, #2
 800072e:	6313      	str	r3, [r2, #48]	; 0x30
 8000730:	4b2c      	ldr	r3, [pc, #176]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 8000732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000734:	f003 0302 	and.w	r3, r3, #2
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800073c:	4b29      	ldr	r3, [pc, #164]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 800073e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000740:	4a28      	ldr	r2, [pc, #160]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 8000742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000746:	6313      	str	r3, [r2, #48]	; 0x30
 8000748:	4b26      	ldr	r3, [pc, #152]	; (80007e4 <HAL_ETH_MspInit+0x15c>)
 800074a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000754:	2332      	movs	r3, #50	; 0x32
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000758:	2302      	movs	r3, #2
 800075a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000760:	2303      	movs	r3, #3
 8000762:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000764:	230b      	movs	r3, #11
 8000766:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800076c:	4619      	mov	r1, r3
 800076e:	481e      	ldr	r0, [pc, #120]	; (80007e8 <HAL_ETH_MspInit+0x160>)
 8000770:	f001 fa48 	bl	8001c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000774:	2386      	movs	r3, #134	; 0x86
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000778:	2302      	movs	r3, #2
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000780:	2303      	movs	r3, #3
 8000782:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000784:	230b      	movs	r3, #11
 8000786:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078c:	4619      	mov	r1, r3
 800078e:	4817      	ldr	r0, [pc, #92]	; (80007ec <HAL_ETH_MspInit+0x164>)
 8000790:	f001 fa38 	bl	8001c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000794:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	2302      	movs	r3, #2
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a2:	2303      	movs	r3, #3
 80007a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a6:	230b      	movs	r3, #11
 80007a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ae:	4619      	mov	r1, r3
 80007b0:	480f      	ldr	r0, [pc, #60]	; (80007f0 <HAL_ETH_MspInit+0x168>)
 80007b2:	f001 fa27 	bl	8001c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007b6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007bc:	2302      	movs	r3, #2
 80007be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c4:	2303      	movs	r3, #3
 80007c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007c8:	230b      	movs	r3, #11
 80007ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d0:	4619      	mov	r1, r3
 80007d2:	4808      	ldr	r0, [pc, #32]	; (80007f4 <HAL_ETH_MspInit+0x16c>)
 80007d4:	f001 fa16 	bl	8001c04 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80007d8:	bf00      	nop
 80007da:	3738      	adds	r7, #56	; 0x38
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40028000 	.word	0x40028000
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40020800 	.word	0x40020800
 80007ec:	40020000 	.word	0x40020000
 80007f0:	40020400 	.word	0x40020400
 80007f4:	40021800 	.word	0x40021800

080007f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08c      	sub	sp, #48	; 0x30
 80007fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080e:	4b56      	ldr	r3, [pc, #344]	; (8000968 <MX_GPIO_Init+0x170>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a55      	ldr	r2, [pc, #340]	; (8000968 <MX_GPIO_Init+0x170>)
 8000814:	f043 0304 	orr.w	r3, r3, #4
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b53      	ldr	r3, [pc, #332]	; (8000968 <MX_GPIO_Init+0x170>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0304 	and.w	r3, r3, #4
 8000822:	61bb      	str	r3, [r7, #24]
 8000824:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000826:	4b50      	ldr	r3, [pc, #320]	; (8000968 <MX_GPIO_Init+0x170>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a4f      	ldr	r2, [pc, #316]	; (8000968 <MX_GPIO_Init+0x170>)
 800082c:	f043 0320 	orr.w	r3, r3, #32
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b4d      	ldr	r3, [pc, #308]	; (8000968 <MX_GPIO_Init+0x170>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0320 	and.w	r3, r3, #32
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	4b4a      	ldr	r3, [pc, #296]	; (8000968 <MX_GPIO_Init+0x170>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a49      	ldr	r2, [pc, #292]	; (8000968 <MX_GPIO_Init+0x170>)
 8000844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b47      	ldr	r3, [pc, #284]	; (8000968 <MX_GPIO_Init+0x170>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	4b44      	ldr	r3, [pc, #272]	; (8000968 <MX_GPIO_Init+0x170>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a43      	ldr	r2, [pc, #268]	; (8000968 <MX_GPIO_Init+0x170>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b41      	ldr	r3, [pc, #260]	; (8000968 <MX_GPIO_Init+0x170>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	4b3e      	ldr	r3, [pc, #248]	; (8000968 <MX_GPIO_Init+0x170>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a3d      	ldr	r2, [pc, #244]	; (8000968 <MX_GPIO_Init+0x170>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b3b      	ldr	r3, [pc, #236]	; (8000968 <MX_GPIO_Init+0x170>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000886:	4b38      	ldr	r3, [pc, #224]	; (8000968 <MX_GPIO_Init+0x170>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a37      	ldr	r2, [pc, #220]	; (8000968 <MX_GPIO_Init+0x170>)
 800088c:	f043 0308 	orr.w	r3, r3, #8
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b35      	ldr	r3, [pc, #212]	; (8000968 <MX_GPIO_Init+0x170>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0308 	and.w	r3, r3, #8
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800089e:	4b32      	ldr	r3, [pc, #200]	; (8000968 <MX_GPIO_Init+0x170>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a31      	ldr	r2, [pc, #196]	; (8000968 <MX_GPIO_Init+0x170>)
 80008a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b2f      	ldr	r3, [pc, #188]	; (8000968 <MX_GPIO_Init+0x170>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2110      	movs	r1, #16
 80008ba:	482c      	ldr	r0, [pc, #176]	; (800096c <MX_GPIO_Init+0x174>)
 80008bc:	f001 fb4e 	bl	8001f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	f244 0181 	movw	r1, #16513	; 0x4081
 80008c6:	482a      	ldr	r0, [pc, #168]	; (8000970 <MX_GPIO_Init+0x178>)
 80008c8:	f001 fb48 	bl	8001f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2140      	movs	r1, #64	; 0x40
 80008d0:	4828      	ldr	r0, [pc, #160]	; (8000974 <MX_GPIO_Init+0x17c>)
 80008d2:	f001 fb43 	bl	8001f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008dc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	4822      	ldr	r0, [pc, #136]	; (8000978 <MX_GPIO_Init+0x180>)
 80008ee:	f001 f989 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80008f2:	2310      	movs	r3, #16
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	4818      	ldr	r0, [pc, #96]	; (800096c <MX_GPIO_Init+0x174>)
 800090a:	f001 f97b 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800090e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	4812      	ldr	r0, [pc, #72]	; (8000970 <MX_GPIO_Init+0x178>)
 8000928:	f001 f96c 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800092c:	2340      	movs	r3, #64	; 0x40
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	2301      	movs	r3, #1
 8000932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	480c      	ldr	r0, [pc, #48]	; (8000974 <MX_GPIO_Init+0x17c>)
 8000944:	f001 f95e 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000948:	2380      	movs	r3, #128	; 0x80
 800094a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094c:	2300      	movs	r3, #0
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	4806      	ldr	r0, [pc, #24]	; (8000974 <MX_GPIO_Init+0x17c>)
 800095c:	f001 f952 	bl	8001c04 <HAL_GPIO_Init>

}
 8000960:	bf00      	nop
 8000962:	3730      	adds	r7, #48	; 0x30
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40023800 	.word	0x40023800
 800096c:	40020000 	.word	0x40020000
 8000970:	40020400 	.word	0x40020400
 8000974:	40021800 	.word	0x40021800
 8000978:	40020800 	.word	0x40020800

0800097c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000980:	f000 fcb3 	bl	80012ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000984:	f000 f84e 	bl	8000a24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000988:	f7ff ff36 	bl	80007f8 <MX_GPIO_Init>
  MX_ETH_Init();
 800098c:	f7ff fe2e 	bl	80005ec <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000990:	f000 fb4a 	bl	8001028 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000994:	f000 fbd8 	bl	8001148 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000998:	f000 f910 	bl	8000bbc <MX_SPI1_Init>
  MX_SPI5_Init();
 800099c:	f000 f94c 	bl	8000c38 <MX_SPI5_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  answer = max6675ReadReg(&reg, &errorCode);
 80009a0:	4918      	ldr	r1, [pc, #96]	; (8000a04 <main+0x88>)
 80009a2:	4819      	ldr	r0, [pc, #100]	; (8000a08 <main+0x8c>)
 80009a4:	f000 f8b4 	bl	8000b10 <max6675ReadReg>
 80009a8:	4603      	mov	r3, r0
 80009aa:	461a      	mov	r2, r3
 80009ac:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <main+0x90>)
 80009ae:	701a      	strb	r2, [r3, #0]
	  if (answer == MAX6675_OK)
 80009b0:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <main+0x90>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d115      	bne.n	80009e4 <main+0x68>
	  {
		  //Преобразовать в температуру
		  temper = max6675Temp(reg);
 80009b8:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <main+0x8c>)
 80009ba:	881b      	ldrh	r3, [r3, #0]
 80009bc:	4618      	mov	r0, r3
 80009be:	f000 f8e5 	bl	8000b8c <max6675Temp>
 80009c2:	eef0 7a40 	vmov.f32	s15, s0
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <main+0x94>)
 80009c8:	edc3 7a00 	vstr	s15, [r3]
		  sprintf((char *)string, "T = %0.2f \n\r", temper);
 80009cc:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <main+0x94>)
 80009ce:	edd3 7a00 	vldr	s15, [r3]
 80009d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009d6:	ec53 2b17 	vmov	r2, r3, d7
 80009da:	490e      	ldr	r1, [pc, #56]	; (8000a14 <main+0x98>)
 80009dc:	480e      	ldr	r0, [pc, #56]	; (8000a18 <main+0x9c>)
 80009de:	f005 f84b 	bl	8005a78 <siprintf>
 80009e2:	e003      	b.n	80009ec <main+0x70>

	  }
	  else
	  {
		  sprintf((char *)string, "T = error\n\r");
 80009e4:	490d      	ldr	r1, [pc, #52]	; (8000a1c <main+0xa0>)
 80009e6:	480c      	ldr	r0, [pc, #48]	; (8000a18 <main+0x9c>)
 80009e8:	f005 f846 	bl	8005a78 <siprintf>
		 // printf("SPI Receive Error: %lu\n", errorCode);
	  }

	  //Вывод в порт
	  HAL_UART_Transmit(&huart3, string, 20, 1000);
 80009ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f0:	2214      	movs	r2, #20
 80009f2:	4909      	ldr	r1, [pc, #36]	; (8000a18 <main+0x9c>)
 80009f4:	480a      	ldr	r0, [pc, #40]	; (8000a20 <main+0xa4>)
 80009f6:	f003 fbaf 	bl	8004158 <HAL_UART_Transmit>

	  HAL_Delay(1000);
 80009fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009fe:	f000 fcd1 	bl	80013a4 <HAL_Delay>
	  answer = max6675ReadReg(&reg, &errorCode);
 8000a02:	e7cd      	b.n	80009a0 <main+0x24>
 8000a04:	20000450 	.word	0x20000450
 8000a08:	20000420 	.word	0x20000420
 8000a0c:	2000041e 	.word	0x2000041e
 8000a10:	20000424 	.word	0x20000424
 8000a14:	08007c40 	.word	0x08007c40
 8000a18:	20000428 	.word	0x20000428
 8000a1c:	08007c50 	.word	0x08007c50
 8000a20:	20000520 	.word	0x20000520

08000a24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b094      	sub	sp, #80	; 0x50
 8000a28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	2234      	movs	r2, #52	; 0x34
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f005 f883 	bl	8005b3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a38:	f107 0308 	add.w	r3, r7, #8
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a48:	f001 fbea 	bl	8002220 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4c:	4b2b      	ldr	r3, [pc, #172]	; (8000afc <SystemClock_Config+0xd8>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a50:	4a2a      	ldr	r2, [pc, #168]	; (8000afc <SystemClock_Config+0xd8>)
 8000a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a56:	6413      	str	r3, [r2, #64]	; 0x40
 8000a58:	4b28      	ldr	r3, [pc, #160]	; (8000afc <SystemClock_Config+0xd8>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a64:	4b26      	ldr	r3, [pc, #152]	; (8000b00 <SystemClock_Config+0xdc>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a25      	ldr	r2, [pc, #148]	; (8000b00 <SystemClock_Config+0xdc>)
 8000a6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a6e:	6013      	str	r3, [r2, #0]
 8000a70:	4b23      	ldr	r3, [pc, #140]	; (8000b00 <SystemClock_Config+0xdc>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a80:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a84:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a86:	2302      	movs	r3, #2
 8000a88:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a8e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a90:	2304      	movs	r3, #4
 8000a92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000a94:	23d8      	movs	r3, #216	; 0xd8
 8000a96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000a9c:	2309      	movs	r3, #9
 8000a9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa4:	f107 031c 	add.w	r3, r7, #28
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f001 fc19 	bl	80022e0 <HAL_RCC_OscConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ab4:	f000 f826 	bl	8000b04 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ab8:	f001 fbc2 	bl	8002240 <HAL_PWREx_EnableOverDrive>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000ac2:	f000 f81f 	bl	8000b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac6:	230f      	movs	r3, #15
 8000ac8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aca:	2302      	movs	r3, #2
 8000acc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ad2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ad6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000adc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000ade:	f107 0308 	add.w	r3, r7, #8
 8000ae2:	2107      	movs	r1, #7
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f001 fea9 	bl	800283c <HAL_RCC_ClockConfig>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000af0:	f000 f808 	bl	8000b04 <Error_Handler>
  }
}
 8000af4:	bf00      	nop
 8000af6:	3750      	adds	r7, #80	; 0x50
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40007000 	.word	0x40007000

08000b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
}
 8000b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <Error_Handler+0x8>
	...

08000b10 <max6675ReadReg>:
#include "max6675.h"
#include <stdio.h>

//Функция возврата значения микросхемы
uint8_t max6675ReadReg(uint16_t *reg, uint32_t *errorCode)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
	//Возвращаемые функции HAL
	HAL_StatusTypeDef hal_answer = HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	73fb      	strb	r3, [r7, #15]

	//Массив для хранения полученных данных
	uint8_t temp[2] = {0};
 8000b1e:	2300      	movs	r3, #0
 8000b20:	813b      	strh	r3, [r7, #8]


	//Выбор микросхемы
	MAX6675_CS_SET();
 8000b22:	2200      	movs	r2, #0
 8000b24:	2110      	movs	r1, #16
 8000b26:	4817      	ldr	r0, [pc, #92]	; (8000b84 <max6675ReadReg+0x74>)
 8000b28:	f001 fa18 	bl	8001f5c <HAL_GPIO_WritePin>

	//Чтение из микросхемы
	hal_answer = HAL_SPI_Receive(MAX6675_SPI, temp, 2, 100);
 8000b2c:	f107 0108 	add.w	r1, r7, #8
 8000b30:	2364      	movs	r3, #100	; 0x64
 8000b32:	2202      	movs	r2, #2
 8000b34:	4814      	ldr	r0, [pc, #80]	; (8000b88 <max6675ReadReg+0x78>)
 8000b36:	f002 fd7a 	bl	800362e <HAL_SPI_Receive>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	73fb      	strb	r3, [r7, #15]

	//Выбор микросхемы
	MAX6675_CS_RESET();
 8000b3e:	2201      	movs	r2, #1
 8000b40:	2110      	movs	r1, #16
 8000b42:	4810      	ldr	r0, [pc, #64]	; (8000b84 <max6675ReadReg+0x74>)
 8000b44:	f001 fa0a 	bl	8001f5c <HAL_GPIO_WritePin>

	if(hal_answer == HAL_OK)
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d115      	bne.n	8000b7a <max6675ReadReg+0x6a>
	{
		//Проверка подключения датчика
		if(temp[1] & 0x04) return MAX6675_ERROR;
 8000b4e:	7a7b      	ldrb	r3, [r7, #9]
 8000b50:	f003 0304 	and.w	r3, r3, #4
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <max6675ReadReg+0x4c>
 8000b58:	2300      	movs	r3, #0
 8000b5a:	e00f      	b.n	8000b7c <max6675ReadReg+0x6c>
		uint16_t result = temp[0] | (temp[1] << 8);
 8000b5c:	7a3b      	ldrb	r3, [r7, #8]
 8000b5e:	b21a      	sxth	r2, r3
 8000b60:	7a7b      	ldrb	r3, [r7, #9]
 8000b62:	021b      	lsls	r3, r3, #8
 8000b64:	b21b      	sxth	r3, r3
 8000b66:	4313      	orrs	r3, r2
 8000b68:	b21b      	sxth	r3, r3
 8000b6a:	81bb      	strh	r3, [r7, #12]
		*reg = result >> 3;
 8000b6c:	89bb      	ldrh	r3, [r7, #12]
 8000b6e:	08db      	lsrs	r3, r3, #3
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	801a      	strh	r2, [r3, #0]
		return MAX6675_OK;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e000      	b.n	8000b7c <max6675ReadReg+0x6c>
	}

	return MAX6675_OK;
 8000b7a:	2301      	movs	r3, #1
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40020000 	.word	0x40020000
 8000b88:	20000454 	.word	0x20000454

08000b8c <max6675Temp>:

float max6675Temp(uint16_t reg)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	80fb      	strh	r3, [r7, #6]
	return reg * 0.25;
 8000b96:	88fb      	ldrh	r3, [r7, #6]
 8000b98:	ee07 3a90 	vmov	s15, r3
 8000b9c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ba0:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8000ba4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ba8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 8000bac:	eeb0 0a67 	vmov.f32	s0, s15
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
	...

08000bbc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi5;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000bc0:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <MX_SPI1_Init+0x74>)
 8000bc2:	4a1c      	ldr	r2, [pc, #112]	; (8000c34 <MX_SPI1_Init+0x78>)
 8000bc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <MX_SPI1_Init+0x74>)
 8000bc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bcc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bce:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <MX_SPI1_Init+0x74>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000bd4:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <MX_SPI1_Init+0x74>)
 8000bd6:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000bda:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <MX_SPI1_Init+0x74>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000be2:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <MX_SPI1_Init+0x74>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <MX_SPI1_Init+0x74>)
 8000bea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <MX_SPI1_Init+0x74>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <MX_SPI1_Init+0x74>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <MX_SPI1_Init+0x74>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c02:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <MX_SPI1_Init+0x74>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c08:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <MX_SPI1_Init+0x74>)
 8000c0a:	2207      	movs	r2, #7
 8000c0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <MX_SPI1_Init+0x74>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <MX_SPI1_Init+0x74>)
 8000c16:	2208      	movs	r2, #8
 8000c18:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_SPI1_Init+0x74>)
 8000c1c:	f002 fc5c 	bl	80034d8 <HAL_SPI_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c26:	f7ff ff6d 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000454 	.word	0x20000454
 8000c34:	40013000 	.word	0x40013000

08000c38 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <MX_SPI5_Init+0x74>)
 8000c3e:	4a1c      	ldr	r2, [pc, #112]	; (8000cb0 <MX_SPI5_Init+0x78>)
 8000c40:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000c42:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <MX_SPI5_Init+0x74>)
 8000c44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c48:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000c4a:	4b18      	ldr	r3, [pc, #96]	; (8000cac <MX_SPI5_Init+0x74>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c50:	4b16      	ldr	r3, [pc, #88]	; (8000cac <MX_SPI5_Init+0x74>)
 8000c52:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c56:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c58:	4b14      	ldr	r3, [pc, #80]	; (8000cac <MX_SPI5_Init+0x74>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c5e:	4b13      	ldr	r3, [pc, #76]	; (8000cac <MX_SPI5_Init+0x74>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_SPI5_Init+0x74>)
 8000c66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c6a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MX_SPI5_Init+0x74>)
 8000c6e:	2228      	movs	r2, #40	; 0x28
 8000c70:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <MX_SPI5_Init+0x74>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <MX_SPI5_Init+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <MX_SPI5_Init+0x74>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_SPI5_Init+0x74>)
 8000c86:	2207      	movs	r2, #7
 8000c88:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <MX_SPI5_Init+0x74>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_SPI5_Init+0x74>)
 8000c92:	2208      	movs	r2, #8
 8000c94:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <MX_SPI5_Init+0x74>)
 8000c98:	f002 fc1e 	bl	80034d8 <HAL_SPI_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8000ca2:	f7ff ff2f 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200004b8 	.word	0x200004b8
 8000cb0:	40015000 	.word	0x40015000

08000cb4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08c      	sub	sp, #48	; 0x30
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 031c 	add.w	r3, r7, #28
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a3c      	ldr	r2, [pc, #240]	; (8000dc4 <HAL_SPI_MspInit+0x110>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d144      	bne.n	8000d60 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cd6:	4b3c      	ldr	r3, [pc, #240]	; (8000dc8 <HAL_SPI_MspInit+0x114>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cda:	4a3b      	ldr	r2, [pc, #236]	; (8000dc8 <HAL_SPI_MspInit+0x114>)
 8000cdc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce2:	4b39      	ldr	r3, [pc, #228]	; (8000dc8 <HAL_SPI_MspInit+0x114>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cea:	61bb      	str	r3, [r7, #24]
 8000cec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	4b36      	ldr	r3, [pc, #216]	; (8000dc8 <HAL_SPI_MspInit+0x114>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a35      	ldr	r2, [pc, #212]	; (8000dc8 <HAL_SPI_MspInit+0x114>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b33      	ldr	r3, [pc, #204]	; (8000dc8 <HAL_SPI_MspInit+0x114>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d06:	4b30      	ldr	r3, [pc, #192]	; (8000dc8 <HAL_SPI_MspInit+0x114>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a2f      	ldr	r2, [pc, #188]	; (8000dc8 <HAL_SPI_MspInit+0x114>)
 8000d0c:	f043 0308 	orr.w	r3, r3, #8
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b2d      	ldr	r3, [pc, #180]	; (8000dc8 <HAL_SPI_MspInit+0x114>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0308 	and.w	r3, r3, #8
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000d1e:	2360      	movs	r3, #96	; 0x60
 8000d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d2e:	2305      	movs	r3, #5
 8000d30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d32:	f107 031c 	add.w	r3, r7, #28
 8000d36:	4619      	mov	r1, r3
 8000d38:	4824      	ldr	r0, [pc, #144]	; (8000dcc <HAL_SPI_MspInit+0x118>)
 8000d3a:	f000 ff63 	bl	8001c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d3e:	2380      	movs	r3, #128	; 0x80
 8000d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d4e:	2305      	movs	r3, #5
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d52:	f107 031c 	add.w	r3, r7, #28
 8000d56:	4619      	mov	r1, r3
 8000d58:	481d      	ldr	r0, [pc, #116]	; (8000dd0 <HAL_SPI_MspInit+0x11c>)
 8000d5a:	f000 ff53 	bl	8001c04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8000d5e:	e02d      	b.n	8000dbc <HAL_SPI_MspInit+0x108>
  else if(spiHandle->Instance==SPI5)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a1b      	ldr	r2, [pc, #108]	; (8000dd4 <HAL_SPI_MspInit+0x120>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d128      	bne.n	8000dbc <HAL_SPI_MspInit+0x108>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000d6a:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <HAL_SPI_MspInit+0x114>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	4a16      	ldr	r2, [pc, #88]	; (8000dc8 <HAL_SPI_MspInit+0x114>)
 8000d70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d74:	6453      	str	r3, [r2, #68]	; 0x44
 8000d76:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <HAL_SPI_MspInit+0x114>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <HAL_SPI_MspInit+0x114>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a10      	ldr	r2, [pc, #64]	; (8000dc8 <HAL_SPI_MspInit+0x114>)
 8000d88:	f043 0320 	orr.w	r3, r3, #32
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <HAL_SPI_MspInit+0x114>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0320 	and.w	r3, r3, #32
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000d9a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da8:	2303      	movs	r3, #3
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000dac:	2305      	movs	r3, #5
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000db0:	f107 031c 	add.w	r3, r7, #28
 8000db4:	4619      	mov	r1, r3
 8000db6:	4808      	ldr	r0, [pc, #32]	; (8000dd8 <HAL_SPI_MspInit+0x124>)
 8000db8:	f000 ff24 	bl	8001c04 <HAL_GPIO_Init>
}
 8000dbc:	bf00      	nop
 8000dbe:	3730      	adds	r7, #48	; 0x30
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40013000 	.word	0x40013000
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40020000 	.word	0x40020000
 8000dd0:	40020c00 	.word	0x40020c00
 8000dd4:	40015000 	.word	0x40015000
 8000dd8:	40021400 	.word	0x40021400

08000ddc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000de2:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <HAL_MspInit+0x44>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <HAL_MspInit+0x44>)
 8000de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dec:	6413      	str	r3, [r2, #64]	; 0x40
 8000dee:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <HAL_MspInit+0x44>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <HAL_MspInit+0x44>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	4a08      	ldr	r2, [pc, #32]	; (8000e20 <HAL_MspInit+0x44>)
 8000e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e04:	6453      	str	r3, [r2, #68]	; 0x44
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_MspInit+0x44>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	40023800 	.word	0x40023800

08000e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e28:	e7fe      	b.n	8000e28 <NMI_Handler+0x4>

08000e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <HardFault_Handler+0x4>

08000e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <MemManage_Handler+0x4>

08000e36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <BusFault_Handler+0x4>

08000e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <UsageFault_Handler+0x4>

08000e42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e70:	f000 fa78 	bl	8001364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return 1;
 8000e7c:	2301      	movs	r3, #1
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <_kill>:

int _kill(int pid, int sig)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e92:	f004 fea7 	bl	8005be4 <__errno>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2216      	movs	r2, #22
 8000e9a:	601a      	str	r2, [r3, #0]
  return -1;
 8000e9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <_exit>:

void _exit (int status)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ffe7 	bl	8000e88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000eba:	e7fe      	b.n	8000eba <_exit+0x12>

08000ebc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	e00a      	b.n	8000ee4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ece:	f3af 8000 	nop.w
 8000ed2:	4601      	mov	r1, r0
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	1c5a      	adds	r2, r3, #1
 8000ed8:	60ba      	str	r2, [r7, #8]
 8000eda:	b2ca      	uxtb	r2, r1
 8000edc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	697a      	ldr	r2, [r7, #20]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	dbf0      	blt.n	8000ece <_read+0x12>
  }

  return len;
 8000eec:	687b      	ldr	r3, [r7, #4]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b086      	sub	sp, #24
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	60f8      	str	r0, [r7, #12]
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	e009      	b.n	8000f1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	1c5a      	adds	r2, r3, #1
 8000f0c:	60ba      	str	r2, [r7, #8]
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	697a      	ldr	r2, [r7, #20]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	dbf1      	blt.n	8000f08 <_write+0x12>
  }
  return len;
 8000f24:	687b      	ldr	r3, [r7, #4]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <_close>:

int _close(int file)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f56:	605a      	str	r2, [r3, #4]
  return 0;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <_isatty>:

int _isatty(int file)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa0:	4a14      	ldr	r2, [pc, #80]	; (8000ff4 <_sbrk+0x5c>)
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <_sbrk+0x60>)
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fac:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <_sbrk+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d102      	bne.n	8000fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <_sbrk+0x64>)
 8000fb6:	4a12      	ldr	r2, [pc, #72]	; (8001000 <_sbrk+0x68>)
 8000fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fba:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <_sbrk+0x64>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d207      	bcs.n	8000fd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc8:	f004 fe0c 	bl	8005be4 <__errno>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	220c      	movs	r2, #12
 8000fd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd6:	e009      	b.n	8000fec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd8:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <_sbrk+0x64>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fde:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <_sbrk+0x64>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <_sbrk+0x64>)
 8000fe8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fea:	68fb      	ldr	r3, [r7, #12]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3718      	adds	r7, #24
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20080000 	.word	0x20080000
 8000ff8:	00000400 	.word	0x00000400
 8000ffc:	2000051c 	.word	0x2000051c
 8001000:	20000c00 	.word	0x20000c00

08001004 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <SystemInit+0x20>)
 800100a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800100e:	4a05      	ldr	r2, [pc, #20]	; (8001024 <SystemInit+0x20>)
 8001010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001014:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800102c:	4b14      	ldr	r3, [pc, #80]	; (8001080 <MX_USART3_UART_Init+0x58>)
 800102e:	4a15      	ldr	r2, [pc, #84]	; (8001084 <MX_USART3_UART_Init+0x5c>)
 8001030:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8001032:	4b13      	ldr	r3, [pc, #76]	; (8001080 <MX_USART3_UART_Init+0x58>)
 8001034:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001038:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <MX_USART3_UART_Init+0x58>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001040:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <MX_USART3_UART_Init+0x58>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <MX_USART3_UART_Init+0x58>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <MX_USART3_UART_Init+0x58>)
 800104e:	220c      	movs	r2, #12
 8001050:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001052:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <MX_USART3_UART_Init+0x58>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001058:	4b09      	ldr	r3, [pc, #36]	; (8001080 <MX_USART3_UART_Init+0x58>)
 800105a:	2200      	movs	r2, #0
 800105c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <MX_USART3_UART_Init+0x58>)
 8001060:	2200      	movs	r2, #0
 8001062:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <MX_USART3_UART_Init+0x58>)
 8001066:	2200      	movs	r2, #0
 8001068:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800106a:	4805      	ldr	r0, [pc, #20]	; (8001080 <MX_USART3_UART_Init+0x58>)
 800106c:	f003 f826 	bl	80040bc <HAL_UART_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001076:	f7ff fd45 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000520 	.word	0x20000520
 8001084:	40004800 	.word	0x40004800

08001088 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b0ae      	sub	sp, #184	; 0xb8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	2290      	movs	r2, #144	; 0x90
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f004 fd48 	bl	8005b3e <memset>
  if(uartHandle->Instance==USART3)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a22      	ldr	r2, [pc, #136]	; (800113c <HAL_UART_MspInit+0xb4>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d13c      	bne.n	8001132 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010bc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010be:	2300      	movs	r3, #0
 80010c0:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	4618      	mov	r0, r3
 80010c8:	f001 fdde 	bl	8002c88 <HAL_RCCEx_PeriphCLKConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010d2:	f7ff fd17 	bl	8000b04 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <HAL_UART_MspInit+0xb8>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	4a19      	ldr	r2, [pc, #100]	; (8001140 <HAL_UART_MspInit+0xb8>)
 80010dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010e0:	6413      	str	r3, [r2, #64]	; 0x40
 80010e2:	4b17      	ldr	r3, [pc, #92]	; (8001140 <HAL_UART_MspInit+0xb8>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ee:	4b14      	ldr	r3, [pc, #80]	; (8001140 <HAL_UART_MspInit+0xb8>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a13      	ldr	r2, [pc, #76]	; (8001140 <HAL_UART_MspInit+0xb8>)
 80010f4:	f043 0308 	orr.w	r3, r3, #8
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <HAL_UART_MspInit+0xb8>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0308 	and.w	r3, r3, #8
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001106:	f44f 7340 	mov.w	r3, #768	; 0x300
 800110a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001120:	2307      	movs	r3, #7
 8001122:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001126:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800112a:	4619      	mov	r1, r3
 800112c:	4805      	ldr	r0, [pc, #20]	; (8001144 <HAL_UART_MspInit+0xbc>)
 800112e:	f000 fd69 	bl	8001c04 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001132:	bf00      	nop
 8001134:	37b8      	adds	r7, #184	; 0xb8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40004800 	.word	0x40004800
 8001140:	40023800 	.word	0x40023800
 8001144:	40020c00 	.word	0x40020c00

08001148 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800114e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001152:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001156:	2206      	movs	r2, #6
 8001158:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800115c:	2202      	movs	r2, #2
 800115e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001168:	2202      	movs	r2, #2
 800116a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800116e:	2201      	movs	r2, #1
 8001170:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001174:	2200      	movs	r2, #0
 8001176:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800117a:	2200      	movs	r2, #0
 800117c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001180:	2201      	movs	r2, #1
 8001182:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001186:	2200      	movs	r2, #0
 8001188:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800118c:	f000 feff 	bl	8001f8e <HAL_PCD_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001196:	f7ff fcb5 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200005a8 	.word	0x200005a8

080011a4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b0ae      	sub	sp, #184	; 0xb8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	2290      	movs	r2, #144	; 0x90
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f004 fcba 	bl	8005b3e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011d2:	d159      	bne.n	8001288 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80011d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80011d8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80011da:	2300      	movs	r3, #0
 80011dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4618      	mov	r0, r3
 80011e6:	f001 fd4f 	bl	8002c88 <HAL_RCCEx_PeriphCLKConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80011f0:	f7ff fc88 	bl	8000b04 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f4:	4b26      	ldr	r3, [pc, #152]	; (8001290 <HAL_PCD_MspInit+0xec>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f8:	4a25      	ldr	r2, [pc, #148]	; (8001290 <HAL_PCD_MspInit+0xec>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001200:	4b23      	ldr	r3, [pc, #140]	; (8001290 <HAL_PCD_MspInit+0xec>)
 8001202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800120c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001210:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001220:	2303      	movs	r3, #3
 8001222:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001226:	230a      	movs	r3, #10
 8001228:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001230:	4619      	mov	r1, r3
 8001232:	4818      	ldr	r0, [pc, #96]	; (8001294 <HAL_PCD_MspInit+0xf0>)
 8001234:	f000 fce6 	bl	8001c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001238:	f44f 7300 	mov.w	r3, #512	; 0x200
 800123c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001240:	2300      	movs	r3, #0
 8001242:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800124c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001250:	4619      	mov	r1, r3
 8001252:	4810      	ldr	r0, [pc, #64]	; (8001294 <HAL_PCD_MspInit+0xf0>)
 8001254:	f000 fcd6 	bl	8001c04 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001258:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <HAL_PCD_MspInit+0xec>)
 800125a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800125c:	4a0c      	ldr	r2, [pc, #48]	; (8001290 <HAL_PCD_MspInit+0xec>)
 800125e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001262:	6353      	str	r3, [r2, #52]	; 0x34
 8001264:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <HAL_PCD_MspInit+0xec>)
 8001266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <HAL_PCD_MspInit+0xec>)
 8001272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001274:	4a06      	ldr	r2, [pc, #24]	; (8001290 <HAL_PCD_MspInit+0xec>)
 8001276:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800127a:	6453      	str	r3, [r2, #68]	; 0x44
 800127c:	4b04      	ldr	r3, [pc, #16]	; (8001290 <HAL_PCD_MspInit+0xec>)
 800127e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001280:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001288:	bf00      	nop
 800128a:	37b8      	adds	r7, #184	; 0xb8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40023800 	.word	0x40023800
 8001294:	40020000 	.word	0x40020000

08001298 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001298:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800129c:	480d      	ldr	r0, [pc, #52]	; (80012d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800129e:	490e      	ldr	r1, [pc, #56]	; (80012d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012a0:	4a0e      	ldr	r2, [pc, #56]	; (80012dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a4:	e002      	b.n	80012ac <LoopCopyDataInit>

080012a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012aa:	3304      	adds	r3, #4

080012ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b0:	d3f9      	bcc.n	80012a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b2:	4a0b      	ldr	r2, [pc, #44]	; (80012e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012b4:	4c0b      	ldr	r4, [pc, #44]	; (80012e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b8:	e001      	b.n	80012be <LoopFillZerobss>

080012ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012bc:	3204      	adds	r2, #4

080012be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c0:	d3fb      	bcc.n	80012ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012c2:	f7ff fe9f 	bl	8001004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012c6:	f004 fc93 	bl	8005bf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ca:	f7ff fb57 	bl	800097c <main>
  bx  lr    
 80012ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012d0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80012d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80012dc:	08007ff4 	.word	0x08007ff4
  ldr r2, =_sbss
 80012e0:	20000314 	.word	0x20000314
  ldr r4, =_ebss
 80012e4:	20000c00 	.word	0x20000c00

080012e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012e8:	e7fe      	b.n	80012e8 <ADC_IRQHandler>

080012ea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ee:	2003      	movs	r0, #3
 80012f0:	f000 f92e 	bl	8001550 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012f4:	2000      	movs	r0, #0
 80012f6:	f000 f805 	bl	8001304 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012fa:	f7ff fd6f 	bl	8000ddc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	bd80      	pop	{r7, pc}

08001304 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_InitTick+0x54>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_InitTick+0x58>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	4619      	mov	r1, r3
 8001316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131a:	fbb3 f3f1 	udiv	r3, r3, r1
 800131e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f000 f93b 	bl	800159e <HAL_SYSTICK_Config>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e00e      	b.n	8001350 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b0f      	cmp	r3, #15
 8001336:	d80a      	bhi.n	800134e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001338:	2200      	movs	r2, #0
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	f04f 30ff 	mov.w	r0, #4294967295
 8001340:	f000 f911 	bl	8001566 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001344:	4a06      	ldr	r2, [pc, #24]	; (8001360 <HAL_InitTick+0x5c>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	e000      	b.n	8001350 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
}
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000000 	.word	0x20000000
 800135c:	20000008 	.word	0x20000008
 8001360:	20000004 	.word	0x20000004

08001364 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_IncTick+0x20>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	461a      	mov	r2, r3
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_IncTick+0x24>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4413      	add	r3, r2
 8001374:	4a04      	ldr	r2, [pc, #16]	; (8001388 <HAL_IncTick+0x24>)
 8001376:	6013      	str	r3, [r2, #0]
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	20000008 	.word	0x20000008
 8001388:	20000ab0 	.word	0x20000ab0

0800138c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return uwTick;
 8001390:	4b03      	ldr	r3, [pc, #12]	; (80013a0 <HAL_GetTick+0x14>)
 8001392:	681b      	ldr	r3, [r3, #0]
}
 8001394:	4618      	mov	r0, r3
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	20000ab0 	.word	0x20000ab0

080013a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013ac:	f7ff ffee 	bl	800138c <HAL_GetTick>
 80013b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013bc:	d005      	beq.n	80013ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <HAL_Delay+0x44>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	461a      	mov	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4413      	add	r3, r2
 80013c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ca:	bf00      	nop
 80013cc:	f7ff ffde 	bl	800138c <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d8f7      	bhi.n	80013cc <HAL_Delay+0x28>
  {
  }
}
 80013dc:	bf00      	nop
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000008 	.word	0x20000008

080013ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013fc:	4b0b      	ldr	r3, [pc, #44]	; (800142c <__NVIC_SetPriorityGrouping+0x40>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001408:	4013      	ands	r3, r2
 800140a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <__NVIC_SetPriorityGrouping+0x44>)
 8001416:	4313      	orrs	r3, r2
 8001418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800141a:	4a04      	ldr	r2, [pc, #16]	; (800142c <__NVIC_SetPriorityGrouping+0x40>)
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	60d3      	str	r3, [r2, #12]
}
 8001420:	bf00      	nop
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000ed00 	.word	0xe000ed00
 8001430:	05fa0000 	.word	0x05fa0000

08001434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <__NVIC_GetPriorityGrouping+0x18>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	0a1b      	lsrs	r3, r3, #8
 800143e:	f003 0307 	and.w	r3, r3, #7
}
 8001442:	4618      	mov	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	6039      	str	r1, [r7, #0]
 800145a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	2b00      	cmp	r3, #0
 8001462:	db0a      	blt.n	800147a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	b2da      	uxtb	r2, r3
 8001468:	490c      	ldr	r1, [pc, #48]	; (800149c <__NVIC_SetPriority+0x4c>)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	0112      	lsls	r2, r2, #4
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	440b      	add	r3, r1
 8001474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001478:	e00a      	b.n	8001490 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4908      	ldr	r1, [pc, #32]	; (80014a0 <__NVIC_SetPriority+0x50>)
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	3b04      	subs	r3, #4
 8001488:	0112      	lsls	r2, r2, #4
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	440b      	add	r3, r1
 800148e:	761a      	strb	r2, [r3, #24]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000e100 	.word	0xe000e100
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b089      	sub	sp, #36	; 0x24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f1c3 0307 	rsb	r3, r3, #7
 80014be:	2b04      	cmp	r3, #4
 80014c0:	bf28      	it	cs
 80014c2:	2304      	movcs	r3, #4
 80014c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3304      	adds	r3, #4
 80014ca:	2b06      	cmp	r3, #6
 80014cc:	d902      	bls.n	80014d4 <NVIC_EncodePriority+0x30>
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3b03      	subs	r3, #3
 80014d2:	e000      	b.n	80014d6 <NVIC_EncodePriority+0x32>
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	f04f 32ff 	mov.w	r2, #4294967295
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43da      	mvns	r2, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	401a      	ands	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ec:	f04f 31ff 	mov.w	r1, #4294967295
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa01 f303 	lsl.w	r3, r1, r3
 80014f6:	43d9      	mvns	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	4313      	orrs	r3, r2
         );
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3724      	adds	r7, #36	; 0x24
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3b01      	subs	r3, #1
 8001518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800151c:	d301      	bcc.n	8001522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800151e:	2301      	movs	r3, #1
 8001520:	e00f      	b.n	8001542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001522:	4a0a      	ldr	r2, [pc, #40]	; (800154c <SysTick_Config+0x40>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800152a:	210f      	movs	r1, #15
 800152c:	f04f 30ff 	mov.w	r0, #4294967295
 8001530:	f7ff ff8e 	bl	8001450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <SysTick_Config+0x40>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800153a:	4b04      	ldr	r3, [pc, #16]	; (800154c <SysTick_Config+0x40>)
 800153c:	2207      	movs	r2, #7
 800153e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	e000e010 	.word	0xe000e010

08001550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff ff47 	bl	80013ec <__NVIC_SetPriorityGrouping>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001566:	b580      	push	{r7, lr}
 8001568:	b086      	sub	sp, #24
 800156a:	af00      	add	r7, sp, #0
 800156c:	4603      	mov	r3, r0
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
 8001572:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001578:	f7ff ff5c 	bl	8001434 <__NVIC_GetPriorityGrouping>
 800157c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	68b9      	ldr	r1, [r7, #8]
 8001582:	6978      	ldr	r0, [r7, #20]
 8001584:	f7ff ff8e 	bl	80014a4 <NVIC_EncodePriority>
 8001588:	4602      	mov	r2, r0
 800158a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158e:	4611      	mov	r1, r2
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff5d 	bl	8001450 <__NVIC_SetPriority>
}
 8001596:	bf00      	nop
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff ffb0 	bl	800150c <SysTick_Config>
 80015ac:	4603      	mov	r3, r0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e06a      	b.n	80016a0 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d106      	bne.n	80015e2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2223      	movs	r2, #35	; 0x23
 80015d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff f853 	bl	8000688 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e2:	4b31      	ldr	r3, [pc, #196]	; (80016a8 <HAL_ETH_Init+0xf0>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	4a30      	ldr	r2, [pc, #192]	; (80016a8 <HAL_ETH_Init+0xf0>)
 80015e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ec:	6453      	str	r3, [r2, #68]	; 0x44
 80015ee:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <HAL_ETH_Init+0xf0>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80015fa:	4b2c      	ldr	r3, [pc, #176]	; (80016ac <HAL_ETH_Init+0xf4>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	4a2b      	ldr	r2, [pc, #172]	; (80016ac <HAL_ETH_Init+0xf4>)
 8001600:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001604:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001606:	4b29      	ldr	r3, [pc, #164]	; (80016ac <HAL_ETH_Init+0xf4>)
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	4927      	ldr	r1, [pc, #156]	; (80016ac <HAL_ETH_Init+0xf4>)
 8001610:	4313      	orrs	r3, r2
 8001612:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001614:	4b25      	ldr	r3, [pc, #148]	; (80016ac <HAL_ETH_Init+0xf4>)
 8001616:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	6812      	ldr	r2, [r2, #0]
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800162e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001630:	f7ff feac 	bl	800138c <HAL_GetTick>
 8001634:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001636:	e011      	b.n	800165c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001638:	f7ff fea8 	bl	800138c <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001646:	d909      	bls.n	800165c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2204      	movs	r2, #4
 800164c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	22e0      	movs	r2, #224	; 0xe0
 8001654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e021      	b.n	80016a0 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1e4      	bne.n	8001638 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 f958 	bl	8001924 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f000 f9ff 	bl	8001a78 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 fa55 	bl	8001b2a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	461a      	mov	r2, r3
 8001686:	2100      	movs	r1, #0
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 f9bd 	bl	8001a08 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2210      	movs	r2, #16
 800169a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40013800 	.word	0x40013800

080016b0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	4b51      	ldr	r3, [pc, #324]	; (800180c <ETH_SetMACConfig+0x15c>)
 80016c6:	4013      	ands	r3, r2
 80016c8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	7c1b      	ldrb	r3, [r3, #16]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d102      	bne.n	80016d8 <ETH_SetMACConfig+0x28>
 80016d2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80016d6:	e000      	b.n	80016da <ETH_SetMACConfig+0x2a>
 80016d8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	7c5b      	ldrb	r3, [r3, #17]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d102      	bne.n	80016e8 <ETH_SetMACConfig+0x38>
 80016e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016e6:	e000      	b.n	80016ea <ETH_SetMACConfig+0x3a>
 80016e8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80016ea:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80016f0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	7fdb      	ldrb	r3, [r3, #31]
 80016f6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80016f8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80016fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	7f92      	ldrb	r2, [r2, #30]
 8001704:	2a00      	cmp	r2, #0
 8001706:	d102      	bne.n	800170e <ETH_SetMACConfig+0x5e>
 8001708:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800170c:	e000      	b.n	8001710 <ETH_SetMACConfig+0x60>
 800170e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001710:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	7f1b      	ldrb	r3, [r3, #28]
 8001716:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001718:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800171e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	791b      	ldrb	r3, [r3, #4]
 8001724:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001726:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800172e:	2a00      	cmp	r2, #0
 8001730:	d102      	bne.n	8001738 <ETH_SetMACConfig+0x88>
 8001732:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001736:	e000      	b.n	800173a <ETH_SetMACConfig+0x8a>
 8001738:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800173a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	7bdb      	ldrb	r3, [r3, #15]
 8001740:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001742:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001748:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001750:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001752:	4313      	orrs	r3, r2
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	4313      	orrs	r3, r2
 8001758:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800176a:	2001      	movs	r0, #1
 800176c:	f7ff fe1a 	bl	80013a4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001786:	4013      	ands	r3, r2
 8001788:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800178e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001796:	2a00      	cmp	r2, #0
 8001798:	d101      	bne.n	800179e <ETH_SetMACConfig+0xee>
 800179a:	2280      	movs	r2, #128	; 0x80
 800179c:	e000      	b.n	80017a0 <ETH_SetMACConfig+0xf0>
 800179e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80017a0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80017a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80017ae:	2a01      	cmp	r2, #1
 80017b0:	d101      	bne.n	80017b6 <ETH_SetMACConfig+0x106>
 80017b2:	2208      	movs	r2, #8
 80017b4:	e000      	b.n	80017b8 <ETH_SetMACConfig+0x108>
 80017b6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80017b8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80017c0:	2a01      	cmp	r2, #1
 80017c2:	d101      	bne.n	80017c8 <ETH_SetMACConfig+0x118>
 80017c4:	2204      	movs	r2, #4
 80017c6:	e000      	b.n	80017ca <ETH_SetMACConfig+0x11a>
 80017c8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80017ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80017d2:	2a01      	cmp	r2, #1
 80017d4:	d101      	bne.n	80017da <ETH_SetMACConfig+0x12a>
 80017d6:	2202      	movs	r2, #2
 80017d8:	e000      	b.n	80017dc <ETH_SetMACConfig+0x12c>
 80017da:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80017dc:	4313      	orrs	r3, r2
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017f4:	2001      	movs	r0, #1
 80017f6:	f7ff fdd5 	bl	80013a4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	619a      	str	r2, [r3, #24]
}
 8001802:	bf00      	nop
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	ff20810f 	.word	0xff20810f

08001810 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	4b3d      	ldr	r3, [pc, #244]	; (8001920 <ETH_SetDMAConfig+0x110>)
 800182a:	4013      	ands	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	7b1b      	ldrb	r3, [r3, #12]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d102      	bne.n	800183c <ETH_SetDMAConfig+0x2c>
 8001836:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800183a:	e000      	b.n	800183e <ETH_SetDMAConfig+0x2e>
 800183c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	7b5b      	ldrb	r3, [r3, #13]
 8001842:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001844:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	7f52      	ldrb	r2, [r2, #29]
 800184a:	2a00      	cmp	r2, #0
 800184c:	d102      	bne.n	8001854 <ETH_SetDMAConfig+0x44>
 800184e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001852:	e000      	b.n	8001856 <ETH_SetDMAConfig+0x46>
 8001854:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001856:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	7b9b      	ldrb	r3, [r3, #14]
 800185c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800185e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001864:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	7f1b      	ldrb	r3, [r3, #28]
 800186a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800186c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	7f9b      	ldrb	r3, [r3, #30]
 8001872:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001874:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800187a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001882:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001884:	4313      	orrs	r3, r2
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	4313      	orrs	r3, r2
 800188a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001894:	461a      	mov	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80018a6:	2001      	movs	r0, #1
 80018a8:	f7ff fd7c 	bl	80013a4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018b4:	461a      	mov	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	791b      	ldrb	r3, [r3, #4]
 80018be:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80018c4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80018ca:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80018d0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018d8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80018da:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80018e2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80018e8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6812      	ldr	r2, [r2, #0]
 80018ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018f6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001904:	2001      	movs	r0, #1
 8001906:	f7ff fd4d 	bl	80013a4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001912:	461a      	mov	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6013      	str	r3, [r2, #0]
}
 8001918:	bf00      	nop
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	f8de3f23 	.word	0xf8de3f23

08001924 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b0a6      	sub	sp, #152	; 0x98
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800192c:	2301      	movs	r3, #1
 800192e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001932:	2301      	movs	r3, #1
 8001934:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001938:	2300      	movs	r3, #0
 800193a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800193c:	2300      	movs	r3, #0
 800193e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001942:	2301      	movs	r3, #1
 8001944:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001948:	2300      	movs	r3, #0
 800194a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800194e:	2301      	movs	r3, #1
 8001950:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001954:	2300      	movs	r3, #0
 8001956:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001960:	2300      	movs	r3, #0
 8001962:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001964:	2300      	movs	r3, #0
 8001966:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800196a:	2300      	movs	r3, #0
 800196c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800196e:	2300      	movs	r3, #0
 8001970:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001974:	2300      	movs	r3, #0
 8001976:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800197a:	2300      	movs	r3, #0
 800197c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001980:	2300      	movs	r3, #0
 8001982:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001986:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800198a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800198c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001990:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001998:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800199c:	4619      	mov	r1, r3
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff fe86 	bl	80016b0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80019a4:	2301      	movs	r3, #1
 80019a6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80019a8:	2301      	movs	r3, #1
 80019aa:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80019ac:	2301      	movs	r3, #1
 80019ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80019b2:	2301      	movs	r3, #1
 80019b4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80019c6:	2300      	movs	r3, #0
 80019c8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80019ca:	2301      	movs	r3, #1
 80019cc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80019d0:	2301      	movs	r3, #1
 80019d2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80019d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019d8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80019da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019de:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80019e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019e4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80019e6:	2301      	movs	r3, #1
 80019e8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80019f4:	f107 0308 	add.w	r3, r7, #8
 80019f8:	4619      	mov	r1, r3
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff ff08 	bl	8001810 <ETH_SetDMAConfig>
}
 8001a00:	bf00      	nop
 8001a02:	3798      	adds	r7, #152	; 0x98
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b087      	sub	sp, #28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3305      	adds	r3, #5
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	021b      	lsls	r3, r3, #8
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	3204      	adds	r2, #4
 8001a20:	7812      	ldrb	r2, [r2, #0]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <ETH_MACAddressConfig+0x68>)
 8001a2a:	4413      	add	r3, r2
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3303      	adds	r3, #3
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	061a      	lsls	r2, r3, #24
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	041b      	lsls	r3, r3, #16
 8001a42:	431a      	orrs	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3301      	adds	r3, #1
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	021b      	lsls	r3, r3, #8
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	7812      	ldrb	r2, [r2, #0]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <ETH_MACAddressConfig+0x6c>)
 8001a5a:	4413      	add	r3, r2
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	6013      	str	r3, [r2, #0]
}
 8001a62:	bf00      	nop
 8001a64:	371c      	adds	r7, #28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40028040 	.word	0x40028040
 8001a74:	40028044 	.word	0x40028044

08001a78 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	e03e      	b.n	8001b04 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68d9      	ldr	r1, [r3, #12]
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	440b      	add	r3, r1
 8001a96:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	2200      	movs	r2, #0
 8001aae:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001ab0:	68b9      	ldr	r1, [r7, #8]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	3206      	adds	r2, #6
 8001ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d80c      	bhi.n	8001ae8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68d9      	ldr	r1, [r3, #12]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1c5a      	adds	r2, r3, #1
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	440b      	add	r3, r1
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	e004      	b.n	8001af2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	461a      	mov	r2, r3
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	3301      	adds	r3, #1
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d9bd      	bls.n	8001a86 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b1c:	611a      	str	r2, [r3, #16]
}
 8001b1e:	bf00      	nop
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b085      	sub	sp, #20
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	e046      	b.n	8001bc6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6919      	ldr	r1, [r3, #16]
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4413      	add	r3, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	440b      	add	r3, r1
 8001b48:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	2200      	movs	r2, #0
 8001b54:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	2200      	movs	r2, #0
 8001b66:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b74:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001b7c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001b8a:	68b9      	ldr	r1, [r7, #8]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	3212      	adds	r2, #18
 8001b92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d80c      	bhi.n	8001bb6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6919      	ldr	r1, [r3, #16]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	1c5a      	adds	r2, r3, #1
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	440b      	add	r3, r1
 8001bae:	461a      	mov	r2, r3
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	60da      	str	r2, [r3, #12]
 8001bb4:	e004      	b.n	8001bc0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2b03      	cmp	r3, #3
 8001bca:	d9b5      	bls.n	8001b38 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691a      	ldr	r2, [r3, #16]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf6:	60da      	str	r2, [r3, #12]
}
 8001bf8:	bf00      	nop
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b089      	sub	sp, #36	; 0x24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
 8001c22:	e175      	b.n	8001f10 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c24:	2201      	movs	r2, #1
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	697a      	ldr	r2, [r7, #20]
 8001c34:	4013      	ands	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	f040 8164 	bne.w	8001f0a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d005      	beq.n	8001c5a <HAL_GPIO_Init+0x56>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d130      	bne.n	8001cbc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	2203      	movs	r2, #3
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	68da      	ldr	r2, [r3, #12]
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c90:	2201      	movs	r2, #1
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	091b      	lsrs	r3, r3, #4
 8001ca6:	f003 0201 	and.w	r2, r3, #1
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 0303 	and.w	r3, r3, #3
 8001cc4:	2b03      	cmp	r3, #3
 8001cc6:	d017      	beq.n	8001cf8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d123      	bne.n	8001d4c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	08da      	lsrs	r2, r3, #3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3208      	adds	r2, #8
 8001d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	220f      	movs	r2, #15
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	691a      	ldr	r2, [r3, #16]
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	08da      	lsrs	r2, r3, #3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	3208      	adds	r2, #8
 8001d46:	69b9      	ldr	r1, [r7, #24]
 8001d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	2203      	movs	r2, #3
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 0203 	and.w	r2, r3, #3
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 80be 	beq.w	8001f0a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8e:	4b66      	ldr	r3, [pc, #408]	; (8001f28 <HAL_GPIO_Init+0x324>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	4a65      	ldr	r2, [pc, #404]	; (8001f28 <HAL_GPIO_Init+0x324>)
 8001d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d98:	6453      	str	r3, [r2, #68]	; 0x44
 8001d9a:	4b63      	ldr	r3, [pc, #396]	; (8001f28 <HAL_GPIO_Init+0x324>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001da6:	4a61      	ldr	r2, [pc, #388]	; (8001f2c <HAL_GPIO_Init+0x328>)
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	089b      	lsrs	r3, r3, #2
 8001dac:	3302      	adds	r3, #2
 8001dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	220f      	movs	r2, #15
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a58      	ldr	r2, [pc, #352]	; (8001f30 <HAL_GPIO_Init+0x32c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d037      	beq.n	8001e42 <HAL_GPIO_Init+0x23e>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a57      	ldr	r2, [pc, #348]	; (8001f34 <HAL_GPIO_Init+0x330>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d031      	beq.n	8001e3e <HAL_GPIO_Init+0x23a>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a56      	ldr	r2, [pc, #344]	; (8001f38 <HAL_GPIO_Init+0x334>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d02b      	beq.n	8001e3a <HAL_GPIO_Init+0x236>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a55      	ldr	r2, [pc, #340]	; (8001f3c <HAL_GPIO_Init+0x338>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d025      	beq.n	8001e36 <HAL_GPIO_Init+0x232>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a54      	ldr	r2, [pc, #336]	; (8001f40 <HAL_GPIO_Init+0x33c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d01f      	beq.n	8001e32 <HAL_GPIO_Init+0x22e>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a53      	ldr	r2, [pc, #332]	; (8001f44 <HAL_GPIO_Init+0x340>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d019      	beq.n	8001e2e <HAL_GPIO_Init+0x22a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a52      	ldr	r2, [pc, #328]	; (8001f48 <HAL_GPIO_Init+0x344>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d013      	beq.n	8001e2a <HAL_GPIO_Init+0x226>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a51      	ldr	r2, [pc, #324]	; (8001f4c <HAL_GPIO_Init+0x348>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d00d      	beq.n	8001e26 <HAL_GPIO_Init+0x222>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a50      	ldr	r2, [pc, #320]	; (8001f50 <HAL_GPIO_Init+0x34c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d007      	beq.n	8001e22 <HAL_GPIO_Init+0x21e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a4f      	ldr	r2, [pc, #316]	; (8001f54 <HAL_GPIO_Init+0x350>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d101      	bne.n	8001e1e <HAL_GPIO_Init+0x21a>
 8001e1a:	2309      	movs	r3, #9
 8001e1c:	e012      	b.n	8001e44 <HAL_GPIO_Init+0x240>
 8001e1e:	230a      	movs	r3, #10
 8001e20:	e010      	b.n	8001e44 <HAL_GPIO_Init+0x240>
 8001e22:	2308      	movs	r3, #8
 8001e24:	e00e      	b.n	8001e44 <HAL_GPIO_Init+0x240>
 8001e26:	2307      	movs	r3, #7
 8001e28:	e00c      	b.n	8001e44 <HAL_GPIO_Init+0x240>
 8001e2a:	2306      	movs	r3, #6
 8001e2c:	e00a      	b.n	8001e44 <HAL_GPIO_Init+0x240>
 8001e2e:	2305      	movs	r3, #5
 8001e30:	e008      	b.n	8001e44 <HAL_GPIO_Init+0x240>
 8001e32:	2304      	movs	r3, #4
 8001e34:	e006      	b.n	8001e44 <HAL_GPIO_Init+0x240>
 8001e36:	2303      	movs	r3, #3
 8001e38:	e004      	b.n	8001e44 <HAL_GPIO_Init+0x240>
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	e002      	b.n	8001e44 <HAL_GPIO_Init+0x240>
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e000      	b.n	8001e44 <HAL_GPIO_Init+0x240>
 8001e42:	2300      	movs	r3, #0
 8001e44:	69fa      	ldr	r2, [r7, #28]
 8001e46:	f002 0203 	and.w	r2, r2, #3
 8001e4a:	0092      	lsls	r2, r2, #2
 8001e4c:	4093      	lsls	r3, r2
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e54:	4935      	ldr	r1, [pc, #212]	; (8001f2c <HAL_GPIO_Init+0x328>)
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	089b      	lsrs	r3, r3, #2
 8001e5a:	3302      	adds	r3, #2
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e62:	4b3d      	ldr	r3, [pc, #244]	; (8001f58 <HAL_GPIO_Init+0x354>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e86:	4a34      	ldr	r2, [pc, #208]	; (8001f58 <HAL_GPIO_Init+0x354>)
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e8c:	4b32      	ldr	r3, [pc, #200]	; (8001f58 <HAL_GPIO_Init+0x354>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001eb0:	4a29      	ldr	r2, [pc, #164]	; (8001f58 <HAL_GPIO_Init+0x354>)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eb6:	4b28      	ldr	r3, [pc, #160]	; (8001f58 <HAL_GPIO_Init+0x354>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eda:	4a1f      	ldr	r2, [pc, #124]	; (8001f58 <HAL_GPIO_Init+0x354>)
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ee0:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <HAL_GPIO_Init+0x354>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f04:	4a14      	ldr	r2, [pc, #80]	; (8001f58 <HAL_GPIO_Init+0x354>)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	61fb      	str	r3, [r7, #28]
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	2b0f      	cmp	r3, #15
 8001f14:	f67f ae86 	bls.w	8001c24 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001f18:	bf00      	nop
 8001f1a:	bf00      	nop
 8001f1c:	3724      	adds	r7, #36	; 0x24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40013800 	.word	0x40013800
 8001f30:	40020000 	.word	0x40020000
 8001f34:	40020400 	.word	0x40020400
 8001f38:	40020800 	.word	0x40020800
 8001f3c:	40020c00 	.word	0x40020c00
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40021400 	.word	0x40021400
 8001f48:	40021800 	.word	0x40021800
 8001f4c:	40021c00 	.word	0x40021c00
 8001f50:	40022000 	.word	0x40022000
 8001f54:	40022400 	.word	0x40022400
 8001f58:	40013c00 	.word	0x40013c00

08001f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	807b      	strh	r3, [r7, #2]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f6c:	787b      	ldrb	r3, [r7, #1]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f72:	887a      	ldrh	r2, [r7, #2]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f78:	e003      	b.n	8001f82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f7a:	887b      	ldrh	r3, [r7, #2]
 8001f7c:	041a      	lsls	r2, r3, #16
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	619a      	str	r2, [r3, #24]
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f90:	b08f      	sub	sp, #60	; 0x3c
 8001f92:	af0a      	add	r7, sp, #40	; 0x28
 8001f94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e116      	b.n	80021ce <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d106      	bne.n	8001fc0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff f8f2 	bl	80011a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d102      	bne.n	8001fda <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f002 fdb0 	bl	8004b44 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	603b      	str	r3, [r7, #0]
 8001fea:	687e      	ldr	r6, [r7, #4]
 8001fec:	466d      	mov	r5, sp
 8001fee:	f106 0410 	add.w	r4, r6, #16
 8001ff2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ff4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ff6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ff8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ffa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ffe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002002:	1d33      	adds	r3, r6, #4
 8002004:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002006:	6838      	ldr	r0, [r7, #0]
 8002008:	f002 fd44 	bl	8004a94 <USB_CoreInit>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d005      	beq.n	800201e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2202      	movs	r2, #2
 8002016:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e0d7      	b.n	80021ce <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2100      	movs	r1, #0
 8002024:	4618      	mov	r0, r3
 8002026:	f002 fd9e 	bl	8004b66 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800202a:	2300      	movs	r3, #0
 800202c:	73fb      	strb	r3, [r7, #15]
 800202e:	e04a      	b.n	80020c6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002030:	7bfa      	ldrb	r2, [r7, #15]
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	4413      	add	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	333d      	adds	r3, #61	; 0x3d
 8002040:	2201      	movs	r2, #1
 8002042:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002044:	7bfa      	ldrb	r2, [r7, #15]
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	4413      	add	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	333c      	adds	r3, #60	; 0x3c
 8002054:	7bfa      	ldrb	r2, [r7, #15]
 8002056:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002058:	7bfa      	ldrb	r2, [r7, #15]
 800205a:	7bfb      	ldrb	r3, [r7, #15]
 800205c:	b298      	uxth	r0, r3
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	4413      	add	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	3344      	adds	r3, #68	; 0x44
 800206c:	4602      	mov	r2, r0
 800206e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002070:	7bfa      	ldrb	r2, [r7, #15]
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4413      	add	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	3340      	adds	r3, #64	; 0x40
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002084:	7bfa      	ldrb	r2, [r7, #15]
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4413      	add	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	3348      	adds	r3, #72	; 0x48
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002098:	7bfa      	ldrb	r2, [r7, #15]
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	4413      	add	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	334c      	adds	r3, #76	; 0x4c
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020ac:	7bfa      	ldrb	r2, [r7, #15]
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	4613      	mov	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	4413      	add	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	440b      	add	r3, r1
 80020ba:	3354      	adds	r3, #84	; 0x54
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
 80020c2:	3301      	adds	r3, #1
 80020c4:	73fb      	strb	r3, [r7, #15]
 80020c6:	7bfa      	ldrb	r2, [r7, #15]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d3af      	bcc.n	8002030 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020d0:	2300      	movs	r3, #0
 80020d2:	73fb      	strb	r3, [r7, #15]
 80020d4:	e044      	b.n	8002160 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020d6:	7bfa      	ldrb	r2, [r7, #15]
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	4413      	add	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80020e8:	2200      	movs	r2, #0
 80020ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020ec:	7bfa      	ldrb	r2, [r7, #15]
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80020fe:	7bfa      	ldrb	r2, [r7, #15]
 8002100:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002102:	7bfa      	ldrb	r2, [r7, #15]
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	4413      	add	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002114:	2200      	movs	r2, #0
 8002116:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002118:	7bfa      	ldrb	r2, [r7, #15]
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4413      	add	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800212e:	7bfa      	ldrb	r2, [r7, #15]
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4413      	add	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	440b      	add	r3, r1
 800213c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002144:	7bfa      	ldrb	r2, [r7, #15]
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800215a:	7bfb      	ldrb	r3, [r7, #15]
 800215c:	3301      	adds	r3, #1
 800215e:	73fb      	strb	r3, [r7, #15]
 8002160:	7bfa      	ldrb	r2, [r7, #15]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	429a      	cmp	r2, r3
 8002168:	d3b5      	bcc.n	80020d6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	603b      	str	r3, [r7, #0]
 8002170:	687e      	ldr	r6, [r7, #4]
 8002172:	466d      	mov	r5, sp
 8002174:	f106 0410 	add.w	r4, r6, #16
 8002178:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800217a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800217c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800217e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002180:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002184:	e885 0003 	stmia.w	r5, {r0, r1}
 8002188:	1d33      	adds	r3, r6, #4
 800218a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800218c:	6838      	ldr	r0, [r7, #0]
 800218e:	f002 fd37 	bl	8004c00 <USB_DevInit>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d005      	beq.n	80021a4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2202      	movs	r2, #2
 800219c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e014      	b.n	80021ce <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d102      	bne.n	80021c2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 f80b 	bl	80021d8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f002 fef5 	bl	8004fb6 <USB_DevDisconnect>

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080021d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002206:	4b05      	ldr	r3, [pc, #20]	; (800221c <HAL_PCDEx_ActivateLPM+0x44>)
 8002208:	4313      	orrs	r3, r2
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	10000003 	.word	0x10000003

08002220 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002224:	4b05      	ldr	r3, [pc, #20]	; (800223c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a04      	ldr	r2, [pc, #16]	; (800223c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800222a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800222e:	6013      	str	r3, [r2, #0]
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40007000 	.word	0x40007000

08002240 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800224a:	4b23      	ldr	r3, [pc, #140]	; (80022d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	4a22      	ldr	r2, [pc, #136]	; (80022d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002254:	6413      	str	r3, [r2, #64]	; 0x40
 8002256:	4b20      	ldr	r3, [pc, #128]	; (80022d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225e:	603b      	str	r3, [r7, #0]
 8002260:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002262:	4b1e      	ldr	r3, [pc, #120]	; (80022dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a1d      	ldr	r2, [pc, #116]	; (80022dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800226e:	f7ff f88d 	bl	800138c <HAL_GetTick>
 8002272:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002274:	e009      	b.n	800228a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002276:	f7ff f889 	bl	800138c <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002284:	d901      	bls.n	800228a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e022      	b.n	80022d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800228a:	4b14      	ldr	r3, [pc, #80]	; (80022dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002296:	d1ee      	bne.n	8002276 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002298:	4b10      	ldr	r3, [pc, #64]	; (80022dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a0f      	ldr	r2, [pc, #60]	; (80022dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800229e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022a4:	f7ff f872 	bl	800138c <HAL_GetTick>
 80022a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80022aa:	e009      	b.n	80022c0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80022ac:	f7ff f86e 	bl	800138c <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022ba:	d901      	bls.n	80022c0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e007      	b.n	80022d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80022c0:	4b06      	ldr	r3, [pc, #24]	; (80022dc <HAL_PWREx_EnableOverDrive+0x9c>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80022cc:	d1ee      	bne.n	80022ac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40007000 	.word	0x40007000

080022e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80022e8:	2300      	movs	r3, #0
 80022ea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e29b      	b.n	800282e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 8087 	beq.w	8002412 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002304:	4b96      	ldr	r3, [pc, #600]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 030c 	and.w	r3, r3, #12
 800230c:	2b04      	cmp	r3, #4
 800230e:	d00c      	beq.n	800232a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002310:	4b93      	ldr	r3, [pc, #588]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 030c 	and.w	r3, r3, #12
 8002318:	2b08      	cmp	r3, #8
 800231a:	d112      	bne.n	8002342 <HAL_RCC_OscConfig+0x62>
 800231c:	4b90      	ldr	r3, [pc, #576]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002324:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002328:	d10b      	bne.n	8002342 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232a:	4b8d      	ldr	r3, [pc, #564]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d06c      	beq.n	8002410 <HAL_RCC_OscConfig+0x130>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d168      	bne.n	8002410 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e275      	b.n	800282e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800234a:	d106      	bne.n	800235a <HAL_RCC_OscConfig+0x7a>
 800234c:	4b84      	ldr	r3, [pc, #528]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a83      	ldr	r2, [pc, #524]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 8002352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002356:	6013      	str	r3, [r2, #0]
 8002358:	e02e      	b.n	80023b8 <HAL_RCC_OscConfig+0xd8>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10c      	bne.n	800237c <HAL_RCC_OscConfig+0x9c>
 8002362:	4b7f      	ldr	r3, [pc, #508]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a7e      	ldr	r2, [pc, #504]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 8002368:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	4b7c      	ldr	r3, [pc, #496]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a7b      	ldr	r2, [pc, #492]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 8002374:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	e01d      	b.n	80023b8 <HAL_RCC_OscConfig+0xd8>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002384:	d10c      	bne.n	80023a0 <HAL_RCC_OscConfig+0xc0>
 8002386:	4b76      	ldr	r3, [pc, #472]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a75      	ldr	r2, [pc, #468]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 800238c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	4b73      	ldr	r3, [pc, #460]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a72      	ldr	r2, [pc, #456]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 8002398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	e00b      	b.n	80023b8 <HAL_RCC_OscConfig+0xd8>
 80023a0:	4b6f      	ldr	r3, [pc, #444]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a6e      	ldr	r2, [pc, #440]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 80023a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	4b6c      	ldr	r3, [pc, #432]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a6b      	ldr	r2, [pc, #428]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 80023b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d013      	beq.n	80023e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7fe ffe4 	bl	800138c <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c8:	f7fe ffe0 	bl	800138c <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b64      	cmp	r3, #100	; 0x64
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e229      	b.n	800282e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023da:	4b61      	ldr	r3, [pc, #388]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCC_OscConfig+0xe8>
 80023e6:	e014      	b.n	8002412 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e8:	f7fe ffd0 	bl	800138c <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f0:	f7fe ffcc 	bl	800138c <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b64      	cmp	r3, #100	; 0x64
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e215      	b.n	800282e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002402:	4b57      	ldr	r3, [pc, #348]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x110>
 800240e:	e000      	b.n	8002412 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d069      	beq.n	80024f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800241e:	4b50      	ldr	r3, [pc, #320]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 030c 	and.w	r3, r3, #12
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00b      	beq.n	8002442 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800242a:	4b4d      	ldr	r3, [pc, #308]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 030c 	and.w	r3, r3, #12
 8002432:	2b08      	cmp	r3, #8
 8002434:	d11c      	bne.n	8002470 <HAL_RCC_OscConfig+0x190>
 8002436:	4b4a      	ldr	r3, [pc, #296]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d116      	bne.n	8002470 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002442:	4b47      	ldr	r3, [pc, #284]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d005      	beq.n	800245a <HAL_RCC_OscConfig+0x17a>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d001      	beq.n	800245a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e1e9      	b.n	800282e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800245a:	4b41      	ldr	r3, [pc, #260]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	493d      	ldr	r1, [pc, #244]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 800246a:	4313      	orrs	r3, r2
 800246c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800246e:	e040      	b.n	80024f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d023      	beq.n	80024c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002478:	4b39      	ldr	r3, [pc, #228]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a38      	ldr	r2, [pc, #224]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002484:	f7fe ff82 	bl	800138c <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800248c:	f7fe ff7e 	bl	800138c <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e1c7      	b.n	800282e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249e:	4b30      	ldr	r3, [pc, #192]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0f0      	beq.n	800248c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024aa:	4b2d      	ldr	r3, [pc, #180]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	4929      	ldr	r1, [pc, #164]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	600b      	str	r3, [r1, #0]
 80024be:	e018      	b.n	80024f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024c0:	4b27      	ldr	r3, [pc, #156]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a26      	ldr	r2, [pc, #152]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 80024c6:	f023 0301 	bic.w	r3, r3, #1
 80024ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024cc:	f7fe ff5e 	bl	800138c <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024d4:	f7fe ff5a 	bl	800138c <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e1a3      	b.n	800282e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e6:	4b1e      	ldr	r3, [pc, #120]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f0      	bne.n	80024d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d038      	beq.n	8002570 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d019      	beq.n	800253a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002506:	4b16      	ldr	r3, [pc, #88]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 8002508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800250a:	4a15      	ldr	r2, [pc, #84]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002512:	f7fe ff3b 	bl	800138c <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800251a:	f7fe ff37 	bl	800138c <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e180      	b.n	800282e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800252c:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 800252e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0f0      	beq.n	800251a <HAL_RCC_OscConfig+0x23a>
 8002538:	e01a      	b.n	8002570 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800253a:	4b09      	ldr	r3, [pc, #36]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 800253c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800253e:	4a08      	ldr	r2, [pc, #32]	; (8002560 <HAL_RCC_OscConfig+0x280>)
 8002540:	f023 0301 	bic.w	r3, r3, #1
 8002544:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002546:	f7fe ff21 	bl	800138c <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800254c:	e00a      	b.n	8002564 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800254e:	f7fe ff1d 	bl	800138c <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d903      	bls.n	8002564 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e166      	b.n	800282e <HAL_RCC_OscConfig+0x54e>
 8002560:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002564:	4b92      	ldr	r3, [pc, #584]	; (80027b0 <HAL_RCC_OscConfig+0x4d0>)
 8002566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1ee      	bne.n	800254e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 80a4 	beq.w	80026c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800257e:	4b8c      	ldr	r3, [pc, #560]	; (80027b0 <HAL_RCC_OscConfig+0x4d0>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10d      	bne.n	80025a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800258a:	4b89      	ldr	r3, [pc, #548]	; (80027b0 <HAL_RCC_OscConfig+0x4d0>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	4a88      	ldr	r2, [pc, #544]	; (80027b0 <HAL_RCC_OscConfig+0x4d0>)
 8002590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002594:	6413      	str	r3, [r2, #64]	; 0x40
 8002596:	4b86      	ldr	r3, [pc, #536]	; (80027b0 <HAL_RCC_OscConfig+0x4d0>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	60bb      	str	r3, [r7, #8]
 80025a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025a2:	2301      	movs	r3, #1
 80025a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025a6:	4b83      	ldr	r3, [pc, #524]	; (80027b4 <HAL_RCC_OscConfig+0x4d4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d118      	bne.n	80025e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80025b2:	4b80      	ldr	r3, [pc, #512]	; (80027b4 <HAL_RCC_OscConfig+0x4d4>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a7f      	ldr	r2, [pc, #508]	; (80027b4 <HAL_RCC_OscConfig+0x4d4>)
 80025b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025be:	f7fe fee5 	bl	800138c <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c6:	f7fe fee1 	bl	800138c <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b64      	cmp	r3, #100	; 0x64
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e12a      	b.n	800282e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025d8:	4b76      	ldr	r3, [pc, #472]	; (80027b4 <HAL_RCC_OscConfig+0x4d4>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f0      	beq.n	80025c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d106      	bne.n	80025fa <HAL_RCC_OscConfig+0x31a>
 80025ec:	4b70      	ldr	r3, [pc, #448]	; (80027b0 <HAL_RCC_OscConfig+0x4d0>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f0:	4a6f      	ldr	r2, [pc, #444]	; (80027b0 <HAL_RCC_OscConfig+0x4d0>)
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	6713      	str	r3, [r2, #112]	; 0x70
 80025f8:	e02d      	b.n	8002656 <HAL_RCC_OscConfig+0x376>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10c      	bne.n	800261c <HAL_RCC_OscConfig+0x33c>
 8002602:	4b6b      	ldr	r3, [pc, #428]	; (80027b0 <HAL_RCC_OscConfig+0x4d0>)
 8002604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002606:	4a6a      	ldr	r2, [pc, #424]	; (80027b0 <HAL_RCC_OscConfig+0x4d0>)
 8002608:	f023 0301 	bic.w	r3, r3, #1
 800260c:	6713      	str	r3, [r2, #112]	; 0x70
 800260e:	4b68      	ldr	r3, [pc, #416]	; (80027b0 <HAL_RCC_OscConfig+0x4d0>)
 8002610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002612:	4a67      	ldr	r2, [pc, #412]	; (80027b0 <HAL_RCC_OscConfig+0x4d0>)
 8002614:	f023 0304 	bic.w	r3, r3, #4
 8002618:	6713      	str	r3, [r2, #112]	; 0x70
 800261a:	e01c      	b.n	8002656 <HAL_RCC_OscConfig+0x376>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	2b05      	cmp	r3, #5
 8002622:	d10c      	bne.n	800263e <HAL_RCC_OscConfig+0x35e>
 8002624:	4b62      	ldr	r3, [pc, #392]	; (80027b0 <HAL_RCC_OscConfig+0x4d0>)
 8002626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002628:	4a61      	ldr	r2, [pc, #388]	; (80027b0 <HAL_RCC_OscConfig+0x4d0>)
 800262a:	f043 0304 	orr.w	r3, r3, #4
 800262e:	6713      	str	r3, [r2, #112]	; 0x70
 8002630:	4b5f      	ldr	r3, [pc, #380]	; (80027b0 <HAL_RCC_OscConfig+0x4d0>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	4a5e      	ldr	r2, [pc, #376]	; (80027b0 <HAL_RCC_OscConfig+0x4d0>)
 8002636:	f043 0301 	orr.w	r3, r3, #1
 800263a:	6713      	str	r3, [r2, #112]	; 0x70
 800263c:	e00b      	b.n	8002656 <HAL_RCC_OscConfig+0x376>
 800263e:	4b5c      	ldr	r3, [pc, #368]	; (80027b0 <HAL_RCC_OscConfig+0x4d0>)
 8002640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002642:	4a5b      	ldr	r2, [pc, #364]	; (80027b0 <HAL_RCC_OscConfig+0x4d0>)
 8002644:	f023 0301 	bic.w	r3, r3, #1
 8002648:	6713      	str	r3, [r2, #112]	; 0x70
 800264a:	4b59      	ldr	r3, [pc, #356]	; (80027b0 <HAL_RCC_OscConfig+0x4d0>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	4a58      	ldr	r2, [pc, #352]	; (80027b0 <HAL_RCC_OscConfig+0x4d0>)
 8002650:	f023 0304 	bic.w	r3, r3, #4
 8002654:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d015      	beq.n	800268a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265e:	f7fe fe95 	bl	800138c <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002664:	e00a      	b.n	800267c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002666:	f7fe fe91 	bl	800138c <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	f241 3288 	movw	r2, #5000	; 0x1388
 8002674:	4293      	cmp	r3, r2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e0d8      	b.n	800282e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800267c:	4b4c      	ldr	r3, [pc, #304]	; (80027b0 <HAL_RCC_OscConfig+0x4d0>)
 800267e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0ee      	beq.n	8002666 <HAL_RCC_OscConfig+0x386>
 8002688:	e014      	b.n	80026b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268a:	f7fe fe7f 	bl	800138c <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002690:	e00a      	b.n	80026a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002692:	f7fe fe7b 	bl	800138c <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e0c2      	b.n	800282e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a8:	4b41      	ldr	r3, [pc, #260]	; (80027b0 <HAL_RCC_OscConfig+0x4d0>)
 80026aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1ee      	bne.n	8002692 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026b4:	7dfb      	ldrb	r3, [r7, #23]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d105      	bne.n	80026c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ba:	4b3d      	ldr	r3, [pc, #244]	; (80027b0 <HAL_RCC_OscConfig+0x4d0>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	4a3c      	ldr	r2, [pc, #240]	; (80027b0 <HAL_RCC_OscConfig+0x4d0>)
 80026c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 80ae 	beq.w	800282c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026d0:	4b37      	ldr	r3, [pc, #220]	; (80027b0 <HAL_RCC_OscConfig+0x4d0>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 030c 	and.w	r3, r3, #12
 80026d8:	2b08      	cmp	r3, #8
 80026da:	d06d      	beq.n	80027b8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d14b      	bne.n	800277c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e4:	4b32      	ldr	r3, [pc, #200]	; (80027b0 <HAL_RCC_OscConfig+0x4d0>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a31      	ldr	r2, [pc, #196]	; (80027b0 <HAL_RCC_OscConfig+0x4d0>)
 80026ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f0:	f7fe fe4c 	bl	800138c <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f8:	f7fe fe48 	bl	800138c <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e091      	b.n	800282e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270a:	4b29      	ldr	r3, [pc, #164]	; (80027b0 <HAL_RCC_OscConfig+0x4d0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f0      	bne.n	80026f8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69da      	ldr	r2, [r3, #28]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	019b      	lsls	r3, r3, #6
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272c:	085b      	lsrs	r3, r3, #1
 800272e:	3b01      	subs	r3, #1
 8002730:	041b      	lsls	r3, r3, #16
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002738:	061b      	lsls	r3, r3, #24
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002740:	071b      	lsls	r3, r3, #28
 8002742:	491b      	ldr	r1, [pc, #108]	; (80027b0 <HAL_RCC_OscConfig+0x4d0>)
 8002744:	4313      	orrs	r3, r2
 8002746:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002748:	4b19      	ldr	r3, [pc, #100]	; (80027b0 <HAL_RCC_OscConfig+0x4d0>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a18      	ldr	r2, [pc, #96]	; (80027b0 <HAL_RCC_OscConfig+0x4d0>)
 800274e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002752:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7fe fe1a 	bl	800138c <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275c:	f7fe fe16 	bl	800138c <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e05f      	b.n	800282e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800276e:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <HAL_RCC_OscConfig+0x4d0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0f0      	beq.n	800275c <HAL_RCC_OscConfig+0x47c>
 800277a:	e057      	b.n	800282c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800277c:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <HAL_RCC_OscConfig+0x4d0>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a0b      	ldr	r2, [pc, #44]	; (80027b0 <HAL_RCC_OscConfig+0x4d0>)
 8002782:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002786:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002788:	f7fe fe00 	bl	800138c <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002790:	f7fe fdfc 	bl	800138c <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e045      	b.n	800282e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a2:	4b03      	ldr	r3, [pc, #12]	; (80027b0 <HAL_RCC_OscConfig+0x4d0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0x4b0>
 80027ae:	e03d      	b.n	800282c <HAL_RCC_OscConfig+0x54c>
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80027b8:	4b1f      	ldr	r3, [pc, #124]	; (8002838 <HAL_RCC_OscConfig+0x558>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d030      	beq.n	8002828 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d129      	bne.n	8002828 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027de:	429a      	cmp	r2, r3
 80027e0:	d122      	bne.n	8002828 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027e8:	4013      	ands	r3, r2
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027ee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d119      	bne.n	8002828 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fe:	085b      	lsrs	r3, r3, #1
 8002800:	3b01      	subs	r3, #1
 8002802:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002804:	429a      	cmp	r2, r3
 8002806:	d10f      	bne.n	8002828 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002812:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002814:	429a      	cmp	r2, r3
 8002816:	d107      	bne.n	8002828 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002824:	429a      	cmp	r2, r3
 8002826:	d001      	beq.n	800282c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e000      	b.n	800282e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40023800 	.word	0x40023800

0800283c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002846:	2300      	movs	r3, #0
 8002848:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e0d0      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002854:	4b6a      	ldr	r3, [pc, #424]	; (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 030f 	and.w	r3, r3, #15
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	d910      	bls.n	8002884 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002862:	4b67      	ldr	r3, [pc, #412]	; (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f023 020f 	bic.w	r2, r3, #15
 800286a:	4965      	ldr	r1, [pc, #404]	; (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	4313      	orrs	r3, r2
 8002870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002872:	4b63      	ldr	r3, [pc, #396]	; (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	429a      	cmp	r2, r3
 800287e:	d001      	beq.n	8002884 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e0b8      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d020      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800289c:	4b59      	ldr	r3, [pc, #356]	; (8002a04 <HAL_RCC_ClockConfig+0x1c8>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	4a58      	ldr	r2, [pc, #352]	; (8002a04 <HAL_RCC_ClockConfig+0x1c8>)
 80028a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028b4:	4b53      	ldr	r3, [pc, #332]	; (8002a04 <HAL_RCC_ClockConfig+0x1c8>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	4a52      	ldr	r2, [pc, #328]	; (8002a04 <HAL_RCC_ClockConfig+0x1c8>)
 80028ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c0:	4b50      	ldr	r3, [pc, #320]	; (8002a04 <HAL_RCC_ClockConfig+0x1c8>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	494d      	ldr	r1, [pc, #308]	; (8002a04 <HAL_RCC_ClockConfig+0x1c8>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d040      	beq.n	8002960 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d107      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e6:	4b47      	ldr	r3, [pc, #284]	; (8002a04 <HAL_RCC_ClockConfig+0x1c8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d115      	bne.n	800291e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e07f      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d107      	bne.n	800290e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028fe:	4b41      	ldr	r3, [pc, #260]	; (8002a04 <HAL_RCC_ClockConfig+0x1c8>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d109      	bne.n	800291e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e073      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800290e:	4b3d      	ldr	r3, [pc, #244]	; (8002a04 <HAL_RCC_ClockConfig+0x1c8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e06b      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800291e:	4b39      	ldr	r3, [pc, #228]	; (8002a04 <HAL_RCC_ClockConfig+0x1c8>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f023 0203 	bic.w	r2, r3, #3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	4936      	ldr	r1, [pc, #216]	; (8002a04 <HAL_RCC_ClockConfig+0x1c8>)
 800292c:	4313      	orrs	r3, r2
 800292e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002930:	f7fe fd2c 	bl	800138c <HAL_GetTick>
 8002934:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002936:	e00a      	b.n	800294e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002938:	f7fe fd28 	bl	800138c <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	f241 3288 	movw	r2, #5000	; 0x1388
 8002946:	4293      	cmp	r3, r2
 8002948:	d901      	bls.n	800294e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e053      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294e:	4b2d      	ldr	r3, [pc, #180]	; (8002a04 <HAL_RCC_ClockConfig+0x1c8>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 020c 	and.w	r2, r3, #12
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	429a      	cmp	r2, r3
 800295e:	d1eb      	bne.n	8002938 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002960:	4b27      	ldr	r3, [pc, #156]	; (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 030f 	and.w	r3, r3, #15
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	429a      	cmp	r2, r3
 800296c:	d210      	bcs.n	8002990 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800296e:	4b24      	ldr	r3, [pc, #144]	; (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f023 020f 	bic.w	r2, r3, #15
 8002976:	4922      	ldr	r1, [pc, #136]	; (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	4313      	orrs	r3, r2
 800297c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800297e:	4b20      	ldr	r3, [pc, #128]	; (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d001      	beq.n	8002990 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e032      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	d008      	beq.n	80029ae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800299c:	4b19      	ldr	r3, [pc, #100]	; (8002a04 <HAL_RCC_ClockConfig+0x1c8>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	4916      	ldr	r1, [pc, #88]	; (8002a04 <HAL_RCC_ClockConfig+0x1c8>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d009      	beq.n	80029ce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029ba:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <HAL_RCC_ClockConfig+0x1c8>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	490e      	ldr	r1, [pc, #56]	; (8002a04 <HAL_RCC_ClockConfig+0x1c8>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029ce:	f000 f821 	bl	8002a14 <HAL_RCC_GetSysClockFreq>
 80029d2:	4602      	mov	r2, r0
 80029d4:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <HAL_RCC_ClockConfig+0x1c8>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	091b      	lsrs	r3, r3, #4
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	490a      	ldr	r1, [pc, #40]	; (8002a08 <HAL_RCC_ClockConfig+0x1cc>)
 80029e0:	5ccb      	ldrb	r3, [r1, r3]
 80029e2:	fa22 f303 	lsr.w	r3, r2, r3
 80029e6:	4a09      	ldr	r2, [pc, #36]	; (8002a0c <HAL_RCC_ClockConfig+0x1d0>)
 80029e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029ea:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <HAL_RCC_ClockConfig+0x1d4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fe fc88 	bl	8001304 <HAL_InitTick>

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40023c00 	.word	0x40023c00
 8002a04:	40023800 	.word	0x40023800
 8002a08:	08007c5c 	.word	0x08007c5c
 8002a0c:	20000000 	.word	0x20000000
 8002a10:	20000004 	.word	0x20000004

08002a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a18:	b094      	sub	sp, #80	; 0x50
 8002a1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	647b      	str	r3, [r7, #68]	; 0x44
 8002a20:	2300      	movs	r3, #0
 8002a22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a24:	2300      	movs	r3, #0
 8002a26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a2c:	4b79      	ldr	r3, [pc, #484]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 030c 	and.w	r3, r3, #12
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d00d      	beq.n	8002a54 <HAL_RCC_GetSysClockFreq+0x40>
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	f200 80e1 	bhi.w	8002c00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d002      	beq.n	8002a48 <HAL_RCC_GetSysClockFreq+0x34>
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d003      	beq.n	8002a4e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a46:	e0db      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a48:	4b73      	ldr	r3, [pc, #460]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a4a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a4c:	e0db      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a4e:	4b73      	ldr	r3, [pc, #460]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x208>)
 8002a50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a52:	e0d8      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a54:	4b6f      	ldr	r3, [pc, #444]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a5c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002a5e:	4b6d      	ldr	r3, [pc, #436]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d063      	beq.n	8002b32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a6a:	4b6a      	ldr	r3, [pc, #424]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	099b      	lsrs	r3, r3, #6
 8002a70:	2200      	movs	r2, #0
 8002a72:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a7c:	633b      	str	r3, [r7, #48]	; 0x30
 8002a7e:	2300      	movs	r3, #0
 8002a80:	637b      	str	r3, [r7, #52]	; 0x34
 8002a82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a86:	4622      	mov	r2, r4
 8002a88:	462b      	mov	r3, r5
 8002a8a:	f04f 0000 	mov.w	r0, #0
 8002a8e:	f04f 0100 	mov.w	r1, #0
 8002a92:	0159      	lsls	r1, r3, #5
 8002a94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a98:	0150      	lsls	r0, r2, #5
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	4621      	mov	r1, r4
 8002aa0:	1a51      	subs	r1, r2, r1
 8002aa2:	6139      	str	r1, [r7, #16]
 8002aa4:	4629      	mov	r1, r5
 8002aa6:	eb63 0301 	sbc.w	r3, r3, r1
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ab8:	4659      	mov	r1, fp
 8002aba:	018b      	lsls	r3, r1, #6
 8002abc:	4651      	mov	r1, sl
 8002abe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ac2:	4651      	mov	r1, sl
 8002ac4:	018a      	lsls	r2, r1, #6
 8002ac6:	4651      	mov	r1, sl
 8002ac8:	ebb2 0801 	subs.w	r8, r2, r1
 8002acc:	4659      	mov	r1, fp
 8002ace:	eb63 0901 	sbc.w	r9, r3, r1
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	f04f 0300 	mov.w	r3, #0
 8002ada:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ade:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ae2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ae6:	4690      	mov	r8, r2
 8002ae8:	4699      	mov	r9, r3
 8002aea:	4623      	mov	r3, r4
 8002aec:	eb18 0303 	adds.w	r3, r8, r3
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	462b      	mov	r3, r5
 8002af4:	eb49 0303 	adc.w	r3, r9, r3
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	f04f 0200 	mov.w	r2, #0
 8002afe:	f04f 0300 	mov.w	r3, #0
 8002b02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b06:	4629      	mov	r1, r5
 8002b08:	024b      	lsls	r3, r1, #9
 8002b0a:	4621      	mov	r1, r4
 8002b0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b10:	4621      	mov	r1, r4
 8002b12:	024a      	lsls	r2, r1, #9
 8002b14:	4610      	mov	r0, r2
 8002b16:	4619      	mov	r1, r3
 8002b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b24:	f7fd fbe4 	bl	80002f0 <__aeabi_uldivmod>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b30:	e058      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b32:	4b38      	ldr	r3, [pc, #224]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	099b      	lsrs	r3, r3, #6
 8002b38:	2200      	movs	r2, #0
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	4611      	mov	r1, r2
 8002b3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b42:	623b      	str	r3, [r7, #32]
 8002b44:	2300      	movs	r3, #0
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24
 8002b48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b4c:	4642      	mov	r2, r8
 8002b4e:	464b      	mov	r3, r9
 8002b50:	f04f 0000 	mov.w	r0, #0
 8002b54:	f04f 0100 	mov.w	r1, #0
 8002b58:	0159      	lsls	r1, r3, #5
 8002b5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b5e:	0150      	lsls	r0, r2, #5
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4641      	mov	r1, r8
 8002b66:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b6a:	4649      	mov	r1, r9
 8002b6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b84:	ebb2 040a 	subs.w	r4, r2, sl
 8002b88:	eb63 050b 	sbc.w	r5, r3, fp
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	00eb      	lsls	r3, r5, #3
 8002b96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b9a:	00e2      	lsls	r2, r4, #3
 8002b9c:	4614      	mov	r4, r2
 8002b9e:	461d      	mov	r5, r3
 8002ba0:	4643      	mov	r3, r8
 8002ba2:	18e3      	adds	r3, r4, r3
 8002ba4:	603b      	str	r3, [r7, #0]
 8002ba6:	464b      	mov	r3, r9
 8002ba8:	eb45 0303 	adc.w	r3, r5, r3
 8002bac:	607b      	str	r3, [r7, #4]
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bba:	4629      	mov	r1, r5
 8002bbc:	028b      	lsls	r3, r1, #10
 8002bbe:	4621      	mov	r1, r4
 8002bc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bc4:	4621      	mov	r1, r4
 8002bc6:	028a      	lsls	r2, r1, #10
 8002bc8:	4610      	mov	r0, r2
 8002bca:	4619      	mov	r1, r3
 8002bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bce:	2200      	movs	r2, #0
 8002bd0:	61bb      	str	r3, [r7, #24]
 8002bd2:	61fa      	str	r2, [r7, #28]
 8002bd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bd8:	f7fd fb8a 	bl	80002f0 <__aeabi_uldivmod>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	460b      	mov	r3, r1
 8002be0:	4613      	mov	r3, r2
 8002be2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	0c1b      	lsrs	r3, r3, #16
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	3301      	adds	r3, #1
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002bf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bfe:	e002      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3750      	adds	r7, #80	; 0x50
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c12:	bf00      	nop
 8002c14:	40023800 	.word	0x40023800
 8002c18:	00f42400 	.word	0x00f42400
 8002c1c:	007a1200 	.word	0x007a1200

08002c20 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c24:	4b03      	ldr	r3, [pc, #12]	; (8002c34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c26:	681b      	ldr	r3, [r3, #0]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	20000000 	.word	0x20000000

08002c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c3c:	f7ff fff0 	bl	8002c20 <HAL_RCC_GetHCLKFreq>
 8002c40:	4602      	mov	r2, r0
 8002c42:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	0a9b      	lsrs	r3, r3, #10
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	4903      	ldr	r1, [pc, #12]	; (8002c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c4e:	5ccb      	ldrb	r3, [r1, r3]
 8002c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	08007c6c 	.word	0x08007c6c

08002c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c64:	f7ff ffdc 	bl	8002c20 <HAL_RCC_GetHCLKFreq>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	0b5b      	lsrs	r3, r3, #13
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	4903      	ldr	r1, [pc, #12]	; (8002c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c76:	5ccb      	ldrb	r3, [r1, r3]
 8002c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40023800 	.word	0x40023800
 8002c84:	08007c6c 	.word	0x08007c6c

08002c88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b088      	sub	sp, #32
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002c90:	2300      	movs	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002c94:	2300      	movs	r3, #0
 8002c96:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d012      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002cb0:	4b69      	ldr	r3, [pc, #420]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	4a68      	ldr	r2, [pc, #416]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cb6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002cba:	6093      	str	r3, [r2, #8]
 8002cbc:	4b66      	ldr	r3, [pc, #408]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc4:	4964      	ldr	r1, [pc, #400]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d017      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ce2:	4b5d      	ldr	r3, [pc, #372]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ce8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf0:	4959      	ldr	r1, [pc, #356]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d00:	d101      	bne.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002d02:	2301      	movs	r3, #1
 8002d04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d017      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d1e:	4b4e      	ldr	r3, [pc, #312]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	494a      	ldr	r1, [pc, #296]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d3c:	d101      	bne.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0320 	and.w	r3, r3, #32
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 808b 	beq.w	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d6c:	4b3a      	ldr	r3, [pc, #232]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d70:	4a39      	ldr	r2, [pc, #228]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d76:	6413      	str	r3, [r2, #64]	; 0x40
 8002d78:	4b37      	ldr	r3, [pc, #220]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d80:	60bb      	str	r3, [r7, #8]
 8002d82:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d84:	4b35      	ldr	r3, [pc, #212]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a34      	ldr	r2, [pc, #208]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d90:	f7fe fafc 	bl	800138c <HAL_GetTick>
 8002d94:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d98:	f7fe faf8 	bl	800138c <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b64      	cmp	r3, #100	; 0x64
 8002da4:	d901      	bls.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e38f      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002daa:	4b2c      	ldr	r3, [pc, #176]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0f0      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002db6:	4b28      	ldr	r3, [pc, #160]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dbe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d035      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d02e      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dd4:	4b20      	ldr	r3, [pc, #128]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ddc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dde:	4b1e      	ldr	r3, [pc, #120]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de2:	4a1d      	ldr	r2, [pc, #116]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dea:	4b1b      	ldr	r3, [pc, #108]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dee:	4a1a      	ldr	r2, [pc, #104]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002df0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002df4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002df6:	4a18      	ldr	r2, [pc, #96]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002dfc:	4b16      	ldr	r3, [pc, #88]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d114      	bne.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e08:	f7fe fac0 	bl	800138c <HAL_GetTick>
 8002e0c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e0e:	e00a      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e10:	f7fe fabc 	bl	800138c <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e351      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e26:	4b0c      	ldr	r3, [pc, #48]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0ee      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e3e:	d111      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002e40:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e4c:	4b04      	ldr	r3, [pc, #16]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e4e:	400b      	ands	r3, r1
 8002e50:	4901      	ldr	r1, [pc, #4]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	608b      	str	r3, [r1, #8]
 8002e56:	e00b      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	40007000 	.word	0x40007000
 8002e60:	0ffffcff 	.word	0x0ffffcff
 8002e64:	4bac      	ldr	r3, [pc, #688]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	4aab      	ldr	r2, [pc, #684]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e6a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e6e:	6093      	str	r3, [r2, #8]
 8002e70:	4ba9      	ldr	r3, [pc, #676]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e7c:	49a6      	ldr	r1, [pc, #664]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0310 	and.w	r3, r3, #16
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d010      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e8e:	4ba2      	ldr	r3, [pc, #648]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e94:	4aa0      	ldr	r2, [pc, #640]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002e9e:	4b9e      	ldr	r3, [pc, #632]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ea0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea8:	499b      	ldr	r1, [pc, #620]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00a      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ebc:	4b96      	ldr	r3, [pc, #600]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eca:	4993      	ldr	r1, [pc, #588]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ede:	4b8e      	ldr	r3, [pc, #568]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002eec:	498a      	ldr	r1, [pc, #552]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00a      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f00:	4b85      	ldr	r3, [pc, #532]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f0e:	4982      	ldr	r1, [pc, #520]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f22:	4b7d      	ldr	r3, [pc, #500]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f28:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f30:	4979      	ldr	r1, [pc, #484]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00a      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f44:	4b74      	ldr	r3, [pc, #464]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4a:	f023 0203 	bic.w	r2, r3, #3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f52:	4971      	ldr	r1, [pc, #452]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f66:	4b6c      	ldr	r3, [pc, #432]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6c:	f023 020c 	bic.w	r2, r3, #12
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f74:	4968      	ldr	r1, [pc, #416]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00a      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f88:	4b63      	ldr	r3, [pc, #396]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f96:	4960      	ldr	r1, [pc, #384]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002faa:	4b5b      	ldr	r3, [pc, #364]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb8:	4957      	ldr	r1, [pc, #348]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00a      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fcc:	4b52      	ldr	r3, [pc, #328]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fda:	494f      	ldr	r1, [pc, #316]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002fee:	4b4a      	ldr	r3, [pc, #296]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffc:	4946      	ldr	r1, [pc, #280]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00a      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003010:	4b41      	ldr	r3, [pc, #260]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003016:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301e:	493e      	ldr	r1, [pc, #248]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003032:	4b39      	ldr	r3, [pc, #228]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003038:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003040:	4935      	ldr	r1, [pc, #212]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00a      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003054:	4b30      	ldr	r3, [pc, #192]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003062:	492d      	ldr	r1, [pc, #180]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003064:	4313      	orrs	r3, r2
 8003066:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d011      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003076:	4b28      	ldr	r3, [pc, #160]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003084:	4924      	ldr	r1, [pc, #144]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003090:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003094:	d101      	bne.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003096:	2301      	movs	r3, #1
 8003098:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80030a6:	2301      	movs	r3, #1
 80030a8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030b6:	4b18      	ldr	r3, [pc, #96]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030bc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c4:	4914      	ldr	r1, [pc, #80]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00b      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80030d8:	4b0f      	ldr	r3, [pc, #60]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030de:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030e8:	490b      	ldr	r1, [pc, #44]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00f      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80030fc:	4b06      	ldr	r3, [pc, #24]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003102:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800310c:	4902      	ldr	r1, [pc, #8]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800310e:	4313      	orrs	r3, r2
 8003110:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003114:	e002      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003116:	bf00      	nop
 8003118:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00b      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003128:	4b8a      	ldr	r3, [pc, #552]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800312a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800312e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003138:	4986      	ldr	r1, [pc, #536]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800313a:	4313      	orrs	r3, r2
 800313c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00b      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800314c:	4b81      	ldr	r3, [pc, #516]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800314e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003152:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800315c:	497d      	ldr	r1, [pc, #500]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800315e:	4313      	orrs	r3, r2
 8003160:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d006      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	f000 80d6 	beq.w	8003324 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003178:	4b76      	ldr	r3, [pc, #472]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a75      	ldr	r2, [pc, #468]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800317e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003182:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003184:	f7fe f902 	bl	800138c <HAL_GetTick>
 8003188:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800318a:	e008      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800318c:	f7fe f8fe 	bl	800138c <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b64      	cmp	r3, #100	; 0x64
 8003198:	d901      	bls.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e195      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800319e:	4b6d      	ldr	r3, [pc, #436]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f0      	bne.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d021      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x572>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d11d      	bne.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80031be:	4b65      	ldr	r3, [pc, #404]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031c4:	0c1b      	lsrs	r3, r3, #16
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80031cc:	4b61      	ldr	r3, [pc, #388]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031d2:	0e1b      	lsrs	r3, r3, #24
 80031d4:	f003 030f 	and.w	r3, r3, #15
 80031d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	019a      	lsls	r2, r3, #6
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	041b      	lsls	r3, r3, #16
 80031e4:	431a      	orrs	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	061b      	lsls	r3, r3, #24
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	071b      	lsls	r3, r3, #28
 80031f2:	4958      	ldr	r1, [pc, #352]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d004      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800320e:	d00a      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003218:	2b00      	cmp	r3, #0
 800321a:	d02e      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003224:	d129      	bne.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003226:	4b4b      	ldr	r3, [pc, #300]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800322c:	0c1b      	lsrs	r3, r3, #16
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003234:	4b47      	ldr	r3, [pc, #284]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800323a:	0f1b      	lsrs	r3, r3, #28
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	019a      	lsls	r2, r3, #6
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	041b      	lsls	r3, r3, #16
 800324c:	431a      	orrs	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	061b      	lsls	r3, r3, #24
 8003254:	431a      	orrs	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	071b      	lsls	r3, r3, #28
 800325a:	493e      	ldr	r1, [pc, #248]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800325c:	4313      	orrs	r3, r2
 800325e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003262:	4b3c      	ldr	r3, [pc, #240]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003264:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003268:	f023 021f 	bic.w	r2, r3, #31
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	3b01      	subs	r3, #1
 8003272:	4938      	ldr	r1, [pc, #224]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003274:	4313      	orrs	r3, r2
 8003276:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d01d      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003286:	4b33      	ldr	r3, [pc, #204]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003288:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800328c:	0e1b      	lsrs	r3, r3, #24
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003294:	4b2f      	ldr	r3, [pc, #188]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800329a:	0f1b      	lsrs	r3, r3, #28
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	019a      	lsls	r2, r3, #6
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	041b      	lsls	r3, r3, #16
 80032ae:	431a      	orrs	r2, r3
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	061b      	lsls	r3, r3, #24
 80032b4:	431a      	orrs	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	071b      	lsls	r3, r3, #28
 80032ba:	4926      	ldr	r1, [pc, #152]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d011      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	019a      	lsls	r2, r3, #6
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	041b      	lsls	r3, r3, #16
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	061b      	lsls	r3, r3, #24
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	071b      	lsls	r3, r3, #28
 80032ea:	491a      	ldr	r1, [pc, #104]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80032f2:	4b18      	ldr	r3, [pc, #96]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a17      	ldr	r2, [pc, #92]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032fe:	f7fe f845 	bl	800138c <HAL_GetTick>
 8003302:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003304:	e008      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003306:	f7fe f841 	bl	800138c <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b64      	cmp	r3, #100	; 0x64
 8003312:	d901      	bls.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e0d8      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003318:	4b0e      	ldr	r3, [pc, #56]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0f0      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	2b01      	cmp	r3, #1
 8003328:	f040 80ce 	bne.w	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800332c:	4b09      	ldr	r3, [pc, #36]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a08      	ldr	r2, [pc, #32]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003332:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003336:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003338:	f7fe f828 	bl	800138c <HAL_GetTick>
 800333c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800333e:	e00b      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003340:	f7fe f824 	bl	800138c <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b64      	cmp	r3, #100	; 0x64
 800334c:	d904      	bls.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e0bb      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003352:	bf00      	nop
 8003354:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003358:	4b5e      	ldr	r3, [pc, #376]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003360:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003364:	d0ec      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003376:	2b00      	cmp	r3, #0
 8003378:	d009      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003382:	2b00      	cmp	r3, #0
 8003384:	d02e      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	2b00      	cmp	r3, #0
 800338c:	d12a      	bne.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800338e:	4b51      	ldr	r3, [pc, #324]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003394:	0c1b      	lsrs	r3, r3, #16
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800339c:	4b4d      	ldr	r3, [pc, #308]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800339e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a2:	0f1b      	lsrs	r3, r3, #28
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	019a      	lsls	r2, r3, #6
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	041b      	lsls	r3, r3, #16
 80033b4:	431a      	orrs	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	061b      	lsls	r3, r3, #24
 80033bc:	431a      	orrs	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	071b      	lsls	r3, r3, #28
 80033c2:	4944      	ldr	r1, [pc, #272]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80033ca:	4b42      	ldr	r3, [pc, #264]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d8:	3b01      	subs	r3, #1
 80033da:	021b      	lsls	r3, r3, #8
 80033dc:	493d      	ldr	r1, [pc, #244]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d022      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033f8:	d11d      	bne.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033fa:	4b36      	ldr	r3, [pc, #216]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003400:	0e1b      	lsrs	r3, r3, #24
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003408:	4b32      	ldr	r3, [pc, #200]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800340a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340e:	0f1b      	lsrs	r3, r3, #28
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	019a      	lsls	r2, r3, #6
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	041b      	lsls	r3, r3, #16
 8003422:	431a      	orrs	r2, r3
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	061b      	lsls	r3, r3, #24
 8003428:	431a      	orrs	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	071b      	lsls	r3, r3, #28
 800342e:	4929      	ldr	r1, [pc, #164]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d028      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003442:	4b24      	ldr	r3, [pc, #144]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003448:	0e1b      	lsrs	r3, r3, #24
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003450:	4b20      	ldr	r3, [pc, #128]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003456:	0c1b      	lsrs	r3, r3, #16
 8003458:	f003 0303 	and.w	r3, r3, #3
 800345c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	019a      	lsls	r2, r3, #6
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	041b      	lsls	r3, r3, #16
 8003468:	431a      	orrs	r2, r3
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	061b      	lsls	r3, r3, #24
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	071b      	lsls	r3, r3, #28
 8003476:	4917      	ldr	r1, [pc, #92]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003478:	4313      	orrs	r3, r2
 800347a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800347e:	4b15      	ldr	r3, [pc, #84]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003484:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348c:	4911      	ldr	r1, [pc, #68]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800348e:	4313      	orrs	r3, r2
 8003490:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003494:	4b0f      	ldr	r3, [pc, #60]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a0e      	ldr	r2, [pc, #56]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800349a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800349e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034a0:	f7fd ff74 	bl	800138c <HAL_GetTick>
 80034a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80034a8:	f7fd ff70 	bl	800138c <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b64      	cmp	r3, #100	; 0x64
 80034b4:	d901      	bls.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e007      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80034ba:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034c6:	d1ef      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3720      	adds	r7, #32
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40023800 	.word	0x40023800

080034d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e09d      	b.n	8003626 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d108      	bne.n	8003504 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034fa:	d009      	beq.n	8003510 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	61da      	str	r2, [r3, #28]
 8003502:	e005      	b.n	8003510 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d106      	bne.n	8003530 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7fd fbc2 	bl	8000cb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003546:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003550:	d902      	bls.n	8003558 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003552:	2300      	movs	r3, #0
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	e002      	b.n	800355e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800355c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003566:	d007      	beq.n	8003578 <HAL_SPI_Init+0xa0>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003570:	d002      	beq.n	8003578 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003588:	431a      	orrs	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	431a      	orrs	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	431a      	orrs	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035b0:	431a      	orrs	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ba:	ea42 0103 	orr.w	r1, r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	0c1b      	lsrs	r3, r3, #16
 80035d4:	f003 0204 	and.w	r2, r3, #4
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	f003 0310 	and.w	r3, r3, #16
 80035e0:	431a      	orrs	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80035f4:	ea42 0103 	orr.w	r1, r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	69da      	ldr	r2, [r3, #28]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003614:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b088      	sub	sp, #32
 8003632:	af02      	add	r7, sp, #8
 8003634:	60f8      	str	r0, [r7, #12]
 8003636:	60b9      	str	r1, [r7, #8]
 8003638:	603b      	str	r3, [r7, #0]
 800363a:	4613      	mov	r3, r2
 800363c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800364a:	d112      	bne.n	8003672 <HAL_SPI_Receive+0x44>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10e      	bne.n	8003672 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2204      	movs	r2, #4
 8003658:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800365c:	88fa      	ldrh	r2, [r7, #6]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	4613      	mov	r3, r2
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	68b9      	ldr	r1, [r7, #8]
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 f910 	bl	800388e <HAL_SPI_TransmitReceive>
 800366e:	4603      	mov	r3, r0
 8003670:	e109      	b.n	8003886 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003678:	2b01      	cmp	r3, #1
 800367a:	d101      	bne.n	8003680 <HAL_SPI_Receive+0x52>
 800367c:	2302      	movs	r3, #2
 800367e:	e102      	b.n	8003886 <HAL_SPI_Receive+0x258>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003688:	f7fd fe80 	bl	800138c <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b01      	cmp	r3, #1
 8003698:	d002      	beq.n	80036a0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800369a:	2302      	movs	r3, #2
 800369c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800369e:	e0e9      	b.n	8003874 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d002      	beq.n	80036ac <HAL_SPI_Receive+0x7e>
 80036a6:	88fb      	ldrh	r3, [r7, #6]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d102      	bne.n	80036b2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036b0:	e0e0      	b.n	8003874 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2204      	movs	r2, #4
 80036b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	88fa      	ldrh	r2, [r7, #6]
 80036ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	88fa      	ldrh	r2, [r7, #6]
 80036d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036fc:	d908      	bls.n	8003710 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800370c:	605a      	str	r2, [r3, #4]
 800370e:	e007      	b.n	8003720 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800371e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003728:	d10f      	bne.n	800374a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003738:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003748:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003754:	2b40      	cmp	r3, #64	; 0x40
 8003756:	d007      	beq.n	8003768 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003766:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003770:	d867      	bhi.n	8003842 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003772:	e030      	b.n	80037d6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b01      	cmp	r3, #1
 8003780:	d117      	bne.n	80037b2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f103 020c 	add.w	r2, r3, #12
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	7812      	ldrb	r2, [r2, #0]
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80037b0:	e011      	b.n	80037d6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037b2:	f7fd fdeb 	bl	800138c <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d803      	bhi.n	80037ca <HAL_SPI_Receive+0x19c>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c8:	d102      	bne.n	80037d0 <HAL_SPI_Receive+0x1a2>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d102      	bne.n	80037d6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80037d4:	e04e      	b.n	8003874 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037dc:	b29b      	uxth	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1c8      	bne.n	8003774 <HAL_SPI_Receive+0x146>
 80037e2:	e034      	b.n	800384e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d115      	bne.n	800381e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	b292      	uxth	r2, r2
 80037fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	1c9a      	adds	r2, r3, #2
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003810:	b29b      	uxth	r3, r3
 8003812:	3b01      	subs	r3, #1
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800381c:	e011      	b.n	8003842 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800381e:	f7fd fdb5 	bl	800138c <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	429a      	cmp	r2, r3
 800382c:	d803      	bhi.n	8003836 <HAL_SPI_Receive+0x208>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003834:	d102      	bne.n	800383c <HAL_SPI_Receive+0x20e>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d102      	bne.n	8003842 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003840:	e018      	b.n	8003874 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003848:	b29b      	uxth	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1ca      	bne.n	80037e4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	6839      	ldr	r1, [r7, #0]
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 fb4c 	bl	8003ef0 <SPI_EndRxTransaction>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2220      	movs	r2, #32
 8003862:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	75fb      	strb	r3, [r7, #23]
 8003870:	e000      	b.n	8003874 <HAL_SPI_Receive+0x246>
  }

error :
 8003872:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003884:	7dfb      	ldrb	r3, [r7, #23]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b08a      	sub	sp, #40	; 0x28
 8003892:	af00      	add	r7, sp, #0
 8003894:	60f8      	str	r0, [r7, #12]
 8003896:	60b9      	str	r1, [r7, #8]
 8003898:	607a      	str	r2, [r7, #4]
 800389a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800389c:	2301      	movs	r3, #1
 800389e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80038a0:	2300      	movs	r3, #0
 80038a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d101      	bne.n	80038b4 <HAL_SPI_TransmitReceive+0x26>
 80038b0:	2302      	movs	r3, #2
 80038b2:	e1fb      	b.n	8003cac <HAL_SPI_TransmitReceive+0x41e>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038bc:	f7fd fd66 	bl	800138c <HAL_GetTick>
 80038c0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80038c8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80038d0:	887b      	ldrh	r3, [r7, #2]
 80038d2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80038d4:	887b      	ldrh	r3, [r7, #2]
 80038d6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80038d8:	7efb      	ldrb	r3, [r7, #27]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d00e      	beq.n	80038fc <HAL_SPI_TransmitReceive+0x6e>
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038e4:	d106      	bne.n	80038f4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d102      	bne.n	80038f4 <HAL_SPI_TransmitReceive+0x66>
 80038ee:	7efb      	ldrb	r3, [r7, #27]
 80038f0:	2b04      	cmp	r3, #4
 80038f2:	d003      	beq.n	80038fc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80038f4:	2302      	movs	r3, #2
 80038f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80038fa:	e1cd      	b.n	8003c98 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d005      	beq.n	800390e <HAL_SPI_TransmitReceive+0x80>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <HAL_SPI_TransmitReceive+0x80>
 8003908:	887b      	ldrh	r3, [r7, #2]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d103      	bne.n	8003916 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003914:	e1c0      	b.n	8003c98 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b04      	cmp	r3, #4
 8003920:	d003      	beq.n	800392a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2205      	movs	r2, #5
 8003926:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	887a      	ldrh	r2, [r7, #2]
 800393a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	887a      	ldrh	r2, [r7, #2]
 8003942:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	887a      	ldrh	r2, [r7, #2]
 8003950:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	887a      	ldrh	r2, [r7, #2]
 8003956:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800396c:	d802      	bhi.n	8003974 <HAL_SPI_TransmitReceive+0xe6>
 800396e:	8a3b      	ldrh	r3, [r7, #16]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d908      	bls.n	8003986 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003982:	605a      	str	r2, [r3, #4]
 8003984:	e007      	b.n	8003996 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003994:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a0:	2b40      	cmp	r3, #64	; 0x40
 80039a2:	d007      	beq.n	80039b4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039bc:	d97c      	bls.n	8003ab8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d002      	beq.n	80039cc <HAL_SPI_TransmitReceive+0x13e>
 80039c6:	8a7b      	ldrh	r3, [r7, #18]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d169      	bne.n	8003aa0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d0:	881a      	ldrh	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039dc:	1c9a      	adds	r2, r3, #2
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039f0:	e056      	b.n	8003aa0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d11b      	bne.n	8003a38 <HAL_SPI_TransmitReceive+0x1aa>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d016      	beq.n	8003a38 <HAL_SPI_TransmitReceive+0x1aa>
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d113      	bne.n	8003a38 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a14:	881a      	ldrh	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a20:	1c9a      	adds	r2, r3, #2
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d11c      	bne.n	8003a80 <HAL_SPI_TransmitReceive+0x1f2>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d016      	beq.n	8003a80 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68da      	ldr	r2, [r3, #12]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5c:	b292      	uxth	r2, r2
 8003a5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a64:	1c9a      	adds	r2, r3, #2
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	3b01      	subs	r3, #1
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a80:	f7fd fc84 	bl	800138c <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d807      	bhi.n	8003aa0 <HAL_SPI_TransmitReceive+0x212>
 8003a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a96:	d003      	beq.n	8003aa0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003a9e:	e0fb      	b.n	8003c98 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1a3      	bne.n	80039f2 <HAL_SPI_TransmitReceive+0x164>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d19d      	bne.n	80039f2 <HAL_SPI_TransmitReceive+0x164>
 8003ab6:	e0df      	b.n	8003c78 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_SPI_TransmitReceive+0x23a>
 8003ac0:	8a7b      	ldrh	r3, [r7, #18]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	f040 80cb 	bne.w	8003c5e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d912      	bls.n	8003af8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad6:	881a      	ldrh	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae2:	1c9a      	adds	r2, r3, #2
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	3b02      	subs	r3, #2
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003af6:	e0b2      	b.n	8003c5e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	330c      	adds	r3, #12
 8003b02:	7812      	ldrb	r2, [r2, #0]
 8003b04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b1e:	e09e      	b.n	8003c5e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d134      	bne.n	8003b98 <HAL_SPI_TransmitReceive+0x30a>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d02f      	beq.n	8003b98 <HAL_SPI_TransmitReceive+0x30a>
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d12c      	bne.n	8003b98 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d912      	bls.n	8003b6e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4c:	881a      	ldrh	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b58:	1c9a      	adds	r2, r3, #2
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	3b02      	subs	r3, #2
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b6c:	e012      	b.n	8003b94 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	330c      	adds	r3, #12
 8003b78:	7812      	ldrb	r2, [r2, #0]
 8003b7a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d148      	bne.n	8003c38 <HAL_SPI_TransmitReceive+0x3aa>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d042      	beq.n	8003c38 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d923      	bls.n	8003c06 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	b292      	uxth	r2, r2
 8003bca:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	1c9a      	adds	r2, r3, #2
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	3b02      	subs	r3, #2
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d81f      	bhi.n	8003c34 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c02:	605a      	str	r2, [r3, #4]
 8003c04:	e016      	b.n	8003c34 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f103 020c 	add.w	r2, r3, #12
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	7812      	ldrb	r2, [r2, #0]
 8003c14:	b2d2      	uxtb	r2, r2
 8003c16:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c34:	2301      	movs	r3, #1
 8003c36:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c38:	f7fd fba8 	bl	800138c <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d803      	bhi.n	8003c50 <HAL_SPI_TransmitReceive+0x3c2>
 8003c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4e:	d102      	bne.n	8003c56 <HAL_SPI_TransmitReceive+0x3c8>
 8003c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d103      	bne.n	8003c5e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003c5c:	e01c      	b.n	8003c98 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f47f af5b 	bne.w	8003b20 <HAL_SPI_TransmitReceive+0x292>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f47f af54 	bne.w	8003b20 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c78:	69fa      	ldr	r2, [r7, #28]
 8003c7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 f9b3 	bl	8003fe8 <SPI_EndRxTxTransaction>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d006      	beq.n	8003c96 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2220      	movs	r2, #32
 8003c92:	661a      	str	r2, [r3, #96]	; 0x60
 8003c94:	e000      	b.n	8003c98 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003c96:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003ca8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3728      	adds	r7, #40	; 0x28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b088      	sub	sp, #32
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	603b      	str	r3, [r7, #0]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003cc4:	f7fd fb62 	bl	800138c <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ccc:	1a9b      	subs	r3, r3, r2
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003cd4:	f7fd fb5a 	bl	800138c <HAL_GetTick>
 8003cd8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003cda:	4b39      	ldr	r3, [pc, #228]	; (8003dc0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	015b      	lsls	r3, r3, #5
 8003ce0:	0d1b      	lsrs	r3, r3, #20
 8003ce2:	69fa      	ldr	r2, [r7, #28]
 8003ce4:	fb02 f303 	mul.w	r3, r2, r3
 8003ce8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cea:	e054      	b.n	8003d96 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf2:	d050      	beq.n	8003d96 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003cf4:	f7fd fb4a 	bl	800138c <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	69fa      	ldr	r2, [r7, #28]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d902      	bls.n	8003d0a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d13d      	bne.n	8003d86 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d22:	d111      	bne.n	8003d48 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d2c:	d004      	beq.n	8003d38 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d36:	d107      	bne.n	8003d48 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d50:	d10f      	bne.n	8003d72 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e017      	b.n	8003db6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	bf0c      	ite	eq
 8003da6:	2301      	moveq	r3, #1
 8003da8:	2300      	movne	r3, #0
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	461a      	mov	r2, r3
 8003dae:	79fb      	ldrb	r3, [r7, #7]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d19b      	bne.n	8003cec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3720      	adds	r7, #32
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	20000000 	.word	0x20000000

08003dc4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b08a      	sub	sp, #40	; 0x28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
 8003dd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003dd6:	f7fd fad9 	bl	800138c <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dde:	1a9b      	subs	r3, r3, r2
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	4413      	add	r3, r2
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003de6:	f7fd fad1 	bl	800138c <HAL_GetTick>
 8003dea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	330c      	adds	r3, #12
 8003df2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003df4:	4b3d      	ldr	r3, [pc, #244]	; (8003eec <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	00da      	lsls	r2, r3, #3
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	0d1b      	lsrs	r3, r3, #20
 8003e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e06:	fb02 f303 	mul.w	r3, r2, r3
 8003e0a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003e0c:	e060      	b.n	8003ed0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003e14:	d107      	bne.n	8003e26 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d104      	bne.n	8003e26 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003e24:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2c:	d050      	beq.n	8003ed0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e2e:	f7fd faad 	bl	800138c <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d902      	bls.n	8003e44 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d13d      	bne.n	8003ec0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e52:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e5c:	d111      	bne.n	8003e82 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e66:	d004      	beq.n	8003e72 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e70:	d107      	bne.n	8003e82 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e80:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e8a:	d10f      	bne.n	8003eac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003eaa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e010      	b.n	8003ee2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689a      	ldr	r2, [r3, #8]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d196      	bne.n	8003e0e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3728      	adds	r7, #40	; 0x28
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	20000000 	.word	0x20000000

08003ef0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b088      	sub	sp, #32
 8003ef4:	af02      	add	r7, sp, #8
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f04:	d111      	bne.n	8003f2a <SPI_EndRxTransaction+0x3a>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f0e:	d004      	beq.n	8003f1a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f18:	d107      	bne.n	8003f2a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f28:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f32:	d112      	bne.n	8003f5a <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	9300      	str	r3, [sp, #0]
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	2180      	movs	r1, #128	; 0x80
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f7ff feb8 	bl	8003cb4 <SPI_WaitFlagStateUntilTimeout>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d021      	beq.n	8003f8e <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f4e:	f043 0220 	orr.w	r2, r3, #32
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e03d      	b.n	8003fd6 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f5a:	4b21      	ldr	r3, [pc, #132]	; (8003fe0 <SPI_EndRxTransaction+0xf0>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a21      	ldr	r2, [pc, #132]	; (8003fe4 <SPI_EndRxTransaction+0xf4>)
 8003f60:	fba2 2303 	umull	r2, r3, r2, r3
 8003f64:	0d5b      	lsrs	r3, r3, #21
 8003f66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f6a:	fb02 f303 	mul.w	r3, r2, r3
 8003f6e:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f86:	2b80      	cmp	r3, #128	; 0x80
 8003f88:	d0f2      	beq.n	8003f70 <SPI_EndRxTransaction+0x80>
 8003f8a:	e000      	b.n	8003f8e <SPI_EndRxTransaction+0x9e>
        break;
 8003f8c:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f96:	d11d      	bne.n	8003fd4 <SPI_EndRxTransaction+0xe4>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fa0:	d004      	beq.n	8003fac <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003faa:	d113      	bne.n	8003fd4 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f7ff ff03 	bl	8003dc4 <SPI_WaitFifoStateUntilTimeout>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d007      	beq.n	8003fd4 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc8:	f043 0220 	orr.w	r2, r3, #32
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e000      	b.n	8003fd6 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	20000000 	.word	0x20000000
 8003fe4:	165e9f81 	.word	0x165e9f81

08003fe8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b088      	sub	sp, #32
 8003fec:	af02      	add	r7, sp, #8
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f7ff fedf 	bl	8003dc4 <SPI_WaitFifoStateUntilTimeout>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d007      	beq.n	800401c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004010:	f043 0220 	orr.w	r2, r3, #32
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e046      	b.n	80040aa <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800401c:	4b25      	ldr	r3, [pc, #148]	; (80040b4 <SPI_EndRxTxTransaction+0xcc>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a25      	ldr	r2, [pc, #148]	; (80040b8 <SPI_EndRxTxTransaction+0xd0>)
 8004022:	fba2 2303 	umull	r2, r3, r2, r3
 8004026:	0d5b      	lsrs	r3, r3, #21
 8004028:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800402c:	fb02 f303 	mul.w	r3, r2, r3
 8004030:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800403a:	d112      	bne.n	8004062 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	2200      	movs	r2, #0
 8004044:	2180      	movs	r1, #128	; 0x80
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f7ff fe34 	bl	8003cb4 <SPI_WaitFlagStateUntilTimeout>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d016      	beq.n	8004080 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004056:	f043 0220 	orr.w	r2, r3, #32
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e023      	b.n	80040aa <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00a      	beq.n	800407e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	3b01      	subs	r3, #1
 800406c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004078:	2b80      	cmp	r3, #128	; 0x80
 800407a:	d0f2      	beq.n	8004062 <SPI_EndRxTxTransaction+0x7a>
 800407c:	e000      	b.n	8004080 <SPI_EndRxTxTransaction+0x98>
        break;
 800407e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2200      	movs	r2, #0
 8004088:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f7ff fe99 	bl	8003dc4 <SPI_WaitFifoStateUntilTimeout>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d007      	beq.n	80040a8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800409c:	f043 0220 	orr.w	r2, r3, #32
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e000      	b.n	80040aa <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3718      	adds	r7, #24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	20000000 	.word	0x20000000
 80040b8:	165e9f81 	.word	0x165e9f81

080040bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e040      	b.n	8004150 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d106      	bne.n	80040e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7fc ffd2 	bl	8001088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2224      	movs	r2, #36	; 0x24
 80040e8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 0201 	bic.w	r2, r2, #1
 80040f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f8b0 	bl	8004260 <UART_SetConfig>
 8004100:	4603      	mov	r3, r0
 8004102:	2b01      	cmp	r3, #1
 8004104:	d101      	bne.n	800410a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e022      	b.n	8004150 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	2b00      	cmp	r3, #0
 8004110:	d002      	beq.n	8004118 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fb08 	bl	8004728 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004126:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004136:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0201 	orr.w	r2, r2, #1
 8004146:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 fb8f 	bl	800486c <UART_CheckIdleState>
 800414e:	4603      	mov	r3, r0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b08a      	sub	sp, #40	; 0x28
 800415c:	af02      	add	r7, sp, #8
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	603b      	str	r3, [r7, #0]
 8004164:	4613      	mov	r3, r2
 8004166:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800416c:	2b20      	cmp	r3, #32
 800416e:	d171      	bne.n	8004254 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <HAL_UART_Transmit+0x24>
 8004176:	88fb      	ldrh	r3, [r7, #6]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e06a      	b.n	8004256 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2221      	movs	r2, #33	; 0x21
 800418c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800418e:	f7fd f8fd 	bl	800138c <HAL_GetTick>
 8004192:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	88fa      	ldrh	r2, [r7, #6]
 8004198:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	88fa      	ldrh	r2, [r7, #6]
 80041a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ac:	d108      	bne.n	80041c0 <HAL_UART_Transmit+0x68>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d104      	bne.n	80041c0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	61bb      	str	r3, [r7, #24]
 80041be:	e003      	b.n	80041c8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041c4:	2300      	movs	r3, #0
 80041c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041c8:	e02c      	b.n	8004224 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	2200      	movs	r2, #0
 80041d2:	2180      	movs	r1, #128	; 0x80
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 fb96 	bl	8004906 <UART_WaitOnFlagUntilTimeout>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e038      	b.n	8004256 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10b      	bne.n	8004202 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	3302      	adds	r3, #2
 80041fe:	61bb      	str	r3, [r7, #24]
 8004200:	e007      	b.n	8004212 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	781a      	ldrb	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	3301      	adds	r3, #1
 8004210:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004218:	b29b      	uxth	r3, r3
 800421a:	3b01      	subs	r3, #1
 800421c:	b29a      	uxth	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800422a:	b29b      	uxth	r3, r3
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1cc      	bne.n	80041ca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2200      	movs	r2, #0
 8004238:	2140      	movs	r1, #64	; 0x40
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 fb63 	bl	8004906 <UART_WaitOnFlagUntilTimeout>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e005      	b.n	8004256 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2220      	movs	r2, #32
 800424e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004250:	2300      	movs	r3, #0
 8004252:	e000      	b.n	8004256 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004254:	2302      	movs	r3, #2
  }
}
 8004256:	4618      	mov	r0, r3
 8004258:	3720      	adds	r7, #32
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b088      	sub	sp, #32
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004268:	2300      	movs	r3, #0
 800426a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	431a      	orrs	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	431a      	orrs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	69db      	ldr	r3, [r3, #28]
 8004280:	4313      	orrs	r3, r2
 8004282:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	4ba6      	ldr	r3, [pc, #664]	; (8004524 <UART_SetConfig+0x2c4>)
 800428c:	4013      	ands	r3, r2
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6812      	ldr	r2, [r2, #0]
 8004292:	6979      	ldr	r1, [r7, #20]
 8004294:	430b      	orrs	r3, r1
 8004296:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68da      	ldr	r2, [r3, #12]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a94      	ldr	r2, [pc, #592]	; (8004528 <UART_SetConfig+0x2c8>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d120      	bne.n	800431e <UART_SetConfig+0xbe>
 80042dc:	4b93      	ldr	r3, [pc, #588]	; (800452c <UART_SetConfig+0x2cc>)
 80042de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e2:	f003 0303 	and.w	r3, r3, #3
 80042e6:	2b03      	cmp	r3, #3
 80042e8:	d816      	bhi.n	8004318 <UART_SetConfig+0xb8>
 80042ea:	a201      	add	r2, pc, #4	; (adr r2, 80042f0 <UART_SetConfig+0x90>)
 80042ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f0:	08004301 	.word	0x08004301
 80042f4:	0800430d 	.word	0x0800430d
 80042f8:	08004307 	.word	0x08004307
 80042fc:	08004313 	.word	0x08004313
 8004300:	2301      	movs	r3, #1
 8004302:	77fb      	strb	r3, [r7, #31]
 8004304:	e150      	b.n	80045a8 <UART_SetConfig+0x348>
 8004306:	2302      	movs	r3, #2
 8004308:	77fb      	strb	r3, [r7, #31]
 800430a:	e14d      	b.n	80045a8 <UART_SetConfig+0x348>
 800430c:	2304      	movs	r3, #4
 800430e:	77fb      	strb	r3, [r7, #31]
 8004310:	e14a      	b.n	80045a8 <UART_SetConfig+0x348>
 8004312:	2308      	movs	r3, #8
 8004314:	77fb      	strb	r3, [r7, #31]
 8004316:	e147      	b.n	80045a8 <UART_SetConfig+0x348>
 8004318:	2310      	movs	r3, #16
 800431a:	77fb      	strb	r3, [r7, #31]
 800431c:	e144      	b.n	80045a8 <UART_SetConfig+0x348>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a83      	ldr	r2, [pc, #524]	; (8004530 <UART_SetConfig+0x2d0>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d132      	bne.n	800438e <UART_SetConfig+0x12e>
 8004328:	4b80      	ldr	r3, [pc, #512]	; (800452c <UART_SetConfig+0x2cc>)
 800432a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432e:	f003 030c 	and.w	r3, r3, #12
 8004332:	2b0c      	cmp	r3, #12
 8004334:	d828      	bhi.n	8004388 <UART_SetConfig+0x128>
 8004336:	a201      	add	r2, pc, #4	; (adr r2, 800433c <UART_SetConfig+0xdc>)
 8004338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433c:	08004371 	.word	0x08004371
 8004340:	08004389 	.word	0x08004389
 8004344:	08004389 	.word	0x08004389
 8004348:	08004389 	.word	0x08004389
 800434c:	0800437d 	.word	0x0800437d
 8004350:	08004389 	.word	0x08004389
 8004354:	08004389 	.word	0x08004389
 8004358:	08004389 	.word	0x08004389
 800435c:	08004377 	.word	0x08004377
 8004360:	08004389 	.word	0x08004389
 8004364:	08004389 	.word	0x08004389
 8004368:	08004389 	.word	0x08004389
 800436c:	08004383 	.word	0x08004383
 8004370:	2300      	movs	r3, #0
 8004372:	77fb      	strb	r3, [r7, #31]
 8004374:	e118      	b.n	80045a8 <UART_SetConfig+0x348>
 8004376:	2302      	movs	r3, #2
 8004378:	77fb      	strb	r3, [r7, #31]
 800437a:	e115      	b.n	80045a8 <UART_SetConfig+0x348>
 800437c:	2304      	movs	r3, #4
 800437e:	77fb      	strb	r3, [r7, #31]
 8004380:	e112      	b.n	80045a8 <UART_SetConfig+0x348>
 8004382:	2308      	movs	r3, #8
 8004384:	77fb      	strb	r3, [r7, #31]
 8004386:	e10f      	b.n	80045a8 <UART_SetConfig+0x348>
 8004388:	2310      	movs	r3, #16
 800438a:	77fb      	strb	r3, [r7, #31]
 800438c:	e10c      	b.n	80045a8 <UART_SetConfig+0x348>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a68      	ldr	r2, [pc, #416]	; (8004534 <UART_SetConfig+0x2d4>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d120      	bne.n	80043da <UART_SetConfig+0x17a>
 8004398:	4b64      	ldr	r3, [pc, #400]	; (800452c <UART_SetConfig+0x2cc>)
 800439a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043a2:	2b30      	cmp	r3, #48	; 0x30
 80043a4:	d013      	beq.n	80043ce <UART_SetConfig+0x16e>
 80043a6:	2b30      	cmp	r3, #48	; 0x30
 80043a8:	d814      	bhi.n	80043d4 <UART_SetConfig+0x174>
 80043aa:	2b20      	cmp	r3, #32
 80043ac:	d009      	beq.n	80043c2 <UART_SetConfig+0x162>
 80043ae:	2b20      	cmp	r3, #32
 80043b0:	d810      	bhi.n	80043d4 <UART_SetConfig+0x174>
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d002      	beq.n	80043bc <UART_SetConfig+0x15c>
 80043b6:	2b10      	cmp	r3, #16
 80043b8:	d006      	beq.n	80043c8 <UART_SetConfig+0x168>
 80043ba:	e00b      	b.n	80043d4 <UART_SetConfig+0x174>
 80043bc:	2300      	movs	r3, #0
 80043be:	77fb      	strb	r3, [r7, #31]
 80043c0:	e0f2      	b.n	80045a8 <UART_SetConfig+0x348>
 80043c2:	2302      	movs	r3, #2
 80043c4:	77fb      	strb	r3, [r7, #31]
 80043c6:	e0ef      	b.n	80045a8 <UART_SetConfig+0x348>
 80043c8:	2304      	movs	r3, #4
 80043ca:	77fb      	strb	r3, [r7, #31]
 80043cc:	e0ec      	b.n	80045a8 <UART_SetConfig+0x348>
 80043ce:	2308      	movs	r3, #8
 80043d0:	77fb      	strb	r3, [r7, #31]
 80043d2:	e0e9      	b.n	80045a8 <UART_SetConfig+0x348>
 80043d4:	2310      	movs	r3, #16
 80043d6:	77fb      	strb	r3, [r7, #31]
 80043d8:	e0e6      	b.n	80045a8 <UART_SetConfig+0x348>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a56      	ldr	r2, [pc, #344]	; (8004538 <UART_SetConfig+0x2d8>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d120      	bne.n	8004426 <UART_SetConfig+0x1c6>
 80043e4:	4b51      	ldr	r3, [pc, #324]	; (800452c <UART_SetConfig+0x2cc>)
 80043e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80043ee:	2bc0      	cmp	r3, #192	; 0xc0
 80043f0:	d013      	beq.n	800441a <UART_SetConfig+0x1ba>
 80043f2:	2bc0      	cmp	r3, #192	; 0xc0
 80043f4:	d814      	bhi.n	8004420 <UART_SetConfig+0x1c0>
 80043f6:	2b80      	cmp	r3, #128	; 0x80
 80043f8:	d009      	beq.n	800440e <UART_SetConfig+0x1ae>
 80043fa:	2b80      	cmp	r3, #128	; 0x80
 80043fc:	d810      	bhi.n	8004420 <UART_SetConfig+0x1c0>
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d002      	beq.n	8004408 <UART_SetConfig+0x1a8>
 8004402:	2b40      	cmp	r3, #64	; 0x40
 8004404:	d006      	beq.n	8004414 <UART_SetConfig+0x1b4>
 8004406:	e00b      	b.n	8004420 <UART_SetConfig+0x1c0>
 8004408:	2300      	movs	r3, #0
 800440a:	77fb      	strb	r3, [r7, #31]
 800440c:	e0cc      	b.n	80045a8 <UART_SetConfig+0x348>
 800440e:	2302      	movs	r3, #2
 8004410:	77fb      	strb	r3, [r7, #31]
 8004412:	e0c9      	b.n	80045a8 <UART_SetConfig+0x348>
 8004414:	2304      	movs	r3, #4
 8004416:	77fb      	strb	r3, [r7, #31]
 8004418:	e0c6      	b.n	80045a8 <UART_SetConfig+0x348>
 800441a:	2308      	movs	r3, #8
 800441c:	77fb      	strb	r3, [r7, #31]
 800441e:	e0c3      	b.n	80045a8 <UART_SetConfig+0x348>
 8004420:	2310      	movs	r3, #16
 8004422:	77fb      	strb	r3, [r7, #31]
 8004424:	e0c0      	b.n	80045a8 <UART_SetConfig+0x348>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a44      	ldr	r2, [pc, #272]	; (800453c <UART_SetConfig+0x2dc>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d125      	bne.n	800447c <UART_SetConfig+0x21c>
 8004430:	4b3e      	ldr	r3, [pc, #248]	; (800452c <UART_SetConfig+0x2cc>)
 8004432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800443a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800443e:	d017      	beq.n	8004470 <UART_SetConfig+0x210>
 8004440:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004444:	d817      	bhi.n	8004476 <UART_SetConfig+0x216>
 8004446:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800444a:	d00b      	beq.n	8004464 <UART_SetConfig+0x204>
 800444c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004450:	d811      	bhi.n	8004476 <UART_SetConfig+0x216>
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <UART_SetConfig+0x1fe>
 8004456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800445a:	d006      	beq.n	800446a <UART_SetConfig+0x20a>
 800445c:	e00b      	b.n	8004476 <UART_SetConfig+0x216>
 800445e:	2300      	movs	r3, #0
 8004460:	77fb      	strb	r3, [r7, #31]
 8004462:	e0a1      	b.n	80045a8 <UART_SetConfig+0x348>
 8004464:	2302      	movs	r3, #2
 8004466:	77fb      	strb	r3, [r7, #31]
 8004468:	e09e      	b.n	80045a8 <UART_SetConfig+0x348>
 800446a:	2304      	movs	r3, #4
 800446c:	77fb      	strb	r3, [r7, #31]
 800446e:	e09b      	b.n	80045a8 <UART_SetConfig+0x348>
 8004470:	2308      	movs	r3, #8
 8004472:	77fb      	strb	r3, [r7, #31]
 8004474:	e098      	b.n	80045a8 <UART_SetConfig+0x348>
 8004476:	2310      	movs	r3, #16
 8004478:	77fb      	strb	r3, [r7, #31]
 800447a:	e095      	b.n	80045a8 <UART_SetConfig+0x348>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a2f      	ldr	r2, [pc, #188]	; (8004540 <UART_SetConfig+0x2e0>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d125      	bne.n	80044d2 <UART_SetConfig+0x272>
 8004486:	4b29      	ldr	r3, [pc, #164]	; (800452c <UART_SetConfig+0x2cc>)
 8004488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004490:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004494:	d017      	beq.n	80044c6 <UART_SetConfig+0x266>
 8004496:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800449a:	d817      	bhi.n	80044cc <UART_SetConfig+0x26c>
 800449c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044a0:	d00b      	beq.n	80044ba <UART_SetConfig+0x25a>
 80044a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044a6:	d811      	bhi.n	80044cc <UART_SetConfig+0x26c>
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <UART_SetConfig+0x254>
 80044ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044b0:	d006      	beq.n	80044c0 <UART_SetConfig+0x260>
 80044b2:	e00b      	b.n	80044cc <UART_SetConfig+0x26c>
 80044b4:	2301      	movs	r3, #1
 80044b6:	77fb      	strb	r3, [r7, #31]
 80044b8:	e076      	b.n	80045a8 <UART_SetConfig+0x348>
 80044ba:	2302      	movs	r3, #2
 80044bc:	77fb      	strb	r3, [r7, #31]
 80044be:	e073      	b.n	80045a8 <UART_SetConfig+0x348>
 80044c0:	2304      	movs	r3, #4
 80044c2:	77fb      	strb	r3, [r7, #31]
 80044c4:	e070      	b.n	80045a8 <UART_SetConfig+0x348>
 80044c6:	2308      	movs	r3, #8
 80044c8:	77fb      	strb	r3, [r7, #31]
 80044ca:	e06d      	b.n	80045a8 <UART_SetConfig+0x348>
 80044cc:	2310      	movs	r3, #16
 80044ce:	77fb      	strb	r3, [r7, #31]
 80044d0:	e06a      	b.n	80045a8 <UART_SetConfig+0x348>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a1b      	ldr	r2, [pc, #108]	; (8004544 <UART_SetConfig+0x2e4>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d138      	bne.n	800454e <UART_SetConfig+0x2ee>
 80044dc:	4b13      	ldr	r3, [pc, #76]	; (800452c <UART_SetConfig+0x2cc>)
 80044de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80044e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80044ea:	d017      	beq.n	800451c <UART_SetConfig+0x2bc>
 80044ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80044f0:	d82a      	bhi.n	8004548 <UART_SetConfig+0x2e8>
 80044f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044f6:	d00b      	beq.n	8004510 <UART_SetConfig+0x2b0>
 80044f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044fc:	d824      	bhi.n	8004548 <UART_SetConfig+0x2e8>
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <UART_SetConfig+0x2aa>
 8004502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004506:	d006      	beq.n	8004516 <UART_SetConfig+0x2b6>
 8004508:	e01e      	b.n	8004548 <UART_SetConfig+0x2e8>
 800450a:	2300      	movs	r3, #0
 800450c:	77fb      	strb	r3, [r7, #31]
 800450e:	e04b      	b.n	80045a8 <UART_SetConfig+0x348>
 8004510:	2302      	movs	r3, #2
 8004512:	77fb      	strb	r3, [r7, #31]
 8004514:	e048      	b.n	80045a8 <UART_SetConfig+0x348>
 8004516:	2304      	movs	r3, #4
 8004518:	77fb      	strb	r3, [r7, #31]
 800451a:	e045      	b.n	80045a8 <UART_SetConfig+0x348>
 800451c:	2308      	movs	r3, #8
 800451e:	77fb      	strb	r3, [r7, #31]
 8004520:	e042      	b.n	80045a8 <UART_SetConfig+0x348>
 8004522:	bf00      	nop
 8004524:	efff69f3 	.word	0xefff69f3
 8004528:	40011000 	.word	0x40011000
 800452c:	40023800 	.word	0x40023800
 8004530:	40004400 	.word	0x40004400
 8004534:	40004800 	.word	0x40004800
 8004538:	40004c00 	.word	0x40004c00
 800453c:	40005000 	.word	0x40005000
 8004540:	40011400 	.word	0x40011400
 8004544:	40007800 	.word	0x40007800
 8004548:	2310      	movs	r3, #16
 800454a:	77fb      	strb	r3, [r7, #31]
 800454c:	e02c      	b.n	80045a8 <UART_SetConfig+0x348>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a72      	ldr	r2, [pc, #456]	; (800471c <UART_SetConfig+0x4bc>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d125      	bne.n	80045a4 <UART_SetConfig+0x344>
 8004558:	4b71      	ldr	r3, [pc, #452]	; (8004720 <UART_SetConfig+0x4c0>)
 800455a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004562:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004566:	d017      	beq.n	8004598 <UART_SetConfig+0x338>
 8004568:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800456c:	d817      	bhi.n	800459e <UART_SetConfig+0x33e>
 800456e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004572:	d00b      	beq.n	800458c <UART_SetConfig+0x32c>
 8004574:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004578:	d811      	bhi.n	800459e <UART_SetConfig+0x33e>
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <UART_SetConfig+0x326>
 800457e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004582:	d006      	beq.n	8004592 <UART_SetConfig+0x332>
 8004584:	e00b      	b.n	800459e <UART_SetConfig+0x33e>
 8004586:	2300      	movs	r3, #0
 8004588:	77fb      	strb	r3, [r7, #31]
 800458a:	e00d      	b.n	80045a8 <UART_SetConfig+0x348>
 800458c:	2302      	movs	r3, #2
 800458e:	77fb      	strb	r3, [r7, #31]
 8004590:	e00a      	b.n	80045a8 <UART_SetConfig+0x348>
 8004592:	2304      	movs	r3, #4
 8004594:	77fb      	strb	r3, [r7, #31]
 8004596:	e007      	b.n	80045a8 <UART_SetConfig+0x348>
 8004598:	2308      	movs	r3, #8
 800459a:	77fb      	strb	r3, [r7, #31]
 800459c:	e004      	b.n	80045a8 <UART_SetConfig+0x348>
 800459e:	2310      	movs	r3, #16
 80045a0:	77fb      	strb	r3, [r7, #31]
 80045a2:	e001      	b.n	80045a8 <UART_SetConfig+0x348>
 80045a4:	2310      	movs	r3, #16
 80045a6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045b0:	d15b      	bne.n	800466a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80045b2:	7ffb      	ldrb	r3, [r7, #31]
 80045b4:	2b08      	cmp	r3, #8
 80045b6:	d828      	bhi.n	800460a <UART_SetConfig+0x3aa>
 80045b8:	a201      	add	r2, pc, #4	; (adr r2, 80045c0 <UART_SetConfig+0x360>)
 80045ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045be:	bf00      	nop
 80045c0:	080045e5 	.word	0x080045e5
 80045c4:	080045ed 	.word	0x080045ed
 80045c8:	080045f5 	.word	0x080045f5
 80045cc:	0800460b 	.word	0x0800460b
 80045d0:	080045fb 	.word	0x080045fb
 80045d4:	0800460b 	.word	0x0800460b
 80045d8:	0800460b 	.word	0x0800460b
 80045dc:	0800460b 	.word	0x0800460b
 80045e0:	08004603 	.word	0x08004603
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045e4:	f7fe fb28 	bl	8002c38 <HAL_RCC_GetPCLK1Freq>
 80045e8:	61b8      	str	r0, [r7, #24]
        break;
 80045ea:	e013      	b.n	8004614 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045ec:	f7fe fb38 	bl	8002c60 <HAL_RCC_GetPCLK2Freq>
 80045f0:	61b8      	str	r0, [r7, #24]
        break;
 80045f2:	e00f      	b.n	8004614 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045f4:	4b4b      	ldr	r3, [pc, #300]	; (8004724 <UART_SetConfig+0x4c4>)
 80045f6:	61bb      	str	r3, [r7, #24]
        break;
 80045f8:	e00c      	b.n	8004614 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045fa:	f7fe fa0b 	bl	8002a14 <HAL_RCC_GetSysClockFreq>
 80045fe:	61b8      	str	r0, [r7, #24]
        break;
 8004600:	e008      	b.n	8004614 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004606:	61bb      	str	r3, [r7, #24]
        break;
 8004608:	e004      	b.n	8004614 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800460a:	2300      	movs	r3, #0
 800460c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	77bb      	strb	r3, [r7, #30]
        break;
 8004612:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d074      	beq.n	8004704 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	005a      	lsls	r2, r3, #1
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	085b      	lsrs	r3, r3, #1
 8004624:	441a      	add	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	fbb2 f3f3 	udiv	r3, r2, r3
 800462e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	2b0f      	cmp	r3, #15
 8004634:	d916      	bls.n	8004664 <UART_SetConfig+0x404>
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800463c:	d212      	bcs.n	8004664 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	b29b      	uxth	r3, r3
 8004642:	f023 030f 	bic.w	r3, r3, #15
 8004646:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	085b      	lsrs	r3, r3, #1
 800464c:	b29b      	uxth	r3, r3
 800464e:	f003 0307 	and.w	r3, r3, #7
 8004652:	b29a      	uxth	r2, r3
 8004654:	89fb      	ldrh	r3, [r7, #14]
 8004656:	4313      	orrs	r3, r2
 8004658:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	89fa      	ldrh	r2, [r7, #14]
 8004660:	60da      	str	r2, [r3, #12]
 8004662:	e04f      	b.n	8004704 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	77bb      	strb	r3, [r7, #30]
 8004668:	e04c      	b.n	8004704 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800466a:	7ffb      	ldrb	r3, [r7, #31]
 800466c:	2b08      	cmp	r3, #8
 800466e:	d828      	bhi.n	80046c2 <UART_SetConfig+0x462>
 8004670:	a201      	add	r2, pc, #4	; (adr r2, 8004678 <UART_SetConfig+0x418>)
 8004672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004676:	bf00      	nop
 8004678:	0800469d 	.word	0x0800469d
 800467c:	080046a5 	.word	0x080046a5
 8004680:	080046ad 	.word	0x080046ad
 8004684:	080046c3 	.word	0x080046c3
 8004688:	080046b3 	.word	0x080046b3
 800468c:	080046c3 	.word	0x080046c3
 8004690:	080046c3 	.word	0x080046c3
 8004694:	080046c3 	.word	0x080046c3
 8004698:	080046bb 	.word	0x080046bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800469c:	f7fe facc 	bl	8002c38 <HAL_RCC_GetPCLK1Freq>
 80046a0:	61b8      	str	r0, [r7, #24]
        break;
 80046a2:	e013      	b.n	80046cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046a4:	f7fe fadc 	bl	8002c60 <HAL_RCC_GetPCLK2Freq>
 80046a8:	61b8      	str	r0, [r7, #24]
        break;
 80046aa:	e00f      	b.n	80046cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046ac:	4b1d      	ldr	r3, [pc, #116]	; (8004724 <UART_SetConfig+0x4c4>)
 80046ae:	61bb      	str	r3, [r7, #24]
        break;
 80046b0:	e00c      	b.n	80046cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046b2:	f7fe f9af 	bl	8002a14 <HAL_RCC_GetSysClockFreq>
 80046b6:	61b8      	str	r0, [r7, #24]
        break;
 80046b8:	e008      	b.n	80046cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046be:	61bb      	str	r3, [r7, #24]
        break;
 80046c0:	e004      	b.n	80046cc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80046c2:	2300      	movs	r3, #0
 80046c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	77bb      	strb	r3, [r7, #30]
        break;
 80046ca:	bf00      	nop
    }

    if (pclk != 0U)
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d018      	beq.n	8004704 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	085a      	lsrs	r2, r3, #1
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	441a      	add	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	2b0f      	cmp	r3, #15
 80046ea:	d909      	bls.n	8004700 <UART_SetConfig+0x4a0>
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f2:	d205      	bcs.n	8004700 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	60da      	str	r2, [r3, #12]
 80046fe:	e001      	b.n	8004704 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004710:	7fbb      	ldrb	r3, [r7, #30]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3720      	adds	r7, #32
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	40007c00 	.word	0x40007c00
 8004720:	40023800 	.word	0x40023800
 8004724:	00f42400 	.word	0x00f42400

08004728 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00a      	beq.n	8004752 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	430a      	orrs	r2, r1
 8004750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00a      	beq.n	8004774 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	430a      	orrs	r2, r1
 8004772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00a      	beq.n	8004796 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	f003 0308 	and.w	r3, r3, #8
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00a      	beq.n	80047b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	f003 0310 	and.w	r3, r3, #16
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00a      	beq.n	80047da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	f003 0320 	and.w	r3, r3, #32
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	430a      	orrs	r2, r1
 80047fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004804:	2b00      	cmp	r3, #0
 8004806:	d01a      	beq.n	800483e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004826:	d10a      	bne.n	800483e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	605a      	str	r2, [r3, #4]
  }
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af02      	add	r7, sp, #8
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800487c:	f7fc fd86 	bl	800138c <HAL_GetTick>
 8004880:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0308 	and.w	r3, r3, #8
 800488c:	2b08      	cmp	r3, #8
 800488e:	d10e      	bne.n	80048ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004890:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f831 	bl	8004906 <UART_WaitOnFlagUntilTimeout>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e027      	b.n	80048fe <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	2b04      	cmp	r3, #4
 80048ba:	d10e      	bne.n	80048da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f81b 	bl	8004906 <UART_WaitOnFlagUntilTimeout>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e011      	b.n	80048fe <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2220      	movs	r2, #32
 80048de:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b09c      	sub	sp, #112	; 0x70
 800490a:	af00      	add	r7, sp, #0
 800490c:	60f8      	str	r0, [r7, #12]
 800490e:	60b9      	str	r1, [r7, #8]
 8004910:	603b      	str	r3, [r7, #0]
 8004912:	4613      	mov	r3, r2
 8004914:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004916:	e0a7      	b.n	8004a68 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004918:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800491a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491e:	f000 80a3 	beq.w	8004a68 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004922:	f7fc fd33 	bl	800138c <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800492e:	429a      	cmp	r2, r3
 8004930:	d302      	bcc.n	8004938 <UART_WaitOnFlagUntilTimeout+0x32>
 8004932:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004934:	2b00      	cmp	r3, #0
 8004936:	d13f      	bne.n	80049b8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004940:	e853 3f00 	ldrex	r3, [r3]
 8004944:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004948:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800494c:	667b      	str	r3, [r7, #100]	; 0x64
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	461a      	mov	r2, r3
 8004954:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004956:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004958:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800495c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800495e:	e841 2300 	strex	r3, r2, [r1]
 8004962:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1e6      	bne.n	8004938 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	3308      	adds	r3, #8
 8004970:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004974:	e853 3f00 	ldrex	r3, [r3]
 8004978:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800497a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497c:	f023 0301 	bic.w	r3, r3, #1
 8004980:	663b      	str	r3, [r7, #96]	; 0x60
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	3308      	adds	r3, #8
 8004988:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800498a:	64ba      	str	r2, [r7, #72]	; 0x48
 800498c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004990:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004992:	e841 2300 	strex	r3, r2, [r1]
 8004996:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004998:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1e5      	bne.n	800496a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2220      	movs	r2, #32
 80049a2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2220      	movs	r2, #32
 80049a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e068      	b.n	8004a8a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0304 	and.w	r3, r3, #4
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d050      	beq.n	8004a68 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	69db      	ldr	r3, [r3, #28]
 80049cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049d4:	d148      	bne.n	8004a68 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049de:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e8:	e853 3f00 	ldrex	r3, [r3]
 80049ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	461a      	mov	r2, r3
 80049fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004a00:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a06:	e841 2300 	strex	r3, r2, [r1]
 8004a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1e6      	bne.n	80049e0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	3308      	adds	r3, #8
 8004a18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	e853 3f00 	ldrex	r3, [r3]
 8004a20:	613b      	str	r3, [r7, #16]
   return(result);
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	f023 0301 	bic.w	r3, r3, #1
 8004a28:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3308      	adds	r3, #8
 8004a30:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a32:	623a      	str	r2, [r7, #32]
 8004a34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a36:	69f9      	ldr	r1, [r7, #28]
 8004a38:	6a3a      	ldr	r2, [r7, #32]
 8004a3a:	e841 2300 	strex	r3, r2, [r1]
 8004a3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1e5      	bne.n	8004a12 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e010      	b.n	8004a8a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	69da      	ldr	r2, [r3, #28]
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	4013      	ands	r3, r2
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	bf0c      	ite	eq
 8004a78:	2301      	moveq	r3, #1
 8004a7a:	2300      	movne	r3, #0
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	461a      	mov	r2, r3
 8004a80:	79fb      	ldrb	r3, [r7, #7]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	f43f af48 	beq.w	8004918 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3770      	adds	r7, #112	; 0x70
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
	...

08004a94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a94:	b084      	sub	sp, #16
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b084      	sub	sp, #16
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
 8004a9e:	f107 001c 	add.w	r0, r7, #28
 8004aa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d120      	bne.n	8004aee <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	4b20      	ldr	r3, [pc, #128]	; (8004b40 <USB_CoreInit+0xac>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d105      	bne.n	8004ae2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 fa96 	bl	8005014 <USB_CoreReset>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	73fb      	strb	r3, [r7, #15]
 8004aec:	e010      	b.n	8004b10 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 fa8a 	bl	8005014 <USB_CoreReset>
 8004b00:	4603      	mov	r3, r0
 8004b02:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d10b      	bne.n	8004b2e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f043 0206 	orr.w	r2, r3, #6
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f043 0220 	orr.w	r2, r3, #32
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3710      	adds	r7, #16
 8004b34:	46bd      	mov	sp, r7
 8004b36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b3a:	b004      	add	sp, #16
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	ffbdffbf 	.word	0xffbdffbf

08004b44 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f023 0201 	bic.w	r2, r3, #1
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b084      	sub	sp, #16
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	460b      	mov	r3, r1
 8004b70:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b72:	2300      	movs	r3, #0
 8004b74:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b82:	78fb      	ldrb	r3, [r7, #3]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d115      	bne.n	8004bb4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b94:	2001      	movs	r0, #1
 8004b96:	f7fc fc05 	bl	80013a4 <HAL_Delay>
      ms++;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 fa29 	bl	8004ff8 <USB_GetMode>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d01e      	beq.n	8004bea <USB_SetCurrentMode+0x84>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2b31      	cmp	r3, #49	; 0x31
 8004bb0:	d9f0      	bls.n	8004b94 <USB_SetCurrentMode+0x2e>
 8004bb2:	e01a      	b.n	8004bea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004bb4:	78fb      	ldrb	r3, [r7, #3]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d115      	bne.n	8004be6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004bc6:	2001      	movs	r0, #1
 8004bc8:	f7fc fbec 	bl	80013a4 <HAL_Delay>
      ms++;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	3301      	adds	r3, #1
 8004bd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 fa10 	bl	8004ff8 <USB_GetMode>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d005      	beq.n	8004bea <USB_SetCurrentMode+0x84>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2b31      	cmp	r3, #49	; 0x31
 8004be2:	d9f0      	bls.n	8004bc6 <USB_SetCurrentMode+0x60>
 8004be4:	e001      	b.n	8004bea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e005      	b.n	8004bf6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2b32      	cmp	r3, #50	; 0x32
 8004bee:	d101      	bne.n	8004bf4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e000      	b.n	8004bf6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
	...

08004c00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c00:	b084      	sub	sp, #16
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b086      	sub	sp, #24
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
 8004c0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004c0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	613b      	str	r3, [r7, #16]
 8004c1e:	e009      	b.n	8004c34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	3340      	adds	r3, #64	; 0x40
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4413      	add	r3, r2
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	3301      	adds	r3, #1
 8004c32:	613b      	str	r3, [r7, #16]
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	2b0e      	cmp	r3, #14
 8004c38:	d9f2      	bls.n	8004c20 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d11c      	bne.n	8004c7a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c4e:	f043 0302 	orr.w	r3, r3, #2
 8004c52:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c58:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	e005      	b.n	8004c86 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	2300      	movs	r3, #0
 8004c90:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c98:	4619      	mov	r1, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	680b      	ldr	r3, [r1, #0]
 8004ca4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d10c      	bne.n	8004cc6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d104      	bne.n	8004cbc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f965 	bl	8004f84 <USB_SetDevSpeed>
 8004cba:	e008      	b.n	8004cce <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f960 	bl	8004f84 <USB_SetDevSpeed>
 8004cc4:	e003      	b.n	8004cce <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004cc6:	2103      	movs	r1, #3
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 f95b 	bl	8004f84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004cce:	2110      	movs	r1, #16
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f8f3 	bl	8004ebc <USB_FlushTxFifo>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d001      	beq.n	8004ce0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 f91f 	bl	8004f24 <USB_FlushRxFifo>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d001      	beq.n	8004cf0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d02:	461a      	mov	r2, r3
 8004d04:	2300      	movs	r3, #0
 8004d06:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0e:	461a      	mov	r2, r3
 8004d10:	2300      	movs	r3, #0
 8004d12:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d14:	2300      	movs	r3, #0
 8004d16:	613b      	str	r3, [r7, #16]
 8004d18:	e043      	b.n	8004da2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	015a      	lsls	r2, r3, #5
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	4413      	add	r3, r2
 8004d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d30:	d118      	bne.n	8004d64 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10a      	bne.n	8004d4e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d44:	461a      	mov	r2, r3
 8004d46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d4a:	6013      	str	r3, [r2, #0]
 8004d4c:	e013      	b.n	8004d76 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d60:	6013      	str	r3, [r2, #0]
 8004d62:	e008      	b.n	8004d76 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d70:	461a      	mov	r2, r3
 8004d72:	2300      	movs	r3, #0
 8004d74:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	015a      	lsls	r2, r3, #5
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d82:	461a      	mov	r2, r3
 8004d84:	2300      	movs	r3, #0
 8004d86:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	015a      	lsls	r2, r3, #5
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d94:	461a      	mov	r2, r3
 8004d96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	613b      	str	r3, [r7, #16]
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d3b7      	bcc.n	8004d1a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004daa:	2300      	movs	r3, #0
 8004dac:	613b      	str	r3, [r7, #16]
 8004dae:	e043      	b.n	8004e38 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dc6:	d118      	bne.n	8004dfa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10a      	bne.n	8004de4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	015a      	lsls	r2, r3, #5
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dda:	461a      	mov	r2, r3
 8004ddc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	e013      	b.n	8004e0c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df0:	461a      	mov	r2, r3
 8004df2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004df6:	6013      	str	r3, [r2, #0]
 8004df8:	e008      	b.n	8004e0c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e06:	461a      	mov	r2, r3
 8004e08:	2300      	movs	r3, #0
 8004e0a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e18:	461a      	mov	r2, r3
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	015a      	lsls	r2, r3, #5
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	4413      	add	r3, r2
 8004e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e30:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	3301      	adds	r3, #1
 8004e36:	613b      	str	r3, [r7, #16]
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d3b7      	bcc.n	8004db0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e52:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004e60:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d105      	bne.n	8004e74 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	f043 0210 	orr.w	r2, r3, #16
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	699a      	ldr	r2, [r3, #24]
 8004e78:	4b0e      	ldr	r3, [pc, #56]	; (8004eb4 <USB_DevInit+0x2b4>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d005      	beq.n	8004e92 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	f043 0208 	orr.w	r2, r3, #8
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d105      	bne.n	8004ea4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	699a      	ldr	r2, [r3, #24]
 8004e9c:	4b06      	ldr	r3, [pc, #24]	; (8004eb8 <USB_DevInit+0x2b8>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3718      	adds	r7, #24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004eb0:	b004      	add	sp, #16
 8004eb2:	4770      	bx	lr
 8004eb4:	803c3800 	.word	0x803c3800
 8004eb8:	40000004 	.word	0x40000004

08004ebc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4a13      	ldr	r2, [pc, #76]	; (8004f20 <USB_FlushTxFifo+0x64>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d901      	bls.n	8004edc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e01b      	b.n	8004f14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	daf2      	bge.n	8004eca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	019b      	lsls	r3, r3, #6
 8004eec:	f043 0220 	orr.w	r2, r3, #32
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4a08      	ldr	r2, [pc, #32]	; (8004f20 <USB_FlushTxFifo+0x64>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d901      	bls.n	8004f06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e006      	b.n	8004f14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	f003 0320 	and.w	r3, r3, #32
 8004f0e:	2b20      	cmp	r3, #32
 8004f10:	d0f0      	beq.n	8004ef4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	00030d40 	.word	0x00030d40

08004f24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	3301      	adds	r3, #1
 8004f34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	4a11      	ldr	r2, [pc, #68]	; (8004f80 <USB_FlushRxFifo+0x5c>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d901      	bls.n	8004f42 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e018      	b.n	8004f74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	daf2      	bge.n	8004f30 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2210      	movs	r2, #16
 8004f52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	3301      	adds	r3, #1
 8004f58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	4a08      	ldr	r2, [pc, #32]	; (8004f80 <USB_FlushRxFifo+0x5c>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d901      	bls.n	8004f66 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e006      	b.n	8004f74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	f003 0310 	and.w	r3, r3, #16
 8004f6e:	2b10      	cmp	r3, #16
 8004f70:	d0f0      	beq.n	8004f54 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	00030d40 	.word	0x00030d40

08004f84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	78fb      	ldrb	r3, [r7, #3]
 8004f9e:	68f9      	ldr	r1, [r7, #12]
 8004fa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b085      	sub	sp, #20
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004fd0:	f023 0303 	bic.w	r3, r3, #3
 8004fd4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fe4:	f043 0302 	orr.w	r3, r3, #2
 8004fe8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	f003 0301 	and.w	r3, r3, #1
}
 8005008:	4618      	mov	r0, r3
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800501c:	2300      	movs	r3, #0
 800501e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	3301      	adds	r3, #1
 8005024:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	4a13      	ldr	r2, [pc, #76]	; (8005078 <USB_CoreReset+0x64>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d901      	bls.n	8005032 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e01b      	b.n	800506a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	2b00      	cmp	r3, #0
 8005038:	daf2      	bge.n	8005020 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800503a:	2300      	movs	r3, #0
 800503c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	f043 0201 	orr.w	r2, r3, #1
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	3301      	adds	r3, #1
 800504e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	4a09      	ldr	r2, [pc, #36]	; (8005078 <USB_CoreReset+0x64>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d901      	bls.n	800505c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e006      	b.n	800506a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b01      	cmp	r3, #1
 8005066:	d0f0      	beq.n	800504a <USB_CoreReset+0x36>

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	00030d40 	.word	0x00030d40

0800507c <__cvt>:
 800507c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800507e:	ed2d 8b02 	vpush	{d8}
 8005082:	eeb0 8b40 	vmov.f64	d8, d0
 8005086:	b085      	sub	sp, #20
 8005088:	4617      	mov	r7, r2
 800508a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800508c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800508e:	ee18 2a90 	vmov	r2, s17
 8005092:	f025 0520 	bic.w	r5, r5, #32
 8005096:	2a00      	cmp	r2, #0
 8005098:	bfb6      	itet	lt
 800509a:	222d      	movlt	r2, #45	; 0x2d
 800509c:	2200      	movge	r2, #0
 800509e:	eeb1 8b40 	vneglt.f64	d8, d0
 80050a2:	2d46      	cmp	r5, #70	; 0x46
 80050a4:	460c      	mov	r4, r1
 80050a6:	701a      	strb	r2, [r3, #0]
 80050a8:	d004      	beq.n	80050b4 <__cvt+0x38>
 80050aa:	2d45      	cmp	r5, #69	; 0x45
 80050ac:	d100      	bne.n	80050b0 <__cvt+0x34>
 80050ae:	3401      	adds	r4, #1
 80050b0:	2102      	movs	r1, #2
 80050b2:	e000      	b.n	80050b6 <__cvt+0x3a>
 80050b4:	2103      	movs	r1, #3
 80050b6:	ab03      	add	r3, sp, #12
 80050b8:	9301      	str	r3, [sp, #4]
 80050ba:	ab02      	add	r3, sp, #8
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	4622      	mov	r2, r4
 80050c0:	4633      	mov	r3, r6
 80050c2:	eeb0 0b48 	vmov.f64	d0, d8
 80050c6:	f000 fe43 	bl	8005d50 <_dtoa_r>
 80050ca:	2d47      	cmp	r5, #71	; 0x47
 80050cc:	d101      	bne.n	80050d2 <__cvt+0x56>
 80050ce:	07fb      	lsls	r3, r7, #31
 80050d0:	d51a      	bpl.n	8005108 <__cvt+0x8c>
 80050d2:	2d46      	cmp	r5, #70	; 0x46
 80050d4:	eb00 0204 	add.w	r2, r0, r4
 80050d8:	d10c      	bne.n	80050f4 <__cvt+0x78>
 80050da:	7803      	ldrb	r3, [r0, #0]
 80050dc:	2b30      	cmp	r3, #48	; 0x30
 80050de:	d107      	bne.n	80050f0 <__cvt+0x74>
 80050e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80050e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050e8:	bf1c      	itt	ne
 80050ea:	f1c4 0401 	rsbne	r4, r4, #1
 80050ee:	6034      	strne	r4, [r6, #0]
 80050f0:	6833      	ldr	r3, [r6, #0]
 80050f2:	441a      	add	r2, r3
 80050f4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80050f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050fc:	bf08      	it	eq
 80050fe:	9203      	streq	r2, [sp, #12]
 8005100:	2130      	movs	r1, #48	; 0x30
 8005102:	9b03      	ldr	r3, [sp, #12]
 8005104:	4293      	cmp	r3, r2
 8005106:	d307      	bcc.n	8005118 <__cvt+0x9c>
 8005108:	9b03      	ldr	r3, [sp, #12]
 800510a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800510c:	1a1b      	subs	r3, r3, r0
 800510e:	6013      	str	r3, [r2, #0]
 8005110:	b005      	add	sp, #20
 8005112:	ecbd 8b02 	vpop	{d8}
 8005116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005118:	1c5c      	adds	r4, r3, #1
 800511a:	9403      	str	r4, [sp, #12]
 800511c:	7019      	strb	r1, [r3, #0]
 800511e:	e7f0      	b.n	8005102 <__cvt+0x86>

08005120 <__exponent>:
 8005120:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005122:	4603      	mov	r3, r0
 8005124:	2900      	cmp	r1, #0
 8005126:	bfb8      	it	lt
 8005128:	4249      	neglt	r1, r1
 800512a:	f803 2b02 	strb.w	r2, [r3], #2
 800512e:	bfb4      	ite	lt
 8005130:	222d      	movlt	r2, #45	; 0x2d
 8005132:	222b      	movge	r2, #43	; 0x2b
 8005134:	2909      	cmp	r1, #9
 8005136:	7042      	strb	r2, [r0, #1]
 8005138:	dd2a      	ble.n	8005190 <__exponent+0x70>
 800513a:	f10d 0207 	add.w	r2, sp, #7
 800513e:	4617      	mov	r7, r2
 8005140:	260a      	movs	r6, #10
 8005142:	4694      	mov	ip, r2
 8005144:	fb91 f5f6 	sdiv	r5, r1, r6
 8005148:	fb06 1415 	mls	r4, r6, r5, r1
 800514c:	3430      	adds	r4, #48	; 0x30
 800514e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005152:	460c      	mov	r4, r1
 8005154:	2c63      	cmp	r4, #99	; 0x63
 8005156:	f102 32ff 	add.w	r2, r2, #4294967295
 800515a:	4629      	mov	r1, r5
 800515c:	dcf1      	bgt.n	8005142 <__exponent+0x22>
 800515e:	3130      	adds	r1, #48	; 0x30
 8005160:	f1ac 0402 	sub.w	r4, ip, #2
 8005164:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005168:	1c41      	adds	r1, r0, #1
 800516a:	4622      	mov	r2, r4
 800516c:	42ba      	cmp	r2, r7
 800516e:	d30a      	bcc.n	8005186 <__exponent+0x66>
 8005170:	f10d 0209 	add.w	r2, sp, #9
 8005174:	eba2 020c 	sub.w	r2, r2, ip
 8005178:	42bc      	cmp	r4, r7
 800517a:	bf88      	it	hi
 800517c:	2200      	movhi	r2, #0
 800517e:	4413      	add	r3, r2
 8005180:	1a18      	subs	r0, r3, r0
 8005182:	b003      	add	sp, #12
 8005184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005186:	f812 5b01 	ldrb.w	r5, [r2], #1
 800518a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800518e:	e7ed      	b.n	800516c <__exponent+0x4c>
 8005190:	2330      	movs	r3, #48	; 0x30
 8005192:	3130      	adds	r1, #48	; 0x30
 8005194:	7083      	strb	r3, [r0, #2]
 8005196:	70c1      	strb	r1, [r0, #3]
 8005198:	1d03      	adds	r3, r0, #4
 800519a:	e7f1      	b.n	8005180 <__exponent+0x60>
 800519c:	0000      	movs	r0, r0
	...

080051a0 <_printf_float>:
 80051a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a4:	b08b      	sub	sp, #44	; 0x2c
 80051a6:	460c      	mov	r4, r1
 80051a8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80051ac:	4616      	mov	r6, r2
 80051ae:	461f      	mov	r7, r3
 80051b0:	4605      	mov	r5, r0
 80051b2:	f000 fccd 	bl	8005b50 <_localeconv_r>
 80051b6:	f8d0 b000 	ldr.w	fp, [r0]
 80051ba:	4658      	mov	r0, fp
 80051bc:	f7fb f890 	bl	80002e0 <strlen>
 80051c0:	2300      	movs	r3, #0
 80051c2:	9308      	str	r3, [sp, #32]
 80051c4:	f8d8 3000 	ldr.w	r3, [r8]
 80051c8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80051cc:	6822      	ldr	r2, [r4, #0]
 80051ce:	3307      	adds	r3, #7
 80051d0:	f023 0307 	bic.w	r3, r3, #7
 80051d4:	f103 0108 	add.w	r1, r3, #8
 80051d8:	f8c8 1000 	str.w	r1, [r8]
 80051dc:	ed93 0b00 	vldr	d0, [r3]
 80051e0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8005440 <_printf_float+0x2a0>
 80051e4:	eeb0 7bc0 	vabs.f64	d7, d0
 80051e8:	eeb4 7b46 	vcmp.f64	d7, d6
 80051ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80051f4:	4682      	mov	sl, r0
 80051f6:	dd24      	ble.n	8005242 <_printf_float+0xa2>
 80051f8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80051fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005200:	d502      	bpl.n	8005208 <_printf_float+0x68>
 8005202:	232d      	movs	r3, #45	; 0x2d
 8005204:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005208:	498f      	ldr	r1, [pc, #572]	; (8005448 <_printf_float+0x2a8>)
 800520a:	4b90      	ldr	r3, [pc, #576]	; (800544c <_printf_float+0x2ac>)
 800520c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005210:	bf94      	ite	ls
 8005212:	4688      	movls	r8, r1
 8005214:	4698      	movhi	r8, r3
 8005216:	2303      	movs	r3, #3
 8005218:	6123      	str	r3, [r4, #16]
 800521a:	f022 0204 	bic.w	r2, r2, #4
 800521e:	2300      	movs	r3, #0
 8005220:	6022      	str	r2, [r4, #0]
 8005222:	9304      	str	r3, [sp, #16]
 8005224:	9700      	str	r7, [sp, #0]
 8005226:	4633      	mov	r3, r6
 8005228:	aa09      	add	r2, sp, #36	; 0x24
 800522a:	4621      	mov	r1, r4
 800522c:	4628      	mov	r0, r5
 800522e:	f000 f9d1 	bl	80055d4 <_printf_common>
 8005232:	3001      	adds	r0, #1
 8005234:	f040 808a 	bne.w	800534c <_printf_float+0x1ac>
 8005238:	f04f 30ff 	mov.w	r0, #4294967295
 800523c:	b00b      	add	sp, #44	; 0x2c
 800523e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005242:	eeb4 0b40 	vcmp.f64	d0, d0
 8005246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800524a:	d709      	bvc.n	8005260 <_printf_float+0xc0>
 800524c:	ee10 3a90 	vmov	r3, s1
 8005250:	2b00      	cmp	r3, #0
 8005252:	bfbc      	itt	lt
 8005254:	232d      	movlt	r3, #45	; 0x2d
 8005256:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800525a:	497d      	ldr	r1, [pc, #500]	; (8005450 <_printf_float+0x2b0>)
 800525c:	4b7d      	ldr	r3, [pc, #500]	; (8005454 <_printf_float+0x2b4>)
 800525e:	e7d5      	b.n	800520c <_printf_float+0x6c>
 8005260:	6863      	ldr	r3, [r4, #4]
 8005262:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005266:	9104      	str	r1, [sp, #16]
 8005268:	1c59      	adds	r1, r3, #1
 800526a:	d13c      	bne.n	80052e6 <_printf_float+0x146>
 800526c:	2306      	movs	r3, #6
 800526e:	6063      	str	r3, [r4, #4]
 8005270:	2300      	movs	r3, #0
 8005272:	9303      	str	r3, [sp, #12]
 8005274:	ab08      	add	r3, sp, #32
 8005276:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800527a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800527e:	ab07      	add	r3, sp, #28
 8005280:	6861      	ldr	r1, [r4, #4]
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	6022      	str	r2, [r4, #0]
 8005286:	f10d 031b 	add.w	r3, sp, #27
 800528a:	4628      	mov	r0, r5
 800528c:	f7ff fef6 	bl	800507c <__cvt>
 8005290:	9b04      	ldr	r3, [sp, #16]
 8005292:	9907      	ldr	r1, [sp, #28]
 8005294:	2b47      	cmp	r3, #71	; 0x47
 8005296:	4680      	mov	r8, r0
 8005298:	d108      	bne.n	80052ac <_printf_float+0x10c>
 800529a:	1cc8      	adds	r0, r1, #3
 800529c:	db02      	blt.n	80052a4 <_printf_float+0x104>
 800529e:	6863      	ldr	r3, [r4, #4]
 80052a0:	4299      	cmp	r1, r3
 80052a2:	dd41      	ble.n	8005328 <_printf_float+0x188>
 80052a4:	f1a9 0902 	sub.w	r9, r9, #2
 80052a8:	fa5f f989 	uxtb.w	r9, r9
 80052ac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80052b0:	d820      	bhi.n	80052f4 <_printf_float+0x154>
 80052b2:	3901      	subs	r1, #1
 80052b4:	464a      	mov	r2, r9
 80052b6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80052ba:	9107      	str	r1, [sp, #28]
 80052bc:	f7ff ff30 	bl	8005120 <__exponent>
 80052c0:	9a08      	ldr	r2, [sp, #32]
 80052c2:	9004      	str	r0, [sp, #16]
 80052c4:	1813      	adds	r3, r2, r0
 80052c6:	2a01      	cmp	r2, #1
 80052c8:	6123      	str	r3, [r4, #16]
 80052ca:	dc02      	bgt.n	80052d2 <_printf_float+0x132>
 80052cc:	6822      	ldr	r2, [r4, #0]
 80052ce:	07d2      	lsls	r2, r2, #31
 80052d0:	d501      	bpl.n	80052d6 <_printf_float+0x136>
 80052d2:	3301      	adds	r3, #1
 80052d4:	6123      	str	r3, [r4, #16]
 80052d6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d0a2      	beq.n	8005224 <_printf_float+0x84>
 80052de:	232d      	movs	r3, #45	; 0x2d
 80052e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052e4:	e79e      	b.n	8005224 <_printf_float+0x84>
 80052e6:	9904      	ldr	r1, [sp, #16]
 80052e8:	2947      	cmp	r1, #71	; 0x47
 80052ea:	d1c1      	bne.n	8005270 <_printf_float+0xd0>
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1bf      	bne.n	8005270 <_printf_float+0xd0>
 80052f0:	2301      	movs	r3, #1
 80052f2:	e7bc      	b.n	800526e <_printf_float+0xce>
 80052f4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80052f8:	d118      	bne.n	800532c <_printf_float+0x18c>
 80052fa:	2900      	cmp	r1, #0
 80052fc:	6863      	ldr	r3, [r4, #4]
 80052fe:	dd0b      	ble.n	8005318 <_printf_float+0x178>
 8005300:	6121      	str	r1, [r4, #16]
 8005302:	b913      	cbnz	r3, 800530a <_printf_float+0x16a>
 8005304:	6822      	ldr	r2, [r4, #0]
 8005306:	07d0      	lsls	r0, r2, #31
 8005308:	d502      	bpl.n	8005310 <_printf_float+0x170>
 800530a:	3301      	adds	r3, #1
 800530c:	440b      	add	r3, r1
 800530e:	6123      	str	r3, [r4, #16]
 8005310:	2300      	movs	r3, #0
 8005312:	65a1      	str	r1, [r4, #88]	; 0x58
 8005314:	9304      	str	r3, [sp, #16]
 8005316:	e7de      	b.n	80052d6 <_printf_float+0x136>
 8005318:	b913      	cbnz	r3, 8005320 <_printf_float+0x180>
 800531a:	6822      	ldr	r2, [r4, #0]
 800531c:	07d2      	lsls	r2, r2, #31
 800531e:	d501      	bpl.n	8005324 <_printf_float+0x184>
 8005320:	3302      	adds	r3, #2
 8005322:	e7f4      	b.n	800530e <_printf_float+0x16e>
 8005324:	2301      	movs	r3, #1
 8005326:	e7f2      	b.n	800530e <_printf_float+0x16e>
 8005328:	f04f 0967 	mov.w	r9, #103	; 0x67
 800532c:	9b08      	ldr	r3, [sp, #32]
 800532e:	4299      	cmp	r1, r3
 8005330:	db05      	blt.n	800533e <_printf_float+0x19e>
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	6121      	str	r1, [r4, #16]
 8005336:	07d8      	lsls	r0, r3, #31
 8005338:	d5ea      	bpl.n	8005310 <_printf_float+0x170>
 800533a:	1c4b      	adds	r3, r1, #1
 800533c:	e7e7      	b.n	800530e <_printf_float+0x16e>
 800533e:	2900      	cmp	r1, #0
 8005340:	bfd4      	ite	le
 8005342:	f1c1 0202 	rsble	r2, r1, #2
 8005346:	2201      	movgt	r2, #1
 8005348:	4413      	add	r3, r2
 800534a:	e7e0      	b.n	800530e <_printf_float+0x16e>
 800534c:	6823      	ldr	r3, [r4, #0]
 800534e:	055a      	lsls	r2, r3, #21
 8005350:	d407      	bmi.n	8005362 <_printf_float+0x1c2>
 8005352:	6923      	ldr	r3, [r4, #16]
 8005354:	4642      	mov	r2, r8
 8005356:	4631      	mov	r1, r6
 8005358:	4628      	mov	r0, r5
 800535a:	47b8      	blx	r7
 800535c:	3001      	adds	r0, #1
 800535e:	d12a      	bne.n	80053b6 <_printf_float+0x216>
 8005360:	e76a      	b.n	8005238 <_printf_float+0x98>
 8005362:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005366:	f240 80e0 	bls.w	800552a <_printf_float+0x38a>
 800536a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800536e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005376:	d133      	bne.n	80053e0 <_printf_float+0x240>
 8005378:	4a37      	ldr	r2, [pc, #220]	; (8005458 <_printf_float+0x2b8>)
 800537a:	2301      	movs	r3, #1
 800537c:	4631      	mov	r1, r6
 800537e:	4628      	mov	r0, r5
 8005380:	47b8      	blx	r7
 8005382:	3001      	adds	r0, #1
 8005384:	f43f af58 	beq.w	8005238 <_printf_float+0x98>
 8005388:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800538c:	429a      	cmp	r2, r3
 800538e:	db02      	blt.n	8005396 <_printf_float+0x1f6>
 8005390:	6823      	ldr	r3, [r4, #0]
 8005392:	07d8      	lsls	r0, r3, #31
 8005394:	d50f      	bpl.n	80053b6 <_printf_float+0x216>
 8005396:	4653      	mov	r3, sl
 8005398:	465a      	mov	r2, fp
 800539a:	4631      	mov	r1, r6
 800539c:	4628      	mov	r0, r5
 800539e:	47b8      	blx	r7
 80053a0:	3001      	adds	r0, #1
 80053a2:	f43f af49 	beq.w	8005238 <_printf_float+0x98>
 80053a6:	f04f 0800 	mov.w	r8, #0
 80053aa:	f104 091a 	add.w	r9, r4, #26
 80053ae:	9b08      	ldr	r3, [sp, #32]
 80053b0:	3b01      	subs	r3, #1
 80053b2:	4543      	cmp	r3, r8
 80053b4:	dc09      	bgt.n	80053ca <_printf_float+0x22a>
 80053b6:	6823      	ldr	r3, [r4, #0]
 80053b8:	079b      	lsls	r3, r3, #30
 80053ba:	f100 8106 	bmi.w	80055ca <_printf_float+0x42a>
 80053be:	68e0      	ldr	r0, [r4, #12]
 80053c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053c2:	4298      	cmp	r0, r3
 80053c4:	bfb8      	it	lt
 80053c6:	4618      	movlt	r0, r3
 80053c8:	e738      	b.n	800523c <_printf_float+0x9c>
 80053ca:	2301      	movs	r3, #1
 80053cc:	464a      	mov	r2, r9
 80053ce:	4631      	mov	r1, r6
 80053d0:	4628      	mov	r0, r5
 80053d2:	47b8      	blx	r7
 80053d4:	3001      	adds	r0, #1
 80053d6:	f43f af2f 	beq.w	8005238 <_printf_float+0x98>
 80053da:	f108 0801 	add.w	r8, r8, #1
 80053de:	e7e6      	b.n	80053ae <_printf_float+0x20e>
 80053e0:	9b07      	ldr	r3, [sp, #28]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	dc3a      	bgt.n	800545c <_printf_float+0x2bc>
 80053e6:	4a1c      	ldr	r2, [pc, #112]	; (8005458 <_printf_float+0x2b8>)
 80053e8:	2301      	movs	r3, #1
 80053ea:	4631      	mov	r1, r6
 80053ec:	4628      	mov	r0, r5
 80053ee:	47b8      	blx	r7
 80053f0:	3001      	adds	r0, #1
 80053f2:	f43f af21 	beq.w	8005238 <_printf_float+0x98>
 80053f6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	d102      	bne.n	8005404 <_printf_float+0x264>
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	07d9      	lsls	r1, r3, #31
 8005402:	d5d8      	bpl.n	80053b6 <_printf_float+0x216>
 8005404:	4653      	mov	r3, sl
 8005406:	465a      	mov	r2, fp
 8005408:	4631      	mov	r1, r6
 800540a:	4628      	mov	r0, r5
 800540c:	47b8      	blx	r7
 800540e:	3001      	adds	r0, #1
 8005410:	f43f af12 	beq.w	8005238 <_printf_float+0x98>
 8005414:	f04f 0900 	mov.w	r9, #0
 8005418:	f104 0a1a 	add.w	sl, r4, #26
 800541c:	9b07      	ldr	r3, [sp, #28]
 800541e:	425b      	negs	r3, r3
 8005420:	454b      	cmp	r3, r9
 8005422:	dc01      	bgt.n	8005428 <_printf_float+0x288>
 8005424:	9b08      	ldr	r3, [sp, #32]
 8005426:	e795      	b.n	8005354 <_printf_float+0x1b4>
 8005428:	2301      	movs	r3, #1
 800542a:	4652      	mov	r2, sl
 800542c:	4631      	mov	r1, r6
 800542e:	4628      	mov	r0, r5
 8005430:	47b8      	blx	r7
 8005432:	3001      	adds	r0, #1
 8005434:	f43f af00 	beq.w	8005238 <_printf_float+0x98>
 8005438:	f109 0901 	add.w	r9, r9, #1
 800543c:	e7ee      	b.n	800541c <_printf_float+0x27c>
 800543e:	bf00      	nop
 8005440:	ffffffff 	.word	0xffffffff
 8005444:	7fefffff 	.word	0x7fefffff
 8005448:	08007c74 	.word	0x08007c74
 800544c:	08007c78 	.word	0x08007c78
 8005450:	08007c7c 	.word	0x08007c7c
 8005454:	08007c80 	.word	0x08007c80
 8005458:	08007c84 	.word	0x08007c84
 800545c:	9a08      	ldr	r2, [sp, #32]
 800545e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005460:	429a      	cmp	r2, r3
 8005462:	bfa8      	it	ge
 8005464:	461a      	movge	r2, r3
 8005466:	2a00      	cmp	r2, #0
 8005468:	4691      	mov	r9, r2
 800546a:	dc38      	bgt.n	80054de <_printf_float+0x33e>
 800546c:	2300      	movs	r3, #0
 800546e:	9305      	str	r3, [sp, #20]
 8005470:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005474:	f104 021a 	add.w	r2, r4, #26
 8005478:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800547a:	9905      	ldr	r1, [sp, #20]
 800547c:	9304      	str	r3, [sp, #16]
 800547e:	eba3 0309 	sub.w	r3, r3, r9
 8005482:	428b      	cmp	r3, r1
 8005484:	dc33      	bgt.n	80054ee <_printf_float+0x34e>
 8005486:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800548a:	429a      	cmp	r2, r3
 800548c:	db3c      	blt.n	8005508 <_printf_float+0x368>
 800548e:	6823      	ldr	r3, [r4, #0]
 8005490:	07da      	lsls	r2, r3, #31
 8005492:	d439      	bmi.n	8005508 <_printf_float+0x368>
 8005494:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8005498:	eba2 0903 	sub.w	r9, r2, r3
 800549c:	9b04      	ldr	r3, [sp, #16]
 800549e:	1ad2      	subs	r2, r2, r3
 80054a0:	4591      	cmp	r9, r2
 80054a2:	bfa8      	it	ge
 80054a4:	4691      	movge	r9, r2
 80054a6:	f1b9 0f00 	cmp.w	r9, #0
 80054aa:	dc35      	bgt.n	8005518 <_printf_float+0x378>
 80054ac:	f04f 0800 	mov.w	r8, #0
 80054b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054b4:	f104 0a1a 	add.w	sl, r4, #26
 80054b8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80054bc:	1a9b      	subs	r3, r3, r2
 80054be:	eba3 0309 	sub.w	r3, r3, r9
 80054c2:	4543      	cmp	r3, r8
 80054c4:	f77f af77 	ble.w	80053b6 <_printf_float+0x216>
 80054c8:	2301      	movs	r3, #1
 80054ca:	4652      	mov	r2, sl
 80054cc:	4631      	mov	r1, r6
 80054ce:	4628      	mov	r0, r5
 80054d0:	47b8      	blx	r7
 80054d2:	3001      	adds	r0, #1
 80054d4:	f43f aeb0 	beq.w	8005238 <_printf_float+0x98>
 80054d8:	f108 0801 	add.w	r8, r8, #1
 80054dc:	e7ec      	b.n	80054b8 <_printf_float+0x318>
 80054de:	4613      	mov	r3, r2
 80054e0:	4631      	mov	r1, r6
 80054e2:	4642      	mov	r2, r8
 80054e4:	4628      	mov	r0, r5
 80054e6:	47b8      	blx	r7
 80054e8:	3001      	adds	r0, #1
 80054ea:	d1bf      	bne.n	800546c <_printf_float+0x2cc>
 80054ec:	e6a4      	b.n	8005238 <_printf_float+0x98>
 80054ee:	2301      	movs	r3, #1
 80054f0:	4631      	mov	r1, r6
 80054f2:	4628      	mov	r0, r5
 80054f4:	9204      	str	r2, [sp, #16]
 80054f6:	47b8      	blx	r7
 80054f8:	3001      	adds	r0, #1
 80054fa:	f43f ae9d 	beq.w	8005238 <_printf_float+0x98>
 80054fe:	9b05      	ldr	r3, [sp, #20]
 8005500:	9a04      	ldr	r2, [sp, #16]
 8005502:	3301      	adds	r3, #1
 8005504:	9305      	str	r3, [sp, #20]
 8005506:	e7b7      	b.n	8005478 <_printf_float+0x2d8>
 8005508:	4653      	mov	r3, sl
 800550a:	465a      	mov	r2, fp
 800550c:	4631      	mov	r1, r6
 800550e:	4628      	mov	r0, r5
 8005510:	47b8      	blx	r7
 8005512:	3001      	adds	r0, #1
 8005514:	d1be      	bne.n	8005494 <_printf_float+0x2f4>
 8005516:	e68f      	b.n	8005238 <_printf_float+0x98>
 8005518:	9a04      	ldr	r2, [sp, #16]
 800551a:	464b      	mov	r3, r9
 800551c:	4442      	add	r2, r8
 800551e:	4631      	mov	r1, r6
 8005520:	4628      	mov	r0, r5
 8005522:	47b8      	blx	r7
 8005524:	3001      	adds	r0, #1
 8005526:	d1c1      	bne.n	80054ac <_printf_float+0x30c>
 8005528:	e686      	b.n	8005238 <_printf_float+0x98>
 800552a:	9a08      	ldr	r2, [sp, #32]
 800552c:	2a01      	cmp	r2, #1
 800552e:	dc01      	bgt.n	8005534 <_printf_float+0x394>
 8005530:	07db      	lsls	r3, r3, #31
 8005532:	d537      	bpl.n	80055a4 <_printf_float+0x404>
 8005534:	2301      	movs	r3, #1
 8005536:	4642      	mov	r2, r8
 8005538:	4631      	mov	r1, r6
 800553a:	4628      	mov	r0, r5
 800553c:	47b8      	blx	r7
 800553e:	3001      	adds	r0, #1
 8005540:	f43f ae7a 	beq.w	8005238 <_printf_float+0x98>
 8005544:	4653      	mov	r3, sl
 8005546:	465a      	mov	r2, fp
 8005548:	4631      	mov	r1, r6
 800554a:	4628      	mov	r0, r5
 800554c:	47b8      	blx	r7
 800554e:	3001      	adds	r0, #1
 8005550:	f43f ae72 	beq.w	8005238 <_printf_float+0x98>
 8005554:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005558:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800555c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005560:	9b08      	ldr	r3, [sp, #32]
 8005562:	d01a      	beq.n	800559a <_printf_float+0x3fa>
 8005564:	3b01      	subs	r3, #1
 8005566:	f108 0201 	add.w	r2, r8, #1
 800556a:	4631      	mov	r1, r6
 800556c:	4628      	mov	r0, r5
 800556e:	47b8      	blx	r7
 8005570:	3001      	adds	r0, #1
 8005572:	d10e      	bne.n	8005592 <_printf_float+0x3f2>
 8005574:	e660      	b.n	8005238 <_printf_float+0x98>
 8005576:	2301      	movs	r3, #1
 8005578:	464a      	mov	r2, r9
 800557a:	4631      	mov	r1, r6
 800557c:	4628      	mov	r0, r5
 800557e:	47b8      	blx	r7
 8005580:	3001      	adds	r0, #1
 8005582:	f43f ae59 	beq.w	8005238 <_printf_float+0x98>
 8005586:	f108 0801 	add.w	r8, r8, #1
 800558a:	9b08      	ldr	r3, [sp, #32]
 800558c:	3b01      	subs	r3, #1
 800558e:	4543      	cmp	r3, r8
 8005590:	dcf1      	bgt.n	8005576 <_printf_float+0x3d6>
 8005592:	9b04      	ldr	r3, [sp, #16]
 8005594:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005598:	e6dd      	b.n	8005356 <_printf_float+0x1b6>
 800559a:	f04f 0800 	mov.w	r8, #0
 800559e:	f104 091a 	add.w	r9, r4, #26
 80055a2:	e7f2      	b.n	800558a <_printf_float+0x3ea>
 80055a4:	2301      	movs	r3, #1
 80055a6:	4642      	mov	r2, r8
 80055a8:	e7df      	b.n	800556a <_printf_float+0x3ca>
 80055aa:	2301      	movs	r3, #1
 80055ac:	464a      	mov	r2, r9
 80055ae:	4631      	mov	r1, r6
 80055b0:	4628      	mov	r0, r5
 80055b2:	47b8      	blx	r7
 80055b4:	3001      	adds	r0, #1
 80055b6:	f43f ae3f 	beq.w	8005238 <_printf_float+0x98>
 80055ba:	f108 0801 	add.w	r8, r8, #1
 80055be:	68e3      	ldr	r3, [r4, #12]
 80055c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055c2:	1a5b      	subs	r3, r3, r1
 80055c4:	4543      	cmp	r3, r8
 80055c6:	dcf0      	bgt.n	80055aa <_printf_float+0x40a>
 80055c8:	e6f9      	b.n	80053be <_printf_float+0x21e>
 80055ca:	f04f 0800 	mov.w	r8, #0
 80055ce:	f104 0919 	add.w	r9, r4, #25
 80055d2:	e7f4      	b.n	80055be <_printf_float+0x41e>

080055d4 <_printf_common>:
 80055d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055d8:	4616      	mov	r6, r2
 80055da:	4699      	mov	r9, r3
 80055dc:	688a      	ldr	r2, [r1, #8]
 80055de:	690b      	ldr	r3, [r1, #16]
 80055e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055e4:	4293      	cmp	r3, r2
 80055e6:	bfb8      	it	lt
 80055e8:	4613      	movlt	r3, r2
 80055ea:	6033      	str	r3, [r6, #0]
 80055ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055f0:	4607      	mov	r7, r0
 80055f2:	460c      	mov	r4, r1
 80055f4:	b10a      	cbz	r2, 80055fa <_printf_common+0x26>
 80055f6:	3301      	adds	r3, #1
 80055f8:	6033      	str	r3, [r6, #0]
 80055fa:	6823      	ldr	r3, [r4, #0]
 80055fc:	0699      	lsls	r1, r3, #26
 80055fe:	bf42      	ittt	mi
 8005600:	6833      	ldrmi	r3, [r6, #0]
 8005602:	3302      	addmi	r3, #2
 8005604:	6033      	strmi	r3, [r6, #0]
 8005606:	6825      	ldr	r5, [r4, #0]
 8005608:	f015 0506 	ands.w	r5, r5, #6
 800560c:	d106      	bne.n	800561c <_printf_common+0x48>
 800560e:	f104 0a19 	add.w	sl, r4, #25
 8005612:	68e3      	ldr	r3, [r4, #12]
 8005614:	6832      	ldr	r2, [r6, #0]
 8005616:	1a9b      	subs	r3, r3, r2
 8005618:	42ab      	cmp	r3, r5
 800561a:	dc26      	bgt.n	800566a <_printf_common+0x96>
 800561c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005620:	1e13      	subs	r3, r2, #0
 8005622:	6822      	ldr	r2, [r4, #0]
 8005624:	bf18      	it	ne
 8005626:	2301      	movne	r3, #1
 8005628:	0692      	lsls	r2, r2, #26
 800562a:	d42b      	bmi.n	8005684 <_printf_common+0xb0>
 800562c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005630:	4649      	mov	r1, r9
 8005632:	4638      	mov	r0, r7
 8005634:	47c0      	blx	r8
 8005636:	3001      	adds	r0, #1
 8005638:	d01e      	beq.n	8005678 <_printf_common+0xa4>
 800563a:	6823      	ldr	r3, [r4, #0]
 800563c:	6922      	ldr	r2, [r4, #16]
 800563e:	f003 0306 	and.w	r3, r3, #6
 8005642:	2b04      	cmp	r3, #4
 8005644:	bf02      	ittt	eq
 8005646:	68e5      	ldreq	r5, [r4, #12]
 8005648:	6833      	ldreq	r3, [r6, #0]
 800564a:	1aed      	subeq	r5, r5, r3
 800564c:	68a3      	ldr	r3, [r4, #8]
 800564e:	bf0c      	ite	eq
 8005650:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005654:	2500      	movne	r5, #0
 8005656:	4293      	cmp	r3, r2
 8005658:	bfc4      	itt	gt
 800565a:	1a9b      	subgt	r3, r3, r2
 800565c:	18ed      	addgt	r5, r5, r3
 800565e:	2600      	movs	r6, #0
 8005660:	341a      	adds	r4, #26
 8005662:	42b5      	cmp	r5, r6
 8005664:	d11a      	bne.n	800569c <_printf_common+0xc8>
 8005666:	2000      	movs	r0, #0
 8005668:	e008      	b.n	800567c <_printf_common+0xa8>
 800566a:	2301      	movs	r3, #1
 800566c:	4652      	mov	r2, sl
 800566e:	4649      	mov	r1, r9
 8005670:	4638      	mov	r0, r7
 8005672:	47c0      	blx	r8
 8005674:	3001      	adds	r0, #1
 8005676:	d103      	bne.n	8005680 <_printf_common+0xac>
 8005678:	f04f 30ff 	mov.w	r0, #4294967295
 800567c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005680:	3501      	adds	r5, #1
 8005682:	e7c6      	b.n	8005612 <_printf_common+0x3e>
 8005684:	18e1      	adds	r1, r4, r3
 8005686:	1c5a      	adds	r2, r3, #1
 8005688:	2030      	movs	r0, #48	; 0x30
 800568a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800568e:	4422      	add	r2, r4
 8005690:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005694:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005698:	3302      	adds	r3, #2
 800569a:	e7c7      	b.n	800562c <_printf_common+0x58>
 800569c:	2301      	movs	r3, #1
 800569e:	4622      	mov	r2, r4
 80056a0:	4649      	mov	r1, r9
 80056a2:	4638      	mov	r0, r7
 80056a4:	47c0      	blx	r8
 80056a6:	3001      	adds	r0, #1
 80056a8:	d0e6      	beq.n	8005678 <_printf_common+0xa4>
 80056aa:	3601      	adds	r6, #1
 80056ac:	e7d9      	b.n	8005662 <_printf_common+0x8e>
	...

080056b0 <_printf_i>:
 80056b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056b4:	7e0f      	ldrb	r7, [r1, #24]
 80056b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80056b8:	2f78      	cmp	r7, #120	; 0x78
 80056ba:	4691      	mov	r9, r2
 80056bc:	4680      	mov	r8, r0
 80056be:	460c      	mov	r4, r1
 80056c0:	469a      	mov	sl, r3
 80056c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80056c6:	d807      	bhi.n	80056d8 <_printf_i+0x28>
 80056c8:	2f62      	cmp	r7, #98	; 0x62
 80056ca:	d80a      	bhi.n	80056e2 <_printf_i+0x32>
 80056cc:	2f00      	cmp	r7, #0
 80056ce:	f000 80d4 	beq.w	800587a <_printf_i+0x1ca>
 80056d2:	2f58      	cmp	r7, #88	; 0x58
 80056d4:	f000 80c0 	beq.w	8005858 <_printf_i+0x1a8>
 80056d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056e0:	e03a      	b.n	8005758 <_printf_i+0xa8>
 80056e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056e6:	2b15      	cmp	r3, #21
 80056e8:	d8f6      	bhi.n	80056d8 <_printf_i+0x28>
 80056ea:	a101      	add	r1, pc, #4	; (adr r1, 80056f0 <_printf_i+0x40>)
 80056ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056f0:	08005749 	.word	0x08005749
 80056f4:	0800575d 	.word	0x0800575d
 80056f8:	080056d9 	.word	0x080056d9
 80056fc:	080056d9 	.word	0x080056d9
 8005700:	080056d9 	.word	0x080056d9
 8005704:	080056d9 	.word	0x080056d9
 8005708:	0800575d 	.word	0x0800575d
 800570c:	080056d9 	.word	0x080056d9
 8005710:	080056d9 	.word	0x080056d9
 8005714:	080056d9 	.word	0x080056d9
 8005718:	080056d9 	.word	0x080056d9
 800571c:	08005861 	.word	0x08005861
 8005720:	08005789 	.word	0x08005789
 8005724:	0800581b 	.word	0x0800581b
 8005728:	080056d9 	.word	0x080056d9
 800572c:	080056d9 	.word	0x080056d9
 8005730:	08005883 	.word	0x08005883
 8005734:	080056d9 	.word	0x080056d9
 8005738:	08005789 	.word	0x08005789
 800573c:	080056d9 	.word	0x080056d9
 8005740:	080056d9 	.word	0x080056d9
 8005744:	08005823 	.word	0x08005823
 8005748:	682b      	ldr	r3, [r5, #0]
 800574a:	1d1a      	adds	r2, r3, #4
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	602a      	str	r2, [r5, #0]
 8005750:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005754:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005758:	2301      	movs	r3, #1
 800575a:	e09f      	b.n	800589c <_printf_i+0x1ec>
 800575c:	6820      	ldr	r0, [r4, #0]
 800575e:	682b      	ldr	r3, [r5, #0]
 8005760:	0607      	lsls	r7, r0, #24
 8005762:	f103 0104 	add.w	r1, r3, #4
 8005766:	6029      	str	r1, [r5, #0]
 8005768:	d501      	bpl.n	800576e <_printf_i+0xbe>
 800576a:	681e      	ldr	r6, [r3, #0]
 800576c:	e003      	b.n	8005776 <_printf_i+0xc6>
 800576e:	0646      	lsls	r6, r0, #25
 8005770:	d5fb      	bpl.n	800576a <_printf_i+0xba>
 8005772:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005776:	2e00      	cmp	r6, #0
 8005778:	da03      	bge.n	8005782 <_printf_i+0xd2>
 800577a:	232d      	movs	r3, #45	; 0x2d
 800577c:	4276      	negs	r6, r6
 800577e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005782:	485a      	ldr	r0, [pc, #360]	; (80058ec <_printf_i+0x23c>)
 8005784:	230a      	movs	r3, #10
 8005786:	e012      	b.n	80057ae <_printf_i+0xfe>
 8005788:	682b      	ldr	r3, [r5, #0]
 800578a:	6820      	ldr	r0, [r4, #0]
 800578c:	1d19      	adds	r1, r3, #4
 800578e:	6029      	str	r1, [r5, #0]
 8005790:	0605      	lsls	r5, r0, #24
 8005792:	d501      	bpl.n	8005798 <_printf_i+0xe8>
 8005794:	681e      	ldr	r6, [r3, #0]
 8005796:	e002      	b.n	800579e <_printf_i+0xee>
 8005798:	0641      	lsls	r1, r0, #25
 800579a:	d5fb      	bpl.n	8005794 <_printf_i+0xe4>
 800579c:	881e      	ldrh	r6, [r3, #0]
 800579e:	4853      	ldr	r0, [pc, #332]	; (80058ec <_printf_i+0x23c>)
 80057a0:	2f6f      	cmp	r7, #111	; 0x6f
 80057a2:	bf0c      	ite	eq
 80057a4:	2308      	moveq	r3, #8
 80057a6:	230a      	movne	r3, #10
 80057a8:	2100      	movs	r1, #0
 80057aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057ae:	6865      	ldr	r5, [r4, #4]
 80057b0:	60a5      	str	r5, [r4, #8]
 80057b2:	2d00      	cmp	r5, #0
 80057b4:	bfa2      	ittt	ge
 80057b6:	6821      	ldrge	r1, [r4, #0]
 80057b8:	f021 0104 	bicge.w	r1, r1, #4
 80057bc:	6021      	strge	r1, [r4, #0]
 80057be:	b90e      	cbnz	r6, 80057c4 <_printf_i+0x114>
 80057c0:	2d00      	cmp	r5, #0
 80057c2:	d04b      	beq.n	800585c <_printf_i+0x1ac>
 80057c4:	4615      	mov	r5, r2
 80057c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80057ca:	fb03 6711 	mls	r7, r3, r1, r6
 80057ce:	5dc7      	ldrb	r7, [r0, r7]
 80057d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80057d4:	4637      	mov	r7, r6
 80057d6:	42bb      	cmp	r3, r7
 80057d8:	460e      	mov	r6, r1
 80057da:	d9f4      	bls.n	80057c6 <_printf_i+0x116>
 80057dc:	2b08      	cmp	r3, #8
 80057de:	d10b      	bne.n	80057f8 <_printf_i+0x148>
 80057e0:	6823      	ldr	r3, [r4, #0]
 80057e2:	07de      	lsls	r6, r3, #31
 80057e4:	d508      	bpl.n	80057f8 <_printf_i+0x148>
 80057e6:	6923      	ldr	r3, [r4, #16]
 80057e8:	6861      	ldr	r1, [r4, #4]
 80057ea:	4299      	cmp	r1, r3
 80057ec:	bfde      	ittt	le
 80057ee:	2330      	movle	r3, #48	; 0x30
 80057f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80057f8:	1b52      	subs	r2, r2, r5
 80057fa:	6122      	str	r2, [r4, #16]
 80057fc:	f8cd a000 	str.w	sl, [sp]
 8005800:	464b      	mov	r3, r9
 8005802:	aa03      	add	r2, sp, #12
 8005804:	4621      	mov	r1, r4
 8005806:	4640      	mov	r0, r8
 8005808:	f7ff fee4 	bl	80055d4 <_printf_common>
 800580c:	3001      	adds	r0, #1
 800580e:	d14a      	bne.n	80058a6 <_printf_i+0x1f6>
 8005810:	f04f 30ff 	mov.w	r0, #4294967295
 8005814:	b004      	add	sp, #16
 8005816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800581a:	6823      	ldr	r3, [r4, #0]
 800581c:	f043 0320 	orr.w	r3, r3, #32
 8005820:	6023      	str	r3, [r4, #0]
 8005822:	4833      	ldr	r0, [pc, #204]	; (80058f0 <_printf_i+0x240>)
 8005824:	2778      	movs	r7, #120	; 0x78
 8005826:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800582a:	6823      	ldr	r3, [r4, #0]
 800582c:	6829      	ldr	r1, [r5, #0]
 800582e:	061f      	lsls	r7, r3, #24
 8005830:	f851 6b04 	ldr.w	r6, [r1], #4
 8005834:	d402      	bmi.n	800583c <_printf_i+0x18c>
 8005836:	065f      	lsls	r7, r3, #25
 8005838:	bf48      	it	mi
 800583a:	b2b6      	uxthmi	r6, r6
 800583c:	07df      	lsls	r7, r3, #31
 800583e:	bf48      	it	mi
 8005840:	f043 0320 	orrmi.w	r3, r3, #32
 8005844:	6029      	str	r1, [r5, #0]
 8005846:	bf48      	it	mi
 8005848:	6023      	strmi	r3, [r4, #0]
 800584a:	b91e      	cbnz	r6, 8005854 <_printf_i+0x1a4>
 800584c:	6823      	ldr	r3, [r4, #0]
 800584e:	f023 0320 	bic.w	r3, r3, #32
 8005852:	6023      	str	r3, [r4, #0]
 8005854:	2310      	movs	r3, #16
 8005856:	e7a7      	b.n	80057a8 <_printf_i+0xf8>
 8005858:	4824      	ldr	r0, [pc, #144]	; (80058ec <_printf_i+0x23c>)
 800585a:	e7e4      	b.n	8005826 <_printf_i+0x176>
 800585c:	4615      	mov	r5, r2
 800585e:	e7bd      	b.n	80057dc <_printf_i+0x12c>
 8005860:	682b      	ldr	r3, [r5, #0]
 8005862:	6826      	ldr	r6, [r4, #0]
 8005864:	6961      	ldr	r1, [r4, #20]
 8005866:	1d18      	adds	r0, r3, #4
 8005868:	6028      	str	r0, [r5, #0]
 800586a:	0635      	lsls	r5, r6, #24
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	d501      	bpl.n	8005874 <_printf_i+0x1c4>
 8005870:	6019      	str	r1, [r3, #0]
 8005872:	e002      	b.n	800587a <_printf_i+0x1ca>
 8005874:	0670      	lsls	r0, r6, #25
 8005876:	d5fb      	bpl.n	8005870 <_printf_i+0x1c0>
 8005878:	8019      	strh	r1, [r3, #0]
 800587a:	2300      	movs	r3, #0
 800587c:	6123      	str	r3, [r4, #16]
 800587e:	4615      	mov	r5, r2
 8005880:	e7bc      	b.n	80057fc <_printf_i+0x14c>
 8005882:	682b      	ldr	r3, [r5, #0]
 8005884:	1d1a      	adds	r2, r3, #4
 8005886:	602a      	str	r2, [r5, #0]
 8005888:	681d      	ldr	r5, [r3, #0]
 800588a:	6862      	ldr	r2, [r4, #4]
 800588c:	2100      	movs	r1, #0
 800588e:	4628      	mov	r0, r5
 8005890:	f7fa fcd6 	bl	8000240 <memchr>
 8005894:	b108      	cbz	r0, 800589a <_printf_i+0x1ea>
 8005896:	1b40      	subs	r0, r0, r5
 8005898:	6060      	str	r0, [r4, #4]
 800589a:	6863      	ldr	r3, [r4, #4]
 800589c:	6123      	str	r3, [r4, #16]
 800589e:	2300      	movs	r3, #0
 80058a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058a4:	e7aa      	b.n	80057fc <_printf_i+0x14c>
 80058a6:	6923      	ldr	r3, [r4, #16]
 80058a8:	462a      	mov	r2, r5
 80058aa:	4649      	mov	r1, r9
 80058ac:	4640      	mov	r0, r8
 80058ae:	47d0      	blx	sl
 80058b0:	3001      	adds	r0, #1
 80058b2:	d0ad      	beq.n	8005810 <_printf_i+0x160>
 80058b4:	6823      	ldr	r3, [r4, #0]
 80058b6:	079b      	lsls	r3, r3, #30
 80058b8:	d413      	bmi.n	80058e2 <_printf_i+0x232>
 80058ba:	68e0      	ldr	r0, [r4, #12]
 80058bc:	9b03      	ldr	r3, [sp, #12]
 80058be:	4298      	cmp	r0, r3
 80058c0:	bfb8      	it	lt
 80058c2:	4618      	movlt	r0, r3
 80058c4:	e7a6      	b.n	8005814 <_printf_i+0x164>
 80058c6:	2301      	movs	r3, #1
 80058c8:	4632      	mov	r2, r6
 80058ca:	4649      	mov	r1, r9
 80058cc:	4640      	mov	r0, r8
 80058ce:	47d0      	blx	sl
 80058d0:	3001      	adds	r0, #1
 80058d2:	d09d      	beq.n	8005810 <_printf_i+0x160>
 80058d4:	3501      	adds	r5, #1
 80058d6:	68e3      	ldr	r3, [r4, #12]
 80058d8:	9903      	ldr	r1, [sp, #12]
 80058da:	1a5b      	subs	r3, r3, r1
 80058dc:	42ab      	cmp	r3, r5
 80058de:	dcf2      	bgt.n	80058c6 <_printf_i+0x216>
 80058e0:	e7eb      	b.n	80058ba <_printf_i+0x20a>
 80058e2:	2500      	movs	r5, #0
 80058e4:	f104 0619 	add.w	r6, r4, #25
 80058e8:	e7f5      	b.n	80058d6 <_printf_i+0x226>
 80058ea:	bf00      	nop
 80058ec:	08007c86 	.word	0x08007c86
 80058f0:	08007c97 	.word	0x08007c97

080058f4 <std>:
 80058f4:	2300      	movs	r3, #0
 80058f6:	b510      	push	{r4, lr}
 80058f8:	4604      	mov	r4, r0
 80058fa:	e9c0 3300 	strd	r3, r3, [r0]
 80058fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005902:	6083      	str	r3, [r0, #8]
 8005904:	8181      	strh	r1, [r0, #12]
 8005906:	6643      	str	r3, [r0, #100]	; 0x64
 8005908:	81c2      	strh	r2, [r0, #14]
 800590a:	6183      	str	r3, [r0, #24]
 800590c:	4619      	mov	r1, r3
 800590e:	2208      	movs	r2, #8
 8005910:	305c      	adds	r0, #92	; 0x5c
 8005912:	f000 f914 	bl	8005b3e <memset>
 8005916:	4b0d      	ldr	r3, [pc, #52]	; (800594c <std+0x58>)
 8005918:	6263      	str	r3, [r4, #36]	; 0x24
 800591a:	4b0d      	ldr	r3, [pc, #52]	; (8005950 <std+0x5c>)
 800591c:	62a3      	str	r3, [r4, #40]	; 0x28
 800591e:	4b0d      	ldr	r3, [pc, #52]	; (8005954 <std+0x60>)
 8005920:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005922:	4b0d      	ldr	r3, [pc, #52]	; (8005958 <std+0x64>)
 8005924:	6323      	str	r3, [r4, #48]	; 0x30
 8005926:	4b0d      	ldr	r3, [pc, #52]	; (800595c <std+0x68>)
 8005928:	6224      	str	r4, [r4, #32]
 800592a:	429c      	cmp	r4, r3
 800592c:	d006      	beq.n	800593c <std+0x48>
 800592e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005932:	4294      	cmp	r4, r2
 8005934:	d002      	beq.n	800593c <std+0x48>
 8005936:	33d0      	adds	r3, #208	; 0xd0
 8005938:	429c      	cmp	r4, r3
 800593a:	d105      	bne.n	8005948 <std+0x54>
 800593c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005944:	f000 b978 	b.w	8005c38 <__retarget_lock_init_recursive>
 8005948:	bd10      	pop	{r4, pc}
 800594a:	bf00      	nop
 800594c:	08005ab9 	.word	0x08005ab9
 8005950:	08005adb 	.word	0x08005adb
 8005954:	08005b13 	.word	0x08005b13
 8005958:	08005b37 	.word	0x08005b37
 800595c:	20000ab4 	.word	0x20000ab4

08005960 <stdio_exit_handler>:
 8005960:	4a02      	ldr	r2, [pc, #8]	; (800596c <stdio_exit_handler+0xc>)
 8005962:	4903      	ldr	r1, [pc, #12]	; (8005970 <stdio_exit_handler+0x10>)
 8005964:	4803      	ldr	r0, [pc, #12]	; (8005974 <stdio_exit_handler+0x14>)
 8005966:	f000 b869 	b.w	8005a3c <_fwalk_sglue>
 800596a:	bf00      	nop
 800596c:	2000000c 	.word	0x2000000c
 8005970:	080074dd 	.word	0x080074dd
 8005974:	20000018 	.word	0x20000018

08005978 <cleanup_stdio>:
 8005978:	6841      	ldr	r1, [r0, #4]
 800597a:	4b0c      	ldr	r3, [pc, #48]	; (80059ac <cleanup_stdio+0x34>)
 800597c:	4299      	cmp	r1, r3
 800597e:	b510      	push	{r4, lr}
 8005980:	4604      	mov	r4, r0
 8005982:	d001      	beq.n	8005988 <cleanup_stdio+0x10>
 8005984:	f001 fdaa 	bl	80074dc <_fflush_r>
 8005988:	68a1      	ldr	r1, [r4, #8]
 800598a:	4b09      	ldr	r3, [pc, #36]	; (80059b0 <cleanup_stdio+0x38>)
 800598c:	4299      	cmp	r1, r3
 800598e:	d002      	beq.n	8005996 <cleanup_stdio+0x1e>
 8005990:	4620      	mov	r0, r4
 8005992:	f001 fda3 	bl	80074dc <_fflush_r>
 8005996:	68e1      	ldr	r1, [r4, #12]
 8005998:	4b06      	ldr	r3, [pc, #24]	; (80059b4 <cleanup_stdio+0x3c>)
 800599a:	4299      	cmp	r1, r3
 800599c:	d004      	beq.n	80059a8 <cleanup_stdio+0x30>
 800599e:	4620      	mov	r0, r4
 80059a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059a4:	f001 bd9a 	b.w	80074dc <_fflush_r>
 80059a8:	bd10      	pop	{r4, pc}
 80059aa:	bf00      	nop
 80059ac:	20000ab4 	.word	0x20000ab4
 80059b0:	20000b1c 	.word	0x20000b1c
 80059b4:	20000b84 	.word	0x20000b84

080059b8 <global_stdio_init.part.0>:
 80059b8:	b510      	push	{r4, lr}
 80059ba:	4b0b      	ldr	r3, [pc, #44]	; (80059e8 <global_stdio_init.part.0+0x30>)
 80059bc:	4c0b      	ldr	r4, [pc, #44]	; (80059ec <global_stdio_init.part.0+0x34>)
 80059be:	4a0c      	ldr	r2, [pc, #48]	; (80059f0 <global_stdio_init.part.0+0x38>)
 80059c0:	601a      	str	r2, [r3, #0]
 80059c2:	4620      	mov	r0, r4
 80059c4:	2200      	movs	r2, #0
 80059c6:	2104      	movs	r1, #4
 80059c8:	f7ff ff94 	bl	80058f4 <std>
 80059cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80059d0:	2201      	movs	r2, #1
 80059d2:	2109      	movs	r1, #9
 80059d4:	f7ff ff8e 	bl	80058f4 <std>
 80059d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80059dc:	2202      	movs	r2, #2
 80059de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059e2:	2112      	movs	r1, #18
 80059e4:	f7ff bf86 	b.w	80058f4 <std>
 80059e8:	20000bec 	.word	0x20000bec
 80059ec:	20000ab4 	.word	0x20000ab4
 80059f0:	08005961 	.word	0x08005961

080059f4 <__sfp_lock_acquire>:
 80059f4:	4801      	ldr	r0, [pc, #4]	; (80059fc <__sfp_lock_acquire+0x8>)
 80059f6:	f000 b920 	b.w	8005c3a <__retarget_lock_acquire_recursive>
 80059fa:	bf00      	nop
 80059fc:	20000bf5 	.word	0x20000bf5

08005a00 <__sfp_lock_release>:
 8005a00:	4801      	ldr	r0, [pc, #4]	; (8005a08 <__sfp_lock_release+0x8>)
 8005a02:	f000 b91b 	b.w	8005c3c <__retarget_lock_release_recursive>
 8005a06:	bf00      	nop
 8005a08:	20000bf5 	.word	0x20000bf5

08005a0c <__sinit>:
 8005a0c:	b510      	push	{r4, lr}
 8005a0e:	4604      	mov	r4, r0
 8005a10:	f7ff fff0 	bl	80059f4 <__sfp_lock_acquire>
 8005a14:	6a23      	ldr	r3, [r4, #32]
 8005a16:	b11b      	cbz	r3, 8005a20 <__sinit+0x14>
 8005a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a1c:	f7ff bff0 	b.w	8005a00 <__sfp_lock_release>
 8005a20:	4b04      	ldr	r3, [pc, #16]	; (8005a34 <__sinit+0x28>)
 8005a22:	6223      	str	r3, [r4, #32]
 8005a24:	4b04      	ldr	r3, [pc, #16]	; (8005a38 <__sinit+0x2c>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1f5      	bne.n	8005a18 <__sinit+0xc>
 8005a2c:	f7ff ffc4 	bl	80059b8 <global_stdio_init.part.0>
 8005a30:	e7f2      	b.n	8005a18 <__sinit+0xc>
 8005a32:	bf00      	nop
 8005a34:	08005979 	.word	0x08005979
 8005a38:	20000bec 	.word	0x20000bec

08005a3c <_fwalk_sglue>:
 8005a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a40:	4607      	mov	r7, r0
 8005a42:	4688      	mov	r8, r1
 8005a44:	4614      	mov	r4, r2
 8005a46:	2600      	movs	r6, #0
 8005a48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a4c:	f1b9 0901 	subs.w	r9, r9, #1
 8005a50:	d505      	bpl.n	8005a5e <_fwalk_sglue+0x22>
 8005a52:	6824      	ldr	r4, [r4, #0]
 8005a54:	2c00      	cmp	r4, #0
 8005a56:	d1f7      	bne.n	8005a48 <_fwalk_sglue+0xc>
 8005a58:	4630      	mov	r0, r6
 8005a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a5e:	89ab      	ldrh	r3, [r5, #12]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d907      	bls.n	8005a74 <_fwalk_sglue+0x38>
 8005a64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	d003      	beq.n	8005a74 <_fwalk_sglue+0x38>
 8005a6c:	4629      	mov	r1, r5
 8005a6e:	4638      	mov	r0, r7
 8005a70:	47c0      	blx	r8
 8005a72:	4306      	orrs	r6, r0
 8005a74:	3568      	adds	r5, #104	; 0x68
 8005a76:	e7e9      	b.n	8005a4c <_fwalk_sglue+0x10>

08005a78 <siprintf>:
 8005a78:	b40e      	push	{r1, r2, r3}
 8005a7a:	b500      	push	{lr}
 8005a7c:	b09c      	sub	sp, #112	; 0x70
 8005a7e:	ab1d      	add	r3, sp, #116	; 0x74
 8005a80:	9002      	str	r0, [sp, #8]
 8005a82:	9006      	str	r0, [sp, #24]
 8005a84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a88:	4809      	ldr	r0, [pc, #36]	; (8005ab0 <siprintf+0x38>)
 8005a8a:	9107      	str	r1, [sp, #28]
 8005a8c:	9104      	str	r1, [sp, #16]
 8005a8e:	4909      	ldr	r1, [pc, #36]	; (8005ab4 <siprintf+0x3c>)
 8005a90:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a94:	9105      	str	r1, [sp, #20]
 8005a96:	6800      	ldr	r0, [r0, #0]
 8005a98:	9301      	str	r3, [sp, #4]
 8005a9a:	a902      	add	r1, sp, #8
 8005a9c:	f001 fb9a 	bl	80071d4 <_svfiprintf_r>
 8005aa0:	9b02      	ldr	r3, [sp, #8]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	701a      	strb	r2, [r3, #0]
 8005aa6:	b01c      	add	sp, #112	; 0x70
 8005aa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005aac:	b003      	add	sp, #12
 8005aae:	4770      	bx	lr
 8005ab0:	20000064 	.word	0x20000064
 8005ab4:	ffff0208 	.word	0xffff0208

08005ab8 <__sread>:
 8005ab8:	b510      	push	{r4, lr}
 8005aba:	460c      	mov	r4, r1
 8005abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ac0:	f000 f86c 	bl	8005b9c <_read_r>
 8005ac4:	2800      	cmp	r0, #0
 8005ac6:	bfab      	itete	ge
 8005ac8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005aca:	89a3      	ldrhlt	r3, [r4, #12]
 8005acc:	181b      	addge	r3, r3, r0
 8005ace:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ad2:	bfac      	ite	ge
 8005ad4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ad6:	81a3      	strhlt	r3, [r4, #12]
 8005ad8:	bd10      	pop	{r4, pc}

08005ada <__swrite>:
 8005ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ade:	461f      	mov	r7, r3
 8005ae0:	898b      	ldrh	r3, [r1, #12]
 8005ae2:	05db      	lsls	r3, r3, #23
 8005ae4:	4605      	mov	r5, r0
 8005ae6:	460c      	mov	r4, r1
 8005ae8:	4616      	mov	r6, r2
 8005aea:	d505      	bpl.n	8005af8 <__swrite+0x1e>
 8005aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005af0:	2302      	movs	r3, #2
 8005af2:	2200      	movs	r2, #0
 8005af4:	f000 f840 	bl	8005b78 <_lseek_r>
 8005af8:	89a3      	ldrh	r3, [r4, #12]
 8005afa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005afe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b02:	81a3      	strh	r3, [r4, #12]
 8005b04:	4632      	mov	r2, r6
 8005b06:	463b      	mov	r3, r7
 8005b08:	4628      	mov	r0, r5
 8005b0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b0e:	f000 b857 	b.w	8005bc0 <_write_r>

08005b12 <__sseek>:
 8005b12:	b510      	push	{r4, lr}
 8005b14:	460c      	mov	r4, r1
 8005b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b1a:	f000 f82d 	bl	8005b78 <_lseek_r>
 8005b1e:	1c43      	adds	r3, r0, #1
 8005b20:	89a3      	ldrh	r3, [r4, #12]
 8005b22:	bf15      	itete	ne
 8005b24:	6560      	strne	r0, [r4, #84]	; 0x54
 8005b26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005b2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005b2e:	81a3      	strheq	r3, [r4, #12]
 8005b30:	bf18      	it	ne
 8005b32:	81a3      	strhne	r3, [r4, #12]
 8005b34:	bd10      	pop	{r4, pc}

08005b36 <__sclose>:
 8005b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b3a:	f000 b80d 	b.w	8005b58 <_close_r>

08005b3e <memset>:
 8005b3e:	4402      	add	r2, r0
 8005b40:	4603      	mov	r3, r0
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d100      	bne.n	8005b48 <memset+0xa>
 8005b46:	4770      	bx	lr
 8005b48:	f803 1b01 	strb.w	r1, [r3], #1
 8005b4c:	e7f9      	b.n	8005b42 <memset+0x4>
	...

08005b50 <_localeconv_r>:
 8005b50:	4800      	ldr	r0, [pc, #0]	; (8005b54 <_localeconv_r+0x4>)
 8005b52:	4770      	bx	lr
 8005b54:	20000158 	.word	0x20000158

08005b58 <_close_r>:
 8005b58:	b538      	push	{r3, r4, r5, lr}
 8005b5a:	4d06      	ldr	r5, [pc, #24]	; (8005b74 <_close_r+0x1c>)
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	4604      	mov	r4, r0
 8005b60:	4608      	mov	r0, r1
 8005b62:	602b      	str	r3, [r5, #0]
 8005b64:	f7fb f9e3 	bl	8000f2e <_close>
 8005b68:	1c43      	adds	r3, r0, #1
 8005b6a:	d102      	bne.n	8005b72 <_close_r+0x1a>
 8005b6c:	682b      	ldr	r3, [r5, #0]
 8005b6e:	b103      	cbz	r3, 8005b72 <_close_r+0x1a>
 8005b70:	6023      	str	r3, [r4, #0]
 8005b72:	bd38      	pop	{r3, r4, r5, pc}
 8005b74:	20000bf0 	.word	0x20000bf0

08005b78 <_lseek_r>:
 8005b78:	b538      	push	{r3, r4, r5, lr}
 8005b7a:	4d07      	ldr	r5, [pc, #28]	; (8005b98 <_lseek_r+0x20>)
 8005b7c:	4604      	mov	r4, r0
 8005b7e:	4608      	mov	r0, r1
 8005b80:	4611      	mov	r1, r2
 8005b82:	2200      	movs	r2, #0
 8005b84:	602a      	str	r2, [r5, #0]
 8005b86:	461a      	mov	r2, r3
 8005b88:	f7fb f9f8 	bl	8000f7c <_lseek>
 8005b8c:	1c43      	adds	r3, r0, #1
 8005b8e:	d102      	bne.n	8005b96 <_lseek_r+0x1e>
 8005b90:	682b      	ldr	r3, [r5, #0]
 8005b92:	b103      	cbz	r3, 8005b96 <_lseek_r+0x1e>
 8005b94:	6023      	str	r3, [r4, #0]
 8005b96:	bd38      	pop	{r3, r4, r5, pc}
 8005b98:	20000bf0 	.word	0x20000bf0

08005b9c <_read_r>:
 8005b9c:	b538      	push	{r3, r4, r5, lr}
 8005b9e:	4d07      	ldr	r5, [pc, #28]	; (8005bbc <_read_r+0x20>)
 8005ba0:	4604      	mov	r4, r0
 8005ba2:	4608      	mov	r0, r1
 8005ba4:	4611      	mov	r1, r2
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	602a      	str	r2, [r5, #0]
 8005baa:	461a      	mov	r2, r3
 8005bac:	f7fb f986 	bl	8000ebc <_read>
 8005bb0:	1c43      	adds	r3, r0, #1
 8005bb2:	d102      	bne.n	8005bba <_read_r+0x1e>
 8005bb4:	682b      	ldr	r3, [r5, #0]
 8005bb6:	b103      	cbz	r3, 8005bba <_read_r+0x1e>
 8005bb8:	6023      	str	r3, [r4, #0]
 8005bba:	bd38      	pop	{r3, r4, r5, pc}
 8005bbc:	20000bf0 	.word	0x20000bf0

08005bc0 <_write_r>:
 8005bc0:	b538      	push	{r3, r4, r5, lr}
 8005bc2:	4d07      	ldr	r5, [pc, #28]	; (8005be0 <_write_r+0x20>)
 8005bc4:	4604      	mov	r4, r0
 8005bc6:	4608      	mov	r0, r1
 8005bc8:	4611      	mov	r1, r2
 8005bca:	2200      	movs	r2, #0
 8005bcc:	602a      	str	r2, [r5, #0]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	f7fb f991 	bl	8000ef6 <_write>
 8005bd4:	1c43      	adds	r3, r0, #1
 8005bd6:	d102      	bne.n	8005bde <_write_r+0x1e>
 8005bd8:	682b      	ldr	r3, [r5, #0]
 8005bda:	b103      	cbz	r3, 8005bde <_write_r+0x1e>
 8005bdc:	6023      	str	r3, [r4, #0]
 8005bde:	bd38      	pop	{r3, r4, r5, pc}
 8005be0:	20000bf0 	.word	0x20000bf0

08005be4 <__errno>:
 8005be4:	4b01      	ldr	r3, [pc, #4]	; (8005bec <__errno+0x8>)
 8005be6:	6818      	ldr	r0, [r3, #0]
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	20000064 	.word	0x20000064

08005bf0 <__libc_init_array>:
 8005bf0:	b570      	push	{r4, r5, r6, lr}
 8005bf2:	4d0d      	ldr	r5, [pc, #52]	; (8005c28 <__libc_init_array+0x38>)
 8005bf4:	4c0d      	ldr	r4, [pc, #52]	; (8005c2c <__libc_init_array+0x3c>)
 8005bf6:	1b64      	subs	r4, r4, r5
 8005bf8:	10a4      	asrs	r4, r4, #2
 8005bfa:	2600      	movs	r6, #0
 8005bfc:	42a6      	cmp	r6, r4
 8005bfe:	d109      	bne.n	8005c14 <__libc_init_array+0x24>
 8005c00:	4d0b      	ldr	r5, [pc, #44]	; (8005c30 <__libc_init_array+0x40>)
 8005c02:	4c0c      	ldr	r4, [pc, #48]	; (8005c34 <__libc_init_array+0x44>)
 8005c04:	f002 f80e 	bl	8007c24 <_init>
 8005c08:	1b64      	subs	r4, r4, r5
 8005c0a:	10a4      	asrs	r4, r4, #2
 8005c0c:	2600      	movs	r6, #0
 8005c0e:	42a6      	cmp	r6, r4
 8005c10:	d105      	bne.n	8005c1e <__libc_init_array+0x2e>
 8005c12:	bd70      	pop	{r4, r5, r6, pc}
 8005c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c18:	4798      	blx	r3
 8005c1a:	3601      	adds	r6, #1
 8005c1c:	e7ee      	b.n	8005bfc <__libc_init_array+0xc>
 8005c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c22:	4798      	blx	r3
 8005c24:	3601      	adds	r6, #1
 8005c26:	e7f2      	b.n	8005c0e <__libc_init_array+0x1e>
 8005c28:	08007fec 	.word	0x08007fec
 8005c2c:	08007fec 	.word	0x08007fec
 8005c30:	08007fec 	.word	0x08007fec
 8005c34:	08007ff0 	.word	0x08007ff0

08005c38 <__retarget_lock_init_recursive>:
 8005c38:	4770      	bx	lr

08005c3a <__retarget_lock_acquire_recursive>:
 8005c3a:	4770      	bx	lr

08005c3c <__retarget_lock_release_recursive>:
 8005c3c:	4770      	bx	lr

08005c3e <quorem>:
 8005c3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c42:	6903      	ldr	r3, [r0, #16]
 8005c44:	690c      	ldr	r4, [r1, #16]
 8005c46:	42a3      	cmp	r3, r4
 8005c48:	4607      	mov	r7, r0
 8005c4a:	db7e      	blt.n	8005d4a <quorem+0x10c>
 8005c4c:	3c01      	subs	r4, #1
 8005c4e:	f101 0814 	add.w	r8, r1, #20
 8005c52:	f100 0514 	add.w	r5, r0, #20
 8005c56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c5a:	9301      	str	r3, [sp, #4]
 8005c5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c64:	3301      	adds	r3, #1
 8005c66:	429a      	cmp	r2, r3
 8005c68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005c6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c70:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c74:	d331      	bcc.n	8005cda <quorem+0x9c>
 8005c76:	f04f 0e00 	mov.w	lr, #0
 8005c7a:	4640      	mov	r0, r8
 8005c7c:	46ac      	mov	ip, r5
 8005c7e:	46f2      	mov	sl, lr
 8005c80:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c84:	b293      	uxth	r3, r2
 8005c86:	fb06 e303 	mla	r3, r6, r3, lr
 8005c8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005c8e:	0c1a      	lsrs	r2, r3, #16
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	ebaa 0303 	sub.w	r3, sl, r3
 8005c96:	f8dc a000 	ldr.w	sl, [ip]
 8005c9a:	fa13 f38a 	uxtah	r3, r3, sl
 8005c9e:	fb06 220e 	mla	r2, r6, lr, r2
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	9b00      	ldr	r3, [sp, #0]
 8005ca6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005caa:	b292      	uxth	r2, r2
 8005cac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005cb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005cb4:	f8bd 3000 	ldrh.w	r3, [sp]
 8005cb8:	4581      	cmp	r9, r0
 8005cba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cbe:	f84c 3b04 	str.w	r3, [ip], #4
 8005cc2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005cc6:	d2db      	bcs.n	8005c80 <quorem+0x42>
 8005cc8:	f855 300b 	ldr.w	r3, [r5, fp]
 8005ccc:	b92b      	cbnz	r3, 8005cda <quorem+0x9c>
 8005cce:	9b01      	ldr	r3, [sp, #4]
 8005cd0:	3b04      	subs	r3, #4
 8005cd2:	429d      	cmp	r5, r3
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	d32c      	bcc.n	8005d32 <quorem+0xf4>
 8005cd8:	613c      	str	r4, [r7, #16]
 8005cda:	4638      	mov	r0, r7
 8005cdc:	f001 f920 	bl	8006f20 <__mcmp>
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	db22      	blt.n	8005d2a <quorem+0xec>
 8005ce4:	3601      	adds	r6, #1
 8005ce6:	4629      	mov	r1, r5
 8005ce8:	2000      	movs	r0, #0
 8005cea:	f858 2b04 	ldr.w	r2, [r8], #4
 8005cee:	f8d1 c000 	ldr.w	ip, [r1]
 8005cf2:	b293      	uxth	r3, r2
 8005cf4:	1ac3      	subs	r3, r0, r3
 8005cf6:	0c12      	lsrs	r2, r2, #16
 8005cf8:	fa13 f38c 	uxtah	r3, r3, ip
 8005cfc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005d00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d0a:	45c1      	cmp	r9, r8
 8005d0c:	f841 3b04 	str.w	r3, [r1], #4
 8005d10:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005d14:	d2e9      	bcs.n	8005cea <quorem+0xac>
 8005d16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d1e:	b922      	cbnz	r2, 8005d2a <quorem+0xec>
 8005d20:	3b04      	subs	r3, #4
 8005d22:	429d      	cmp	r5, r3
 8005d24:	461a      	mov	r2, r3
 8005d26:	d30a      	bcc.n	8005d3e <quorem+0x100>
 8005d28:	613c      	str	r4, [r7, #16]
 8005d2a:	4630      	mov	r0, r6
 8005d2c:	b003      	add	sp, #12
 8005d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d32:	6812      	ldr	r2, [r2, #0]
 8005d34:	3b04      	subs	r3, #4
 8005d36:	2a00      	cmp	r2, #0
 8005d38:	d1ce      	bne.n	8005cd8 <quorem+0x9a>
 8005d3a:	3c01      	subs	r4, #1
 8005d3c:	e7c9      	b.n	8005cd2 <quorem+0x94>
 8005d3e:	6812      	ldr	r2, [r2, #0]
 8005d40:	3b04      	subs	r3, #4
 8005d42:	2a00      	cmp	r2, #0
 8005d44:	d1f0      	bne.n	8005d28 <quorem+0xea>
 8005d46:	3c01      	subs	r4, #1
 8005d48:	e7eb      	b.n	8005d22 <quorem+0xe4>
 8005d4a:	2000      	movs	r0, #0
 8005d4c:	e7ee      	b.n	8005d2c <quorem+0xee>
	...

08005d50 <_dtoa_r>:
 8005d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d54:	ed2d 8b02 	vpush	{d8}
 8005d58:	69c5      	ldr	r5, [r0, #28]
 8005d5a:	b091      	sub	sp, #68	; 0x44
 8005d5c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005d60:	ec59 8b10 	vmov	r8, r9, d0
 8005d64:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8005d66:	9106      	str	r1, [sp, #24]
 8005d68:	4606      	mov	r6, r0
 8005d6a:	9208      	str	r2, [sp, #32]
 8005d6c:	930c      	str	r3, [sp, #48]	; 0x30
 8005d6e:	b975      	cbnz	r5, 8005d8e <_dtoa_r+0x3e>
 8005d70:	2010      	movs	r0, #16
 8005d72:	f000 fda5 	bl	80068c0 <malloc>
 8005d76:	4602      	mov	r2, r0
 8005d78:	61f0      	str	r0, [r6, #28]
 8005d7a:	b920      	cbnz	r0, 8005d86 <_dtoa_r+0x36>
 8005d7c:	4ba6      	ldr	r3, [pc, #664]	; (8006018 <_dtoa_r+0x2c8>)
 8005d7e:	21ef      	movs	r1, #239	; 0xef
 8005d80:	48a6      	ldr	r0, [pc, #664]	; (800601c <_dtoa_r+0x2cc>)
 8005d82:	f001 fc0b 	bl	800759c <__assert_func>
 8005d86:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005d8a:	6005      	str	r5, [r0, #0]
 8005d8c:	60c5      	str	r5, [r0, #12]
 8005d8e:	69f3      	ldr	r3, [r6, #28]
 8005d90:	6819      	ldr	r1, [r3, #0]
 8005d92:	b151      	cbz	r1, 8005daa <_dtoa_r+0x5a>
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	604a      	str	r2, [r1, #4]
 8005d98:	2301      	movs	r3, #1
 8005d9a:	4093      	lsls	r3, r2
 8005d9c:	608b      	str	r3, [r1, #8]
 8005d9e:	4630      	mov	r0, r6
 8005da0:	f000 fe82 	bl	8006aa8 <_Bfree>
 8005da4:	69f3      	ldr	r3, [r6, #28]
 8005da6:	2200      	movs	r2, #0
 8005da8:	601a      	str	r2, [r3, #0]
 8005daa:	f1b9 0300 	subs.w	r3, r9, #0
 8005dae:	bfbb      	ittet	lt
 8005db0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005db4:	9303      	strlt	r3, [sp, #12]
 8005db6:	2300      	movge	r3, #0
 8005db8:	2201      	movlt	r2, #1
 8005dba:	bfac      	ite	ge
 8005dbc:	6023      	strge	r3, [r4, #0]
 8005dbe:	6022      	strlt	r2, [r4, #0]
 8005dc0:	4b97      	ldr	r3, [pc, #604]	; (8006020 <_dtoa_r+0x2d0>)
 8005dc2:	9c03      	ldr	r4, [sp, #12]
 8005dc4:	43a3      	bics	r3, r4
 8005dc6:	d11c      	bne.n	8005e02 <_dtoa_r+0xb2>
 8005dc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005dca:	f242 730f 	movw	r3, #9999	; 0x270f
 8005dce:	6013      	str	r3, [r2, #0]
 8005dd0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005dd4:	ea53 0308 	orrs.w	r3, r3, r8
 8005dd8:	f000 84fb 	beq.w	80067d2 <_dtoa_r+0xa82>
 8005ddc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005dde:	b963      	cbnz	r3, 8005dfa <_dtoa_r+0xaa>
 8005de0:	4b90      	ldr	r3, [pc, #576]	; (8006024 <_dtoa_r+0x2d4>)
 8005de2:	e020      	b.n	8005e26 <_dtoa_r+0xd6>
 8005de4:	4b90      	ldr	r3, [pc, #576]	; (8006028 <_dtoa_r+0x2d8>)
 8005de6:	9301      	str	r3, [sp, #4]
 8005de8:	3308      	adds	r3, #8
 8005dea:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005dec:	6013      	str	r3, [r2, #0]
 8005dee:	9801      	ldr	r0, [sp, #4]
 8005df0:	b011      	add	sp, #68	; 0x44
 8005df2:	ecbd 8b02 	vpop	{d8}
 8005df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dfa:	4b8a      	ldr	r3, [pc, #552]	; (8006024 <_dtoa_r+0x2d4>)
 8005dfc:	9301      	str	r3, [sp, #4]
 8005dfe:	3303      	adds	r3, #3
 8005e00:	e7f3      	b.n	8005dea <_dtoa_r+0x9a>
 8005e02:	ed9d 8b02 	vldr	d8, [sp, #8]
 8005e06:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e0e:	d10c      	bne.n	8005e2a <_dtoa_r+0xda>
 8005e10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e12:	2301      	movs	r3, #1
 8005e14:	6013      	str	r3, [r2, #0]
 8005e16:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 84d7 	beq.w	80067cc <_dtoa_r+0xa7c>
 8005e1e:	4b83      	ldr	r3, [pc, #524]	; (800602c <_dtoa_r+0x2dc>)
 8005e20:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005e22:	6013      	str	r3, [r2, #0]
 8005e24:	3b01      	subs	r3, #1
 8005e26:	9301      	str	r3, [sp, #4]
 8005e28:	e7e1      	b.n	8005dee <_dtoa_r+0x9e>
 8005e2a:	aa0e      	add	r2, sp, #56	; 0x38
 8005e2c:	a90f      	add	r1, sp, #60	; 0x3c
 8005e2e:	4630      	mov	r0, r6
 8005e30:	eeb0 0b48 	vmov.f64	d0, d8
 8005e34:	f001 f91a 	bl	800706c <__d2b>
 8005e38:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8005e3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e3e:	4605      	mov	r5, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d046      	beq.n	8005ed2 <_dtoa_r+0x182>
 8005e44:	eeb0 7b48 	vmov.f64	d7, d8
 8005e48:	ee18 1a90 	vmov	r1, s17
 8005e4c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005e50:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8005e54:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005e58:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005e5c:	2000      	movs	r0, #0
 8005e5e:	ee07 1a90 	vmov	s15, r1
 8005e62:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8005e66:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8006000 <_dtoa_r+0x2b0>
 8005e6a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005e6e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8006008 <_dtoa_r+0x2b8>
 8005e72:	eea7 6b05 	vfma.f64	d6, d7, d5
 8005e76:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8006010 <_dtoa_r+0x2c0>
 8005e7a:	ee07 3a90 	vmov	s15, r3
 8005e7e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8005e82:	eeb0 7b46 	vmov.f64	d7, d6
 8005e86:	eea4 7b05 	vfma.f64	d7, d4, d5
 8005e8a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8005e8e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e96:	ee16 ba90 	vmov	fp, s13
 8005e9a:	9009      	str	r0, [sp, #36]	; 0x24
 8005e9c:	d508      	bpl.n	8005eb0 <_dtoa_r+0x160>
 8005e9e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005ea2:	eeb4 6b47 	vcmp.f64	d6, d7
 8005ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eaa:	bf18      	it	ne
 8005eac:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8005eb0:	f1bb 0f16 	cmp.w	fp, #22
 8005eb4:	d82b      	bhi.n	8005f0e <_dtoa_r+0x1be>
 8005eb6:	495e      	ldr	r1, [pc, #376]	; (8006030 <_dtoa_r+0x2e0>)
 8005eb8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8005ebc:	ed91 7b00 	vldr	d7, [r1]
 8005ec0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ec8:	d501      	bpl.n	8005ece <_dtoa_r+0x17e>
 8005eca:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005ece:	2100      	movs	r1, #0
 8005ed0:	e01e      	b.n	8005f10 <_dtoa_r+0x1c0>
 8005ed2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8005eda:	2920      	cmp	r1, #32
 8005edc:	bfc1      	itttt	gt
 8005ede:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8005ee2:	408c      	lslgt	r4, r1
 8005ee4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8005ee8:	fa28 f101 	lsrgt.w	r1, r8, r1
 8005eec:	bfd6      	itet	le
 8005eee:	f1c1 0120 	rsble	r1, r1, #32
 8005ef2:	4321      	orrgt	r1, r4
 8005ef4:	fa08 f101 	lslle.w	r1, r8, r1
 8005ef8:	ee07 1a90 	vmov	s15, r1
 8005efc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005f00:	3b01      	subs	r3, #1
 8005f02:	ee17 1a90 	vmov	r1, s15
 8005f06:	2001      	movs	r0, #1
 8005f08:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005f0c:	e7a7      	b.n	8005e5e <_dtoa_r+0x10e>
 8005f0e:	2101      	movs	r1, #1
 8005f10:	1ad2      	subs	r2, r2, r3
 8005f12:	1e53      	subs	r3, r2, #1
 8005f14:	9305      	str	r3, [sp, #20]
 8005f16:	bf45      	ittet	mi
 8005f18:	f1c2 0301 	rsbmi	r3, r2, #1
 8005f1c:	9304      	strmi	r3, [sp, #16]
 8005f1e:	2300      	movpl	r3, #0
 8005f20:	2300      	movmi	r3, #0
 8005f22:	bf4c      	ite	mi
 8005f24:	9305      	strmi	r3, [sp, #20]
 8005f26:	9304      	strpl	r3, [sp, #16]
 8005f28:	f1bb 0f00 	cmp.w	fp, #0
 8005f2c:	910b      	str	r1, [sp, #44]	; 0x2c
 8005f2e:	db18      	blt.n	8005f62 <_dtoa_r+0x212>
 8005f30:	9b05      	ldr	r3, [sp, #20]
 8005f32:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8005f36:	445b      	add	r3, fp
 8005f38:	9305      	str	r3, [sp, #20]
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	9a06      	ldr	r2, [sp, #24]
 8005f3e:	2a09      	cmp	r2, #9
 8005f40:	d848      	bhi.n	8005fd4 <_dtoa_r+0x284>
 8005f42:	2a05      	cmp	r2, #5
 8005f44:	bfc4      	itt	gt
 8005f46:	3a04      	subgt	r2, #4
 8005f48:	9206      	strgt	r2, [sp, #24]
 8005f4a:	9a06      	ldr	r2, [sp, #24]
 8005f4c:	f1a2 0202 	sub.w	r2, r2, #2
 8005f50:	bfcc      	ite	gt
 8005f52:	2400      	movgt	r4, #0
 8005f54:	2401      	movle	r4, #1
 8005f56:	2a03      	cmp	r2, #3
 8005f58:	d847      	bhi.n	8005fea <_dtoa_r+0x29a>
 8005f5a:	e8df f002 	tbb	[pc, r2]
 8005f5e:	2d0b      	.short	0x2d0b
 8005f60:	392b      	.short	0x392b
 8005f62:	9b04      	ldr	r3, [sp, #16]
 8005f64:	2200      	movs	r2, #0
 8005f66:	eba3 030b 	sub.w	r3, r3, fp
 8005f6a:	9304      	str	r3, [sp, #16]
 8005f6c:	920a      	str	r2, [sp, #40]	; 0x28
 8005f6e:	f1cb 0300 	rsb	r3, fp, #0
 8005f72:	e7e3      	b.n	8005f3c <_dtoa_r+0x1ec>
 8005f74:	2200      	movs	r2, #0
 8005f76:	9207      	str	r2, [sp, #28]
 8005f78:	9a08      	ldr	r2, [sp, #32]
 8005f7a:	2a00      	cmp	r2, #0
 8005f7c:	dc38      	bgt.n	8005ff0 <_dtoa_r+0x2a0>
 8005f7e:	f04f 0a01 	mov.w	sl, #1
 8005f82:	46d1      	mov	r9, sl
 8005f84:	4652      	mov	r2, sl
 8005f86:	f8cd a020 	str.w	sl, [sp, #32]
 8005f8a:	69f7      	ldr	r7, [r6, #28]
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	2004      	movs	r0, #4
 8005f90:	f100 0c14 	add.w	ip, r0, #20
 8005f94:	4594      	cmp	ip, r2
 8005f96:	d930      	bls.n	8005ffa <_dtoa_r+0x2aa>
 8005f98:	6079      	str	r1, [r7, #4]
 8005f9a:	4630      	mov	r0, r6
 8005f9c:	930d      	str	r3, [sp, #52]	; 0x34
 8005f9e:	f000 fd43 	bl	8006a28 <_Balloc>
 8005fa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fa4:	9001      	str	r0, [sp, #4]
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	2800      	cmp	r0, #0
 8005faa:	d145      	bne.n	8006038 <_dtoa_r+0x2e8>
 8005fac:	4b21      	ldr	r3, [pc, #132]	; (8006034 <_dtoa_r+0x2e4>)
 8005fae:	f240 11af 	movw	r1, #431	; 0x1af
 8005fb2:	e6e5      	b.n	8005d80 <_dtoa_r+0x30>
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	e7de      	b.n	8005f76 <_dtoa_r+0x226>
 8005fb8:	2200      	movs	r2, #0
 8005fba:	9207      	str	r2, [sp, #28]
 8005fbc:	9a08      	ldr	r2, [sp, #32]
 8005fbe:	eb0b 0a02 	add.w	sl, fp, r2
 8005fc2:	f10a 0901 	add.w	r9, sl, #1
 8005fc6:	464a      	mov	r2, r9
 8005fc8:	2a01      	cmp	r2, #1
 8005fca:	bfb8      	it	lt
 8005fcc:	2201      	movlt	r2, #1
 8005fce:	e7dc      	b.n	8005f8a <_dtoa_r+0x23a>
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	e7f2      	b.n	8005fba <_dtoa_r+0x26a>
 8005fd4:	2401      	movs	r4, #1
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8005fdc:	f04f 3aff 	mov.w	sl, #4294967295
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	46d1      	mov	r9, sl
 8005fe4:	2212      	movs	r2, #18
 8005fe6:	9108      	str	r1, [sp, #32]
 8005fe8:	e7cf      	b.n	8005f8a <_dtoa_r+0x23a>
 8005fea:	2201      	movs	r2, #1
 8005fec:	9207      	str	r2, [sp, #28]
 8005fee:	e7f5      	b.n	8005fdc <_dtoa_r+0x28c>
 8005ff0:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005ff4:	46d1      	mov	r9, sl
 8005ff6:	4652      	mov	r2, sl
 8005ff8:	e7c7      	b.n	8005f8a <_dtoa_r+0x23a>
 8005ffa:	3101      	adds	r1, #1
 8005ffc:	0040      	lsls	r0, r0, #1
 8005ffe:	e7c7      	b.n	8005f90 <_dtoa_r+0x240>
 8006000:	636f4361 	.word	0x636f4361
 8006004:	3fd287a7 	.word	0x3fd287a7
 8006008:	8b60c8b3 	.word	0x8b60c8b3
 800600c:	3fc68a28 	.word	0x3fc68a28
 8006010:	509f79fb 	.word	0x509f79fb
 8006014:	3fd34413 	.word	0x3fd34413
 8006018:	08007cb5 	.word	0x08007cb5
 800601c:	08007ccc 	.word	0x08007ccc
 8006020:	7ff00000 	.word	0x7ff00000
 8006024:	08007cb1 	.word	0x08007cb1
 8006028:	08007ca8 	.word	0x08007ca8
 800602c:	08007c85 	.word	0x08007c85
 8006030:	08007db8 	.word	0x08007db8
 8006034:	08007d24 	.word	0x08007d24
 8006038:	69f2      	ldr	r2, [r6, #28]
 800603a:	9901      	ldr	r1, [sp, #4]
 800603c:	6011      	str	r1, [r2, #0]
 800603e:	f1b9 0f0e 	cmp.w	r9, #14
 8006042:	d86c      	bhi.n	800611e <_dtoa_r+0x3ce>
 8006044:	2c00      	cmp	r4, #0
 8006046:	d06a      	beq.n	800611e <_dtoa_r+0x3ce>
 8006048:	f1bb 0f00 	cmp.w	fp, #0
 800604c:	f340 80a0 	ble.w	8006190 <_dtoa_r+0x440>
 8006050:	4ac1      	ldr	r2, [pc, #772]	; (8006358 <_dtoa_r+0x608>)
 8006052:	f00b 010f 	and.w	r1, fp, #15
 8006056:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800605a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800605e:	ed92 7b00 	vldr	d7, [r2]
 8006062:	ea4f 122b 	mov.w	r2, fp, asr #4
 8006066:	f000 8087 	beq.w	8006178 <_dtoa_r+0x428>
 800606a:	49bc      	ldr	r1, [pc, #752]	; (800635c <_dtoa_r+0x60c>)
 800606c:	ed91 6b08 	vldr	d6, [r1, #32]
 8006070:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8006074:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006078:	f002 020f 	and.w	r2, r2, #15
 800607c:	2103      	movs	r1, #3
 800607e:	48b7      	ldr	r0, [pc, #732]	; (800635c <_dtoa_r+0x60c>)
 8006080:	2a00      	cmp	r2, #0
 8006082:	d17b      	bne.n	800617c <_dtoa_r+0x42c>
 8006084:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006088:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800608c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006090:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006092:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006096:	2a00      	cmp	r2, #0
 8006098:	f000 80a0 	beq.w	80061dc <_dtoa_r+0x48c>
 800609c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80060a0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80060a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060a8:	f140 8098 	bpl.w	80061dc <_dtoa_r+0x48c>
 80060ac:	f1b9 0f00 	cmp.w	r9, #0
 80060b0:	f000 8094 	beq.w	80061dc <_dtoa_r+0x48c>
 80060b4:	f1ba 0f00 	cmp.w	sl, #0
 80060b8:	dd2f      	ble.n	800611a <_dtoa_r+0x3ca>
 80060ba:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80060be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80060c2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80060c6:	f10b 32ff 	add.w	r2, fp, #4294967295
 80060ca:	3101      	adds	r1, #1
 80060cc:	4654      	mov	r4, sl
 80060ce:	ed9d 6b02 	vldr	d6, [sp, #8]
 80060d2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80060d6:	ee07 1a90 	vmov	s15, r1
 80060da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80060de:	eea7 5b06 	vfma.f64	d5, d7, d6
 80060e2:	ee15 7a90 	vmov	r7, s11
 80060e6:	ec51 0b15 	vmov	r0, r1, d5
 80060ea:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 80060ee:	2c00      	cmp	r4, #0
 80060f0:	d177      	bne.n	80061e2 <_dtoa_r+0x492>
 80060f2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80060f6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80060fa:	ec41 0b17 	vmov	d7, r0, r1
 80060fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006106:	f300 826a 	bgt.w	80065de <_dtoa_r+0x88e>
 800610a:	eeb1 7b47 	vneg.f64	d7, d7
 800610e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006116:	f100 8260 	bmi.w	80065da <_dtoa_r+0x88a>
 800611a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800611e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006120:	2a00      	cmp	r2, #0
 8006122:	f2c0 811d 	blt.w	8006360 <_dtoa_r+0x610>
 8006126:	f1bb 0f0e 	cmp.w	fp, #14
 800612a:	f300 8119 	bgt.w	8006360 <_dtoa_r+0x610>
 800612e:	4b8a      	ldr	r3, [pc, #552]	; (8006358 <_dtoa_r+0x608>)
 8006130:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006134:	ed93 6b00 	vldr	d6, [r3]
 8006138:	9b08      	ldr	r3, [sp, #32]
 800613a:	2b00      	cmp	r3, #0
 800613c:	f280 80b7 	bge.w	80062ae <_dtoa_r+0x55e>
 8006140:	f1b9 0f00 	cmp.w	r9, #0
 8006144:	f300 80b3 	bgt.w	80062ae <_dtoa_r+0x55e>
 8006148:	f040 8246 	bne.w	80065d8 <_dtoa_r+0x888>
 800614c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006150:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006154:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006158:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800615c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006160:	464c      	mov	r4, r9
 8006162:	464f      	mov	r7, r9
 8006164:	f280 821c 	bge.w	80065a0 <_dtoa_r+0x850>
 8006168:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800616c:	2331      	movs	r3, #49	; 0x31
 800616e:	f808 3b01 	strb.w	r3, [r8], #1
 8006172:	f10b 0b01 	add.w	fp, fp, #1
 8006176:	e218      	b.n	80065aa <_dtoa_r+0x85a>
 8006178:	2102      	movs	r1, #2
 800617a:	e780      	b.n	800607e <_dtoa_r+0x32e>
 800617c:	07d4      	lsls	r4, r2, #31
 800617e:	d504      	bpl.n	800618a <_dtoa_r+0x43a>
 8006180:	ed90 6b00 	vldr	d6, [r0]
 8006184:	3101      	adds	r1, #1
 8006186:	ee27 7b06 	vmul.f64	d7, d7, d6
 800618a:	1052      	asrs	r2, r2, #1
 800618c:	3008      	adds	r0, #8
 800618e:	e777      	b.n	8006080 <_dtoa_r+0x330>
 8006190:	d022      	beq.n	80061d8 <_dtoa_r+0x488>
 8006192:	f1cb 0200 	rsb	r2, fp, #0
 8006196:	4970      	ldr	r1, [pc, #448]	; (8006358 <_dtoa_r+0x608>)
 8006198:	f002 000f 	and.w	r0, r2, #15
 800619c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80061a0:	ed91 7b00 	vldr	d7, [r1]
 80061a4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80061a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80061ac:	486b      	ldr	r0, [pc, #428]	; (800635c <_dtoa_r+0x60c>)
 80061ae:	1112      	asrs	r2, r2, #4
 80061b0:	2400      	movs	r4, #0
 80061b2:	2102      	movs	r1, #2
 80061b4:	b92a      	cbnz	r2, 80061c2 <_dtoa_r+0x472>
 80061b6:	2c00      	cmp	r4, #0
 80061b8:	f43f af6a 	beq.w	8006090 <_dtoa_r+0x340>
 80061bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80061c0:	e766      	b.n	8006090 <_dtoa_r+0x340>
 80061c2:	07d7      	lsls	r7, r2, #31
 80061c4:	d505      	bpl.n	80061d2 <_dtoa_r+0x482>
 80061c6:	ed90 6b00 	vldr	d6, [r0]
 80061ca:	3101      	adds	r1, #1
 80061cc:	2401      	movs	r4, #1
 80061ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80061d2:	1052      	asrs	r2, r2, #1
 80061d4:	3008      	adds	r0, #8
 80061d6:	e7ed      	b.n	80061b4 <_dtoa_r+0x464>
 80061d8:	2102      	movs	r1, #2
 80061da:	e759      	b.n	8006090 <_dtoa_r+0x340>
 80061dc:	465a      	mov	r2, fp
 80061de:	464c      	mov	r4, r9
 80061e0:	e775      	b.n	80060ce <_dtoa_r+0x37e>
 80061e2:	ec41 0b17 	vmov	d7, r0, r1
 80061e6:	495c      	ldr	r1, [pc, #368]	; (8006358 <_dtoa_r+0x608>)
 80061e8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80061ec:	ed11 4b02 	vldr	d4, [r1, #-8]
 80061f0:	9901      	ldr	r1, [sp, #4]
 80061f2:	440c      	add	r4, r1
 80061f4:	9907      	ldr	r1, [sp, #28]
 80061f6:	b351      	cbz	r1, 800624e <_dtoa_r+0x4fe>
 80061f8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80061fc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8006200:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006204:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8006208:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800620c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006210:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006214:	ee14 1a90 	vmov	r1, s9
 8006218:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800621c:	3130      	adds	r1, #48	; 0x30
 800621e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006222:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800622a:	f808 1b01 	strb.w	r1, [r8], #1
 800622e:	d439      	bmi.n	80062a4 <_dtoa_r+0x554>
 8006230:	ee32 5b46 	vsub.f64	d5, d2, d6
 8006234:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8006238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800623c:	d472      	bmi.n	8006324 <_dtoa_r+0x5d4>
 800623e:	45a0      	cmp	r8, r4
 8006240:	f43f af6b 	beq.w	800611a <_dtoa_r+0x3ca>
 8006244:	ee27 7b03 	vmul.f64	d7, d7, d3
 8006248:	ee26 6b03 	vmul.f64	d6, d6, d3
 800624c:	e7e0      	b.n	8006210 <_dtoa_r+0x4c0>
 800624e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006252:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006256:	4620      	mov	r0, r4
 8006258:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800625c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006260:	ee14 1a90 	vmov	r1, s9
 8006264:	3130      	adds	r1, #48	; 0x30
 8006266:	f808 1b01 	strb.w	r1, [r8], #1
 800626a:	45a0      	cmp	r8, r4
 800626c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006270:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006274:	d118      	bne.n	80062a8 <_dtoa_r+0x558>
 8006276:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800627a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800627e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8006282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006286:	dc4d      	bgt.n	8006324 <_dtoa_r+0x5d4>
 8006288:	ee35 5b47 	vsub.f64	d5, d5, d7
 800628c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8006290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006294:	f57f af41 	bpl.w	800611a <_dtoa_r+0x3ca>
 8006298:	4680      	mov	r8, r0
 800629a:	3801      	subs	r0, #1
 800629c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80062a0:	2b30      	cmp	r3, #48	; 0x30
 80062a2:	d0f9      	beq.n	8006298 <_dtoa_r+0x548>
 80062a4:	4693      	mov	fp, r2
 80062a6:	e02a      	b.n	80062fe <_dtoa_r+0x5ae>
 80062a8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80062ac:	e7d6      	b.n	800625c <_dtoa_r+0x50c>
 80062ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 80062b2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80062b6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80062ba:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80062be:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80062c2:	ee15 3a10 	vmov	r3, s10
 80062c6:	3330      	adds	r3, #48	; 0x30
 80062c8:	f808 3b01 	strb.w	r3, [r8], #1
 80062cc:	9b01      	ldr	r3, [sp, #4]
 80062ce:	eba8 0303 	sub.w	r3, r8, r3
 80062d2:	4599      	cmp	r9, r3
 80062d4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80062d8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80062dc:	d133      	bne.n	8006346 <_dtoa_r+0x5f6>
 80062de:	ee37 7b07 	vadd.f64	d7, d7, d7
 80062e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80062e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ea:	dc1a      	bgt.n	8006322 <_dtoa_r+0x5d2>
 80062ec:	eeb4 7b46 	vcmp.f64	d7, d6
 80062f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062f4:	d103      	bne.n	80062fe <_dtoa_r+0x5ae>
 80062f6:	ee15 3a10 	vmov	r3, s10
 80062fa:	07d9      	lsls	r1, r3, #31
 80062fc:	d411      	bmi.n	8006322 <_dtoa_r+0x5d2>
 80062fe:	4629      	mov	r1, r5
 8006300:	4630      	mov	r0, r6
 8006302:	f000 fbd1 	bl	8006aa8 <_Bfree>
 8006306:	2300      	movs	r3, #0
 8006308:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800630a:	f888 3000 	strb.w	r3, [r8]
 800630e:	f10b 0301 	add.w	r3, fp, #1
 8006312:	6013      	str	r3, [r2, #0]
 8006314:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006316:	2b00      	cmp	r3, #0
 8006318:	f43f ad69 	beq.w	8005dee <_dtoa_r+0x9e>
 800631c:	f8c3 8000 	str.w	r8, [r3]
 8006320:	e565      	b.n	8005dee <_dtoa_r+0x9e>
 8006322:	465a      	mov	r2, fp
 8006324:	4643      	mov	r3, r8
 8006326:	4698      	mov	r8, r3
 8006328:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800632c:	2939      	cmp	r1, #57	; 0x39
 800632e:	d106      	bne.n	800633e <_dtoa_r+0x5ee>
 8006330:	9901      	ldr	r1, [sp, #4]
 8006332:	4299      	cmp	r1, r3
 8006334:	d1f7      	bne.n	8006326 <_dtoa_r+0x5d6>
 8006336:	9801      	ldr	r0, [sp, #4]
 8006338:	2130      	movs	r1, #48	; 0x30
 800633a:	3201      	adds	r2, #1
 800633c:	7001      	strb	r1, [r0, #0]
 800633e:	7819      	ldrb	r1, [r3, #0]
 8006340:	3101      	adds	r1, #1
 8006342:	7019      	strb	r1, [r3, #0]
 8006344:	e7ae      	b.n	80062a4 <_dtoa_r+0x554>
 8006346:	ee27 7b04 	vmul.f64	d7, d7, d4
 800634a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800634e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006352:	d1b2      	bne.n	80062ba <_dtoa_r+0x56a>
 8006354:	e7d3      	b.n	80062fe <_dtoa_r+0x5ae>
 8006356:	bf00      	nop
 8006358:	08007db8 	.word	0x08007db8
 800635c:	08007d90 	.word	0x08007d90
 8006360:	9907      	ldr	r1, [sp, #28]
 8006362:	2900      	cmp	r1, #0
 8006364:	f000 80d0 	beq.w	8006508 <_dtoa_r+0x7b8>
 8006368:	9906      	ldr	r1, [sp, #24]
 800636a:	2901      	cmp	r1, #1
 800636c:	f300 80b4 	bgt.w	80064d8 <_dtoa_r+0x788>
 8006370:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006372:	2900      	cmp	r1, #0
 8006374:	f000 80ac 	beq.w	80064d0 <_dtoa_r+0x780>
 8006378:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800637c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006380:	461c      	mov	r4, r3
 8006382:	9309      	str	r3, [sp, #36]	; 0x24
 8006384:	9b04      	ldr	r3, [sp, #16]
 8006386:	4413      	add	r3, r2
 8006388:	9304      	str	r3, [sp, #16]
 800638a:	9b05      	ldr	r3, [sp, #20]
 800638c:	2101      	movs	r1, #1
 800638e:	4413      	add	r3, r2
 8006390:	4630      	mov	r0, r6
 8006392:	9305      	str	r3, [sp, #20]
 8006394:	f000 fc3e 	bl	8006c14 <__i2b>
 8006398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800639a:	4607      	mov	r7, r0
 800639c:	f1b8 0f00 	cmp.w	r8, #0
 80063a0:	d00d      	beq.n	80063be <_dtoa_r+0x66e>
 80063a2:	9a05      	ldr	r2, [sp, #20]
 80063a4:	2a00      	cmp	r2, #0
 80063a6:	dd0a      	ble.n	80063be <_dtoa_r+0x66e>
 80063a8:	4542      	cmp	r2, r8
 80063aa:	9904      	ldr	r1, [sp, #16]
 80063ac:	bfa8      	it	ge
 80063ae:	4642      	movge	r2, r8
 80063b0:	1a89      	subs	r1, r1, r2
 80063b2:	9104      	str	r1, [sp, #16]
 80063b4:	9905      	ldr	r1, [sp, #20]
 80063b6:	eba8 0802 	sub.w	r8, r8, r2
 80063ba:	1a8a      	subs	r2, r1, r2
 80063bc:	9205      	str	r2, [sp, #20]
 80063be:	b303      	cbz	r3, 8006402 <_dtoa_r+0x6b2>
 80063c0:	9a07      	ldr	r2, [sp, #28]
 80063c2:	2a00      	cmp	r2, #0
 80063c4:	f000 80a5 	beq.w	8006512 <_dtoa_r+0x7c2>
 80063c8:	2c00      	cmp	r4, #0
 80063ca:	dd13      	ble.n	80063f4 <_dtoa_r+0x6a4>
 80063cc:	4639      	mov	r1, r7
 80063ce:	4622      	mov	r2, r4
 80063d0:	4630      	mov	r0, r6
 80063d2:	930d      	str	r3, [sp, #52]	; 0x34
 80063d4:	f000 fcde 	bl	8006d94 <__pow5mult>
 80063d8:	462a      	mov	r2, r5
 80063da:	4601      	mov	r1, r0
 80063dc:	4607      	mov	r7, r0
 80063de:	4630      	mov	r0, r6
 80063e0:	f000 fc2e 	bl	8006c40 <__multiply>
 80063e4:	4629      	mov	r1, r5
 80063e6:	9009      	str	r0, [sp, #36]	; 0x24
 80063e8:	4630      	mov	r0, r6
 80063ea:	f000 fb5d 	bl	8006aa8 <_Bfree>
 80063ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063f2:	4615      	mov	r5, r2
 80063f4:	1b1a      	subs	r2, r3, r4
 80063f6:	d004      	beq.n	8006402 <_dtoa_r+0x6b2>
 80063f8:	4629      	mov	r1, r5
 80063fa:	4630      	mov	r0, r6
 80063fc:	f000 fcca 	bl	8006d94 <__pow5mult>
 8006400:	4605      	mov	r5, r0
 8006402:	2101      	movs	r1, #1
 8006404:	4630      	mov	r0, r6
 8006406:	f000 fc05 	bl	8006c14 <__i2b>
 800640a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800640c:	2b00      	cmp	r3, #0
 800640e:	4604      	mov	r4, r0
 8006410:	f340 8081 	ble.w	8006516 <_dtoa_r+0x7c6>
 8006414:	461a      	mov	r2, r3
 8006416:	4601      	mov	r1, r0
 8006418:	4630      	mov	r0, r6
 800641a:	f000 fcbb 	bl	8006d94 <__pow5mult>
 800641e:	9b06      	ldr	r3, [sp, #24]
 8006420:	2b01      	cmp	r3, #1
 8006422:	4604      	mov	r4, r0
 8006424:	dd7a      	ble.n	800651c <_dtoa_r+0x7cc>
 8006426:	2300      	movs	r3, #0
 8006428:	9309      	str	r3, [sp, #36]	; 0x24
 800642a:	6922      	ldr	r2, [r4, #16]
 800642c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006430:	6910      	ldr	r0, [r2, #16]
 8006432:	f000 fba1 	bl	8006b78 <__hi0bits>
 8006436:	f1c0 0020 	rsb	r0, r0, #32
 800643a:	9b05      	ldr	r3, [sp, #20]
 800643c:	4418      	add	r0, r3
 800643e:	f010 001f 	ands.w	r0, r0, #31
 8006442:	f000 8093 	beq.w	800656c <_dtoa_r+0x81c>
 8006446:	f1c0 0220 	rsb	r2, r0, #32
 800644a:	2a04      	cmp	r2, #4
 800644c:	f340 8085 	ble.w	800655a <_dtoa_r+0x80a>
 8006450:	9b04      	ldr	r3, [sp, #16]
 8006452:	f1c0 001c 	rsb	r0, r0, #28
 8006456:	4403      	add	r3, r0
 8006458:	9304      	str	r3, [sp, #16]
 800645a:	9b05      	ldr	r3, [sp, #20]
 800645c:	4480      	add	r8, r0
 800645e:	4403      	add	r3, r0
 8006460:	9305      	str	r3, [sp, #20]
 8006462:	9b04      	ldr	r3, [sp, #16]
 8006464:	2b00      	cmp	r3, #0
 8006466:	dd05      	ble.n	8006474 <_dtoa_r+0x724>
 8006468:	4629      	mov	r1, r5
 800646a:	461a      	mov	r2, r3
 800646c:	4630      	mov	r0, r6
 800646e:	f000 fceb 	bl	8006e48 <__lshift>
 8006472:	4605      	mov	r5, r0
 8006474:	9b05      	ldr	r3, [sp, #20]
 8006476:	2b00      	cmp	r3, #0
 8006478:	dd05      	ble.n	8006486 <_dtoa_r+0x736>
 800647a:	4621      	mov	r1, r4
 800647c:	461a      	mov	r2, r3
 800647e:	4630      	mov	r0, r6
 8006480:	f000 fce2 	bl	8006e48 <__lshift>
 8006484:	4604      	mov	r4, r0
 8006486:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006488:	2b00      	cmp	r3, #0
 800648a:	d071      	beq.n	8006570 <_dtoa_r+0x820>
 800648c:	4621      	mov	r1, r4
 800648e:	4628      	mov	r0, r5
 8006490:	f000 fd46 	bl	8006f20 <__mcmp>
 8006494:	2800      	cmp	r0, #0
 8006496:	da6b      	bge.n	8006570 <_dtoa_r+0x820>
 8006498:	2300      	movs	r3, #0
 800649a:	4629      	mov	r1, r5
 800649c:	220a      	movs	r2, #10
 800649e:	4630      	mov	r0, r6
 80064a0:	f000 fb24 	bl	8006aec <__multadd>
 80064a4:	9b07      	ldr	r3, [sp, #28]
 80064a6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80064aa:	4605      	mov	r5, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 8197 	beq.w	80067e0 <_dtoa_r+0xa90>
 80064b2:	4639      	mov	r1, r7
 80064b4:	2300      	movs	r3, #0
 80064b6:	220a      	movs	r2, #10
 80064b8:	4630      	mov	r0, r6
 80064ba:	f000 fb17 	bl	8006aec <__multadd>
 80064be:	f1ba 0f00 	cmp.w	sl, #0
 80064c2:	4607      	mov	r7, r0
 80064c4:	f300 8093 	bgt.w	80065ee <_dtoa_r+0x89e>
 80064c8:	9b06      	ldr	r3, [sp, #24]
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	dc57      	bgt.n	800657e <_dtoa_r+0x82e>
 80064ce:	e08e      	b.n	80065ee <_dtoa_r+0x89e>
 80064d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064d2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80064d6:	e751      	b.n	800637c <_dtoa_r+0x62c>
 80064d8:	f109 34ff 	add.w	r4, r9, #4294967295
 80064dc:	42a3      	cmp	r3, r4
 80064de:	bfbf      	itttt	lt
 80064e0:	1ae2      	sublt	r2, r4, r3
 80064e2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80064e4:	189b      	addlt	r3, r3, r2
 80064e6:	930a      	strlt	r3, [sp, #40]	; 0x28
 80064e8:	bfae      	itee	ge
 80064ea:	1b1c      	subge	r4, r3, r4
 80064ec:	4623      	movlt	r3, r4
 80064ee:	2400      	movlt	r4, #0
 80064f0:	f1b9 0f00 	cmp.w	r9, #0
 80064f4:	bfb5      	itete	lt
 80064f6:	9a04      	ldrlt	r2, [sp, #16]
 80064f8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80064fc:	eba2 0809 	sublt.w	r8, r2, r9
 8006500:	464a      	movge	r2, r9
 8006502:	bfb8      	it	lt
 8006504:	2200      	movlt	r2, #0
 8006506:	e73c      	b.n	8006382 <_dtoa_r+0x632>
 8006508:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800650c:	9f07      	ldr	r7, [sp, #28]
 800650e:	461c      	mov	r4, r3
 8006510:	e744      	b.n	800639c <_dtoa_r+0x64c>
 8006512:	461a      	mov	r2, r3
 8006514:	e770      	b.n	80063f8 <_dtoa_r+0x6a8>
 8006516:	9b06      	ldr	r3, [sp, #24]
 8006518:	2b01      	cmp	r3, #1
 800651a:	dc18      	bgt.n	800654e <_dtoa_r+0x7fe>
 800651c:	9b02      	ldr	r3, [sp, #8]
 800651e:	b9b3      	cbnz	r3, 800654e <_dtoa_r+0x7fe>
 8006520:	9b03      	ldr	r3, [sp, #12]
 8006522:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8006526:	b9a2      	cbnz	r2, 8006552 <_dtoa_r+0x802>
 8006528:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800652c:	0d12      	lsrs	r2, r2, #20
 800652e:	0512      	lsls	r2, r2, #20
 8006530:	b18a      	cbz	r2, 8006556 <_dtoa_r+0x806>
 8006532:	9b04      	ldr	r3, [sp, #16]
 8006534:	3301      	adds	r3, #1
 8006536:	9304      	str	r3, [sp, #16]
 8006538:	9b05      	ldr	r3, [sp, #20]
 800653a:	3301      	adds	r3, #1
 800653c:	9305      	str	r3, [sp, #20]
 800653e:	2301      	movs	r3, #1
 8006540:	9309      	str	r3, [sp, #36]	; 0x24
 8006542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006544:	2b00      	cmp	r3, #0
 8006546:	f47f af70 	bne.w	800642a <_dtoa_r+0x6da>
 800654a:	2001      	movs	r0, #1
 800654c:	e775      	b.n	800643a <_dtoa_r+0x6ea>
 800654e:	2300      	movs	r3, #0
 8006550:	e7f6      	b.n	8006540 <_dtoa_r+0x7f0>
 8006552:	9b02      	ldr	r3, [sp, #8]
 8006554:	e7f4      	b.n	8006540 <_dtoa_r+0x7f0>
 8006556:	9209      	str	r2, [sp, #36]	; 0x24
 8006558:	e7f3      	b.n	8006542 <_dtoa_r+0x7f2>
 800655a:	d082      	beq.n	8006462 <_dtoa_r+0x712>
 800655c:	9b04      	ldr	r3, [sp, #16]
 800655e:	321c      	adds	r2, #28
 8006560:	4413      	add	r3, r2
 8006562:	9304      	str	r3, [sp, #16]
 8006564:	9b05      	ldr	r3, [sp, #20]
 8006566:	4490      	add	r8, r2
 8006568:	4413      	add	r3, r2
 800656a:	e779      	b.n	8006460 <_dtoa_r+0x710>
 800656c:	4602      	mov	r2, r0
 800656e:	e7f5      	b.n	800655c <_dtoa_r+0x80c>
 8006570:	f1b9 0f00 	cmp.w	r9, #0
 8006574:	dc36      	bgt.n	80065e4 <_dtoa_r+0x894>
 8006576:	9b06      	ldr	r3, [sp, #24]
 8006578:	2b02      	cmp	r3, #2
 800657a:	dd33      	ble.n	80065e4 <_dtoa_r+0x894>
 800657c:	46ca      	mov	sl, r9
 800657e:	f1ba 0f00 	cmp.w	sl, #0
 8006582:	d10d      	bne.n	80065a0 <_dtoa_r+0x850>
 8006584:	4621      	mov	r1, r4
 8006586:	4653      	mov	r3, sl
 8006588:	2205      	movs	r2, #5
 800658a:	4630      	mov	r0, r6
 800658c:	f000 faae 	bl	8006aec <__multadd>
 8006590:	4601      	mov	r1, r0
 8006592:	4604      	mov	r4, r0
 8006594:	4628      	mov	r0, r5
 8006596:	f000 fcc3 	bl	8006f20 <__mcmp>
 800659a:	2800      	cmp	r0, #0
 800659c:	f73f ade4 	bgt.w	8006168 <_dtoa_r+0x418>
 80065a0:	9b08      	ldr	r3, [sp, #32]
 80065a2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80065a6:	ea6f 0b03 	mvn.w	fp, r3
 80065aa:	f04f 0900 	mov.w	r9, #0
 80065ae:	4621      	mov	r1, r4
 80065b0:	4630      	mov	r0, r6
 80065b2:	f000 fa79 	bl	8006aa8 <_Bfree>
 80065b6:	2f00      	cmp	r7, #0
 80065b8:	f43f aea1 	beq.w	80062fe <_dtoa_r+0x5ae>
 80065bc:	f1b9 0f00 	cmp.w	r9, #0
 80065c0:	d005      	beq.n	80065ce <_dtoa_r+0x87e>
 80065c2:	45b9      	cmp	r9, r7
 80065c4:	d003      	beq.n	80065ce <_dtoa_r+0x87e>
 80065c6:	4649      	mov	r1, r9
 80065c8:	4630      	mov	r0, r6
 80065ca:	f000 fa6d 	bl	8006aa8 <_Bfree>
 80065ce:	4639      	mov	r1, r7
 80065d0:	4630      	mov	r0, r6
 80065d2:	f000 fa69 	bl	8006aa8 <_Bfree>
 80065d6:	e692      	b.n	80062fe <_dtoa_r+0x5ae>
 80065d8:	2400      	movs	r4, #0
 80065da:	4627      	mov	r7, r4
 80065dc:	e7e0      	b.n	80065a0 <_dtoa_r+0x850>
 80065de:	4693      	mov	fp, r2
 80065e0:	4627      	mov	r7, r4
 80065e2:	e5c1      	b.n	8006168 <_dtoa_r+0x418>
 80065e4:	9b07      	ldr	r3, [sp, #28]
 80065e6:	46ca      	mov	sl, r9
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f000 8100 	beq.w	80067ee <_dtoa_r+0xa9e>
 80065ee:	f1b8 0f00 	cmp.w	r8, #0
 80065f2:	dd05      	ble.n	8006600 <_dtoa_r+0x8b0>
 80065f4:	4639      	mov	r1, r7
 80065f6:	4642      	mov	r2, r8
 80065f8:	4630      	mov	r0, r6
 80065fa:	f000 fc25 	bl	8006e48 <__lshift>
 80065fe:	4607      	mov	r7, r0
 8006600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006602:	2b00      	cmp	r3, #0
 8006604:	d05d      	beq.n	80066c2 <_dtoa_r+0x972>
 8006606:	6879      	ldr	r1, [r7, #4]
 8006608:	4630      	mov	r0, r6
 800660a:	f000 fa0d 	bl	8006a28 <_Balloc>
 800660e:	4680      	mov	r8, r0
 8006610:	b928      	cbnz	r0, 800661e <_dtoa_r+0x8ce>
 8006612:	4b82      	ldr	r3, [pc, #520]	; (800681c <_dtoa_r+0xacc>)
 8006614:	4602      	mov	r2, r0
 8006616:	f240 21ef 	movw	r1, #751	; 0x2ef
 800661a:	f7ff bbb1 	b.w	8005d80 <_dtoa_r+0x30>
 800661e:	693a      	ldr	r2, [r7, #16]
 8006620:	3202      	adds	r2, #2
 8006622:	0092      	lsls	r2, r2, #2
 8006624:	f107 010c 	add.w	r1, r7, #12
 8006628:	300c      	adds	r0, #12
 800662a:	f000 ffa9 	bl	8007580 <memcpy>
 800662e:	2201      	movs	r2, #1
 8006630:	4641      	mov	r1, r8
 8006632:	4630      	mov	r0, r6
 8006634:	f000 fc08 	bl	8006e48 <__lshift>
 8006638:	9b01      	ldr	r3, [sp, #4]
 800663a:	3301      	adds	r3, #1
 800663c:	9304      	str	r3, [sp, #16]
 800663e:	9b01      	ldr	r3, [sp, #4]
 8006640:	4453      	add	r3, sl
 8006642:	9308      	str	r3, [sp, #32]
 8006644:	9b02      	ldr	r3, [sp, #8]
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	46b9      	mov	r9, r7
 800664c:	9307      	str	r3, [sp, #28]
 800664e:	4607      	mov	r7, r0
 8006650:	9b04      	ldr	r3, [sp, #16]
 8006652:	4621      	mov	r1, r4
 8006654:	3b01      	subs	r3, #1
 8006656:	4628      	mov	r0, r5
 8006658:	9302      	str	r3, [sp, #8]
 800665a:	f7ff faf0 	bl	8005c3e <quorem>
 800665e:	4603      	mov	r3, r0
 8006660:	3330      	adds	r3, #48	; 0x30
 8006662:	9005      	str	r0, [sp, #20]
 8006664:	4649      	mov	r1, r9
 8006666:	4628      	mov	r0, r5
 8006668:	9309      	str	r3, [sp, #36]	; 0x24
 800666a:	f000 fc59 	bl	8006f20 <__mcmp>
 800666e:	463a      	mov	r2, r7
 8006670:	4682      	mov	sl, r0
 8006672:	4621      	mov	r1, r4
 8006674:	4630      	mov	r0, r6
 8006676:	f000 fc6f 	bl	8006f58 <__mdiff>
 800667a:	68c2      	ldr	r2, [r0, #12]
 800667c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800667e:	4680      	mov	r8, r0
 8006680:	bb0a      	cbnz	r2, 80066c6 <_dtoa_r+0x976>
 8006682:	4601      	mov	r1, r0
 8006684:	4628      	mov	r0, r5
 8006686:	f000 fc4b 	bl	8006f20 <__mcmp>
 800668a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800668c:	4602      	mov	r2, r0
 800668e:	4641      	mov	r1, r8
 8006690:	4630      	mov	r0, r6
 8006692:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8006696:	f000 fa07 	bl	8006aa8 <_Bfree>
 800669a:	9b06      	ldr	r3, [sp, #24]
 800669c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800669e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80066a2:	ea43 0102 	orr.w	r1, r3, r2
 80066a6:	9b07      	ldr	r3, [sp, #28]
 80066a8:	4319      	orrs	r1, r3
 80066aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066ac:	d10d      	bne.n	80066ca <_dtoa_r+0x97a>
 80066ae:	2b39      	cmp	r3, #57	; 0x39
 80066b0:	d029      	beq.n	8006706 <_dtoa_r+0x9b6>
 80066b2:	f1ba 0f00 	cmp.w	sl, #0
 80066b6:	dd01      	ble.n	80066bc <_dtoa_r+0x96c>
 80066b8:	9b05      	ldr	r3, [sp, #20]
 80066ba:	3331      	adds	r3, #49	; 0x31
 80066bc:	9a02      	ldr	r2, [sp, #8]
 80066be:	7013      	strb	r3, [r2, #0]
 80066c0:	e775      	b.n	80065ae <_dtoa_r+0x85e>
 80066c2:	4638      	mov	r0, r7
 80066c4:	e7b8      	b.n	8006638 <_dtoa_r+0x8e8>
 80066c6:	2201      	movs	r2, #1
 80066c8:	e7e1      	b.n	800668e <_dtoa_r+0x93e>
 80066ca:	f1ba 0f00 	cmp.w	sl, #0
 80066ce:	db06      	blt.n	80066de <_dtoa_r+0x98e>
 80066d0:	9906      	ldr	r1, [sp, #24]
 80066d2:	ea41 0a0a 	orr.w	sl, r1, sl
 80066d6:	9907      	ldr	r1, [sp, #28]
 80066d8:	ea5a 0a01 	orrs.w	sl, sl, r1
 80066dc:	d120      	bne.n	8006720 <_dtoa_r+0x9d0>
 80066de:	2a00      	cmp	r2, #0
 80066e0:	ddec      	ble.n	80066bc <_dtoa_r+0x96c>
 80066e2:	4629      	mov	r1, r5
 80066e4:	2201      	movs	r2, #1
 80066e6:	4630      	mov	r0, r6
 80066e8:	9304      	str	r3, [sp, #16]
 80066ea:	f000 fbad 	bl	8006e48 <__lshift>
 80066ee:	4621      	mov	r1, r4
 80066f0:	4605      	mov	r5, r0
 80066f2:	f000 fc15 	bl	8006f20 <__mcmp>
 80066f6:	2800      	cmp	r0, #0
 80066f8:	9b04      	ldr	r3, [sp, #16]
 80066fa:	dc02      	bgt.n	8006702 <_dtoa_r+0x9b2>
 80066fc:	d1de      	bne.n	80066bc <_dtoa_r+0x96c>
 80066fe:	07da      	lsls	r2, r3, #31
 8006700:	d5dc      	bpl.n	80066bc <_dtoa_r+0x96c>
 8006702:	2b39      	cmp	r3, #57	; 0x39
 8006704:	d1d8      	bne.n	80066b8 <_dtoa_r+0x968>
 8006706:	9a02      	ldr	r2, [sp, #8]
 8006708:	2339      	movs	r3, #57	; 0x39
 800670a:	7013      	strb	r3, [r2, #0]
 800670c:	4643      	mov	r3, r8
 800670e:	4698      	mov	r8, r3
 8006710:	3b01      	subs	r3, #1
 8006712:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8006716:	2a39      	cmp	r2, #57	; 0x39
 8006718:	d051      	beq.n	80067be <_dtoa_r+0xa6e>
 800671a:	3201      	adds	r2, #1
 800671c:	701a      	strb	r2, [r3, #0]
 800671e:	e746      	b.n	80065ae <_dtoa_r+0x85e>
 8006720:	2a00      	cmp	r2, #0
 8006722:	dd03      	ble.n	800672c <_dtoa_r+0x9dc>
 8006724:	2b39      	cmp	r3, #57	; 0x39
 8006726:	d0ee      	beq.n	8006706 <_dtoa_r+0x9b6>
 8006728:	3301      	adds	r3, #1
 800672a:	e7c7      	b.n	80066bc <_dtoa_r+0x96c>
 800672c:	9a04      	ldr	r2, [sp, #16]
 800672e:	9908      	ldr	r1, [sp, #32]
 8006730:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006734:	428a      	cmp	r2, r1
 8006736:	d02b      	beq.n	8006790 <_dtoa_r+0xa40>
 8006738:	4629      	mov	r1, r5
 800673a:	2300      	movs	r3, #0
 800673c:	220a      	movs	r2, #10
 800673e:	4630      	mov	r0, r6
 8006740:	f000 f9d4 	bl	8006aec <__multadd>
 8006744:	45b9      	cmp	r9, r7
 8006746:	4605      	mov	r5, r0
 8006748:	f04f 0300 	mov.w	r3, #0
 800674c:	f04f 020a 	mov.w	r2, #10
 8006750:	4649      	mov	r1, r9
 8006752:	4630      	mov	r0, r6
 8006754:	d107      	bne.n	8006766 <_dtoa_r+0xa16>
 8006756:	f000 f9c9 	bl	8006aec <__multadd>
 800675a:	4681      	mov	r9, r0
 800675c:	4607      	mov	r7, r0
 800675e:	9b04      	ldr	r3, [sp, #16]
 8006760:	3301      	adds	r3, #1
 8006762:	9304      	str	r3, [sp, #16]
 8006764:	e774      	b.n	8006650 <_dtoa_r+0x900>
 8006766:	f000 f9c1 	bl	8006aec <__multadd>
 800676a:	4639      	mov	r1, r7
 800676c:	4681      	mov	r9, r0
 800676e:	2300      	movs	r3, #0
 8006770:	220a      	movs	r2, #10
 8006772:	4630      	mov	r0, r6
 8006774:	f000 f9ba 	bl	8006aec <__multadd>
 8006778:	4607      	mov	r7, r0
 800677a:	e7f0      	b.n	800675e <_dtoa_r+0xa0e>
 800677c:	f1ba 0f00 	cmp.w	sl, #0
 8006780:	9a01      	ldr	r2, [sp, #4]
 8006782:	bfcc      	ite	gt
 8006784:	46d0      	movgt	r8, sl
 8006786:	f04f 0801 	movle.w	r8, #1
 800678a:	4490      	add	r8, r2
 800678c:	f04f 0900 	mov.w	r9, #0
 8006790:	4629      	mov	r1, r5
 8006792:	2201      	movs	r2, #1
 8006794:	4630      	mov	r0, r6
 8006796:	9302      	str	r3, [sp, #8]
 8006798:	f000 fb56 	bl	8006e48 <__lshift>
 800679c:	4621      	mov	r1, r4
 800679e:	4605      	mov	r5, r0
 80067a0:	f000 fbbe 	bl	8006f20 <__mcmp>
 80067a4:	2800      	cmp	r0, #0
 80067a6:	dcb1      	bgt.n	800670c <_dtoa_r+0x9bc>
 80067a8:	d102      	bne.n	80067b0 <_dtoa_r+0xa60>
 80067aa:	9b02      	ldr	r3, [sp, #8]
 80067ac:	07db      	lsls	r3, r3, #31
 80067ae:	d4ad      	bmi.n	800670c <_dtoa_r+0x9bc>
 80067b0:	4643      	mov	r3, r8
 80067b2:	4698      	mov	r8, r3
 80067b4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067b8:	2a30      	cmp	r2, #48	; 0x30
 80067ba:	d0fa      	beq.n	80067b2 <_dtoa_r+0xa62>
 80067bc:	e6f7      	b.n	80065ae <_dtoa_r+0x85e>
 80067be:	9a01      	ldr	r2, [sp, #4]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d1a4      	bne.n	800670e <_dtoa_r+0x9be>
 80067c4:	f10b 0b01 	add.w	fp, fp, #1
 80067c8:	2331      	movs	r3, #49	; 0x31
 80067ca:	e778      	b.n	80066be <_dtoa_r+0x96e>
 80067cc:	4b14      	ldr	r3, [pc, #80]	; (8006820 <_dtoa_r+0xad0>)
 80067ce:	f7ff bb2a 	b.w	8005e26 <_dtoa_r+0xd6>
 80067d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f47f ab05 	bne.w	8005de4 <_dtoa_r+0x94>
 80067da:	4b12      	ldr	r3, [pc, #72]	; (8006824 <_dtoa_r+0xad4>)
 80067dc:	f7ff bb23 	b.w	8005e26 <_dtoa_r+0xd6>
 80067e0:	f1ba 0f00 	cmp.w	sl, #0
 80067e4:	dc03      	bgt.n	80067ee <_dtoa_r+0xa9e>
 80067e6:	9b06      	ldr	r3, [sp, #24]
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	f73f aec8 	bgt.w	800657e <_dtoa_r+0x82e>
 80067ee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80067f2:	4621      	mov	r1, r4
 80067f4:	4628      	mov	r0, r5
 80067f6:	f7ff fa22 	bl	8005c3e <quorem>
 80067fa:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80067fe:	f808 3b01 	strb.w	r3, [r8], #1
 8006802:	9a01      	ldr	r2, [sp, #4]
 8006804:	eba8 0202 	sub.w	r2, r8, r2
 8006808:	4592      	cmp	sl, r2
 800680a:	ddb7      	ble.n	800677c <_dtoa_r+0xa2c>
 800680c:	4629      	mov	r1, r5
 800680e:	2300      	movs	r3, #0
 8006810:	220a      	movs	r2, #10
 8006812:	4630      	mov	r0, r6
 8006814:	f000 f96a 	bl	8006aec <__multadd>
 8006818:	4605      	mov	r5, r0
 800681a:	e7ea      	b.n	80067f2 <_dtoa_r+0xaa2>
 800681c:	08007d24 	.word	0x08007d24
 8006820:	08007c84 	.word	0x08007c84
 8006824:	08007ca8 	.word	0x08007ca8

08006828 <_free_r>:
 8006828:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800682a:	2900      	cmp	r1, #0
 800682c:	d044      	beq.n	80068b8 <_free_r+0x90>
 800682e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006832:	9001      	str	r0, [sp, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	f1a1 0404 	sub.w	r4, r1, #4
 800683a:	bfb8      	it	lt
 800683c:	18e4      	addlt	r4, r4, r3
 800683e:	f000 f8e7 	bl	8006a10 <__malloc_lock>
 8006842:	4a1e      	ldr	r2, [pc, #120]	; (80068bc <_free_r+0x94>)
 8006844:	9801      	ldr	r0, [sp, #4]
 8006846:	6813      	ldr	r3, [r2, #0]
 8006848:	b933      	cbnz	r3, 8006858 <_free_r+0x30>
 800684a:	6063      	str	r3, [r4, #4]
 800684c:	6014      	str	r4, [r2, #0]
 800684e:	b003      	add	sp, #12
 8006850:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006854:	f000 b8e2 	b.w	8006a1c <__malloc_unlock>
 8006858:	42a3      	cmp	r3, r4
 800685a:	d908      	bls.n	800686e <_free_r+0x46>
 800685c:	6825      	ldr	r5, [r4, #0]
 800685e:	1961      	adds	r1, r4, r5
 8006860:	428b      	cmp	r3, r1
 8006862:	bf01      	itttt	eq
 8006864:	6819      	ldreq	r1, [r3, #0]
 8006866:	685b      	ldreq	r3, [r3, #4]
 8006868:	1949      	addeq	r1, r1, r5
 800686a:	6021      	streq	r1, [r4, #0]
 800686c:	e7ed      	b.n	800684a <_free_r+0x22>
 800686e:	461a      	mov	r2, r3
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	b10b      	cbz	r3, 8006878 <_free_r+0x50>
 8006874:	42a3      	cmp	r3, r4
 8006876:	d9fa      	bls.n	800686e <_free_r+0x46>
 8006878:	6811      	ldr	r1, [r2, #0]
 800687a:	1855      	adds	r5, r2, r1
 800687c:	42a5      	cmp	r5, r4
 800687e:	d10b      	bne.n	8006898 <_free_r+0x70>
 8006880:	6824      	ldr	r4, [r4, #0]
 8006882:	4421      	add	r1, r4
 8006884:	1854      	adds	r4, r2, r1
 8006886:	42a3      	cmp	r3, r4
 8006888:	6011      	str	r1, [r2, #0]
 800688a:	d1e0      	bne.n	800684e <_free_r+0x26>
 800688c:	681c      	ldr	r4, [r3, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	6053      	str	r3, [r2, #4]
 8006892:	440c      	add	r4, r1
 8006894:	6014      	str	r4, [r2, #0]
 8006896:	e7da      	b.n	800684e <_free_r+0x26>
 8006898:	d902      	bls.n	80068a0 <_free_r+0x78>
 800689a:	230c      	movs	r3, #12
 800689c:	6003      	str	r3, [r0, #0]
 800689e:	e7d6      	b.n	800684e <_free_r+0x26>
 80068a0:	6825      	ldr	r5, [r4, #0]
 80068a2:	1961      	adds	r1, r4, r5
 80068a4:	428b      	cmp	r3, r1
 80068a6:	bf04      	itt	eq
 80068a8:	6819      	ldreq	r1, [r3, #0]
 80068aa:	685b      	ldreq	r3, [r3, #4]
 80068ac:	6063      	str	r3, [r4, #4]
 80068ae:	bf04      	itt	eq
 80068b0:	1949      	addeq	r1, r1, r5
 80068b2:	6021      	streq	r1, [r4, #0]
 80068b4:	6054      	str	r4, [r2, #4]
 80068b6:	e7ca      	b.n	800684e <_free_r+0x26>
 80068b8:	b003      	add	sp, #12
 80068ba:	bd30      	pop	{r4, r5, pc}
 80068bc:	20000bf8 	.word	0x20000bf8

080068c0 <malloc>:
 80068c0:	4b02      	ldr	r3, [pc, #8]	; (80068cc <malloc+0xc>)
 80068c2:	4601      	mov	r1, r0
 80068c4:	6818      	ldr	r0, [r3, #0]
 80068c6:	f000 b823 	b.w	8006910 <_malloc_r>
 80068ca:	bf00      	nop
 80068cc:	20000064 	.word	0x20000064

080068d0 <sbrk_aligned>:
 80068d0:	b570      	push	{r4, r5, r6, lr}
 80068d2:	4e0e      	ldr	r6, [pc, #56]	; (800690c <sbrk_aligned+0x3c>)
 80068d4:	460c      	mov	r4, r1
 80068d6:	6831      	ldr	r1, [r6, #0]
 80068d8:	4605      	mov	r5, r0
 80068da:	b911      	cbnz	r1, 80068e2 <sbrk_aligned+0x12>
 80068dc:	f000 fe40 	bl	8007560 <_sbrk_r>
 80068e0:	6030      	str	r0, [r6, #0]
 80068e2:	4621      	mov	r1, r4
 80068e4:	4628      	mov	r0, r5
 80068e6:	f000 fe3b 	bl	8007560 <_sbrk_r>
 80068ea:	1c43      	adds	r3, r0, #1
 80068ec:	d00a      	beq.n	8006904 <sbrk_aligned+0x34>
 80068ee:	1cc4      	adds	r4, r0, #3
 80068f0:	f024 0403 	bic.w	r4, r4, #3
 80068f4:	42a0      	cmp	r0, r4
 80068f6:	d007      	beq.n	8006908 <sbrk_aligned+0x38>
 80068f8:	1a21      	subs	r1, r4, r0
 80068fa:	4628      	mov	r0, r5
 80068fc:	f000 fe30 	bl	8007560 <_sbrk_r>
 8006900:	3001      	adds	r0, #1
 8006902:	d101      	bne.n	8006908 <sbrk_aligned+0x38>
 8006904:	f04f 34ff 	mov.w	r4, #4294967295
 8006908:	4620      	mov	r0, r4
 800690a:	bd70      	pop	{r4, r5, r6, pc}
 800690c:	20000bfc 	.word	0x20000bfc

08006910 <_malloc_r>:
 8006910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006914:	1ccd      	adds	r5, r1, #3
 8006916:	f025 0503 	bic.w	r5, r5, #3
 800691a:	3508      	adds	r5, #8
 800691c:	2d0c      	cmp	r5, #12
 800691e:	bf38      	it	cc
 8006920:	250c      	movcc	r5, #12
 8006922:	2d00      	cmp	r5, #0
 8006924:	4607      	mov	r7, r0
 8006926:	db01      	blt.n	800692c <_malloc_r+0x1c>
 8006928:	42a9      	cmp	r1, r5
 800692a:	d905      	bls.n	8006938 <_malloc_r+0x28>
 800692c:	230c      	movs	r3, #12
 800692e:	603b      	str	r3, [r7, #0]
 8006930:	2600      	movs	r6, #0
 8006932:	4630      	mov	r0, r6
 8006934:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006938:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006a0c <_malloc_r+0xfc>
 800693c:	f000 f868 	bl	8006a10 <__malloc_lock>
 8006940:	f8d8 3000 	ldr.w	r3, [r8]
 8006944:	461c      	mov	r4, r3
 8006946:	bb5c      	cbnz	r4, 80069a0 <_malloc_r+0x90>
 8006948:	4629      	mov	r1, r5
 800694a:	4638      	mov	r0, r7
 800694c:	f7ff ffc0 	bl	80068d0 <sbrk_aligned>
 8006950:	1c43      	adds	r3, r0, #1
 8006952:	4604      	mov	r4, r0
 8006954:	d155      	bne.n	8006a02 <_malloc_r+0xf2>
 8006956:	f8d8 4000 	ldr.w	r4, [r8]
 800695a:	4626      	mov	r6, r4
 800695c:	2e00      	cmp	r6, #0
 800695e:	d145      	bne.n	80069ec <_malloc_r+0xdc>
 8006960:	2c00      	cmp	r4, #0
 8006962:	d048      	beq.n	80069f6 <_malloc_r+0xe6>
 8006964:	6823      	ldr	r3, [r4, #0]
 8006966:	4631      	mov	r1, r6
 8006968:	4638      	mov	r0, r7
 800696a:	eb04 0903 	add.w	r9, r4, r3
 800696e:	f000 fdf7 	bl	8007560 <_sbrk_r>
 8006972:	4581      	cmp	r9, r0
 8006974:	d13f      	bne.n	80069f6 <_malloc_r+0xe6>
 8006976:	6821      	ldr	r1, [r4, #0]
 8006978:	1a6d      	subs	r5, r5, r1
 800697a:	4629      	mov	r1, r5
 800697c:	4638      	mov	r0, r7
 800697e:	f7ff ffa7 	bl	80068d0 <sbrk_aligned>
 8006982:	3001      	adds	r0, #1
 8006984:	d037      	beq.n	80069f6 <_malloc_r+0xe6>
 8006986:	6823      	ldr	r3, [r4, #0]
 8006988:	442b      	add	r3, r5
 800698a:	6023      	str	r3, [r4, #0]
 800698c:	f8d8 3000 	ldr.w	r3, [r8]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d038      	beq.n	8006a06 <_malloc_r+0xf6>
 8006994:	685a      	ldr	r2, [r3, #4]
 8006996:	42a2      	cmp	r2, r4
 8006998:	d12b      	bne.n	80069f2 <_malloc_r+0xe2>
 800699a:	2200      	movs	r2, #0
 800699c:	605a      	str	r2, [r3, #4]
 800699e:	e00f      	b.n	80069c0 <_malloc_r+0xb0>
 80069a0:	6822      	ldr	r2, [r4, #0]
 80069a2:	1b52      	subs	r2, r2, r5
 80069a4:	d41f      	bmi.n	80069e6 <_malloc_r+0xd6>
 80069a6:	2a0b      	cmp	r2, #11
 80069a8:	d917      	bls.n	80069da <_malloc_r+0xca>
 80069aa:	1961      	adds	r1, r4, r5
 80069ac:	42a3      	cmp	r3, r4
 80069ae:	6025      	str	r5, [r4, #0]
 80069b0:	bf18      	it	ne
 80069b2:	6059      	strne	r1, [r3, #4]
 80069b4:	6863      	ldr	r3, [r4, #4]
 80069b6:	bf08      	it	eq
 80069b8:	f8c8 1000 	streq.w	r1, [r8]
 80069bc:	5162      	str	r2, [r4, r5]
 80069be:	604b      	str	r3, [r1, #4]
 80069c0:	4638      	mov	r0, r7
 80069c2:	f104 060b 	add.w	r6, r4, #11
 80069c6:	f000 f829 	bl	8006a1c <__malloc_unlock>
 80069ca:	f026 0607 	bic.w	r6, r6, #7
 80069ce:	1d23      	adds	r3, r4, #4
 80069d0:	1af2      	subs	r2, r6, r3
 80069d2:	d0ae      	beq.n	8006932 <_malloc_r+0x22>
 80069d4:	1b9b      	subs	r3, r3, r6
 80069d6:	50a3      	str	r3, [r4, r2]
 80069d8:	e7ab      	b.n	8006932 <_malloc_r+0x22>
 80069da:	42a3      	cmp	r3, r4
 80069dc:	6862      	ldr	r2, [r4, #4]
 80069de:	d1dd      	bne.n	800699c <_malloc_r+0x8c>
 80069e0:	f8c8 2000 	str.w	r2, [r8]
 80069e4:	e7ec      	b.n	80069c0 <_malloc_r+0xb0>
 80069e6:	4623      	mov	r3, r4
 80069e8:	6864      	ldr	r4, [r4, #4]
 80069ea:	e7ac      	b.n	8006946 <_malloc_r+0x36>
 80069ec:	4634      	mov	r4, r6
 80069ee:	6876      	ldr	r6, [r6, #4]
 80069f0:	e7b4      	b.n	800695c <_malloc_r+0x4c>
 80069f2:	4613      	mov	r3, r2
 80069f4:	e7cc      	b.n	8006990 <_malloc_r+0x80>
 80069f6:	230c      	movs	r3, #12
 80069f8:	603b      	str	r3, [r7, #0]
 80069fa:	4638      	mov	r0, r7
 80069fc:	f000 f80e 	bl	8006a1c <__malloc_unlock>
 8006a00:	e797      	b.n	8006932 <_malloc_r+0x22>
 8006a02:	6025      	str	r5, [r4, #0]
 8006a04:	e7dc      	b.n	80069c0 <_malloc_r+0xb0>
 8006a06:	605b      	str	r3, [r3, #4]
 8006a08:	deff      	udf	#255	; 0xff
 8006a0a:	bf00      	nop
 8006a0c:	20000bf8 	.word	0x20000bf8

08006a10 <__malloc_lock>:
 8006a10:	4801      	ldr	r0, [pc, #4]	; (8006a18 <__malloc_lock+0x8>)
 8006a12:	f7ff b912 	b.w	8005c3a <__retarget_lock_acquire_recursive>
 8006a16:	bf00      	nop
 8006a18:	20000bf4 	.word	0x20000bf4

08006a1c <__malloc_unlock>:
 8006a1c:	4801      	ldr	r0, [pc, #4]	; (8006a24 <__malloc_unlock+0x8>)
 8006a1e:	f7ff b90d 	b.w	8005c3c <__retarget_lock_release_recursive>
 8006a22:	bf00      	nop
 8006a24:	20000bf4 	.word	0x20000bf4

08006a28 <_Balloc>:
 8006a28:	b570      	push	{r4, r5, r6, lr}
 8006a2a:	69c6      	ldr	r6, [r0, #28]
 8006a2c:	4604      	mov	r4, r0
 8006a2e:	460d      	mov	r5, r1
 8006a30:	b976      	cbnz	r6, 8006a50 <_Balloc+0x28>
 8006a32:	2010      	movs	r0, #16
 8006a34:	f7ff ff44 	bl	80068c0 <malloc>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	61e0      	str	r0, [r4, #28]
 8006a3c:	b920      	cbnz	r0, 8006a48 <_Balloc+0x20>
 8006a3e:	4b18      	ldr	r3, [pc, #96]	; (8006aa0 <_Balloc+0x78>)
 8006a40:	4818      	ldr	r0, [pc, #96]	; (8006aa4 <_Balloc+0x7c>)
 8006a42:	216b      	movs	r1, #107	; 0x6b
 8006a44:	f000 fdaa 	bl	800759c <__assert_func>
 8006a48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a4c:	6006      	str	r6, [r0, #0]
 8006a4e:	60c6      	str	r6, [r0, #12]
 8006a50:	69e6      	ldr	r6, [r4, #28]
 8006a52:	68f3      	ldr	r3, [r6, #12]
 8006a54:	b183      	cbz	r3, 8006a78 <_Balloc+0x50>
 8006a56:	69e3      	ldr	r3, [r4, #28]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006a5e:	b9b8      	cbnz	r0, 8006a90 <_Balloc+0x68>
 8006a60:	2101      	movs	r1, #1
 8006a62:	fa01 f605 	lsl.w	r6, r1, r5
 8006a66:	1d72      	adds	r2, r6, #5
 8006a68:	0092      	lsls	r2, r2, #2
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	f000 fdb4 	bl	80075d8 <_calloc_r>
 8006a70:	b160      	cbz	r0, 8006a8c <_Balloc+0x64>
 8006a72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a76:	e00e      	b.n	8006a96 <_Balloc+0x6e>
 8006a78:	2221      	movs	r2, #33	; 0x21
 8006a7a:	2104      	movs	r1, #4
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	f000 fdab 	bl	80075d8 <_calloc_r>
 8006a82:	69e3      	ldr	r3, [r4, #28]
 8006a84:	60f0      	str	r0, [r6, #12]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1e4      	bne.n	8006a56 <_Balloc+0x2e>
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	bd70      	pop	{r4, r5, r6, pc}
 8006a90:	6802      	ldr	r2, [r0, #0]
 8006a92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a96:	2300      	movs	r3, #0
 8006a98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a9c:	e7f7      	b.n	8006a8e <_Balloc+0x66>
 8006a9e:	bf00      	nop
 8006aa0:	08007cb5 	.word	0x08007cb5
 8006aa4:	08007d35 	.word	0x08007d35

08006aa8 <_Bfree>:
 8006aa8:	b570      	push	{r4, r5, r6, lr}
 8006aaa:	69c6      	ldr	r6, [r0, #28]
 8006aac:	4605      	mov	r5, r0
 8006aae:	460c      	mov	r4, r1
 8006ab0:	b976      	cbnz	r6, 8006ad0 <_Bfree+0x28>
 8006ab2:	2010      	movs	r0, #16
 8006ab4:	f7ff ff04 	bl	80068c0 <malloc>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	61e8      	str	r0, [r5, #28]
 8006abc:	b920      	cbnz	r0, 8006ac8 <_Bfree+0x20>
 8006abe:	4b09      	ldr	r3, [pc, #36]	; (8006ae4 <_Bfree+0x3c>)
 8006ac0:	4809      	ldr	r0, [pc, #36]	; (8006ae8 <_Bfree+0x40>)
 8006ac2:	218f      	movs	r1, #143	; 0x8f
 8006ac4:	f000 fd6a 	bl	800759c <__assert_func>
 8006ac8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006acc:	6006      	str	r6, [r0, #0]
 8006ace:	60c6      	str	r6, [r0, #12]
 8006ad0:	b13c      	cbz	r4, 8006ae2 <_Bfree+0x3a>
 8006ad2:	69eb      	ldr	r3, [r5, #28]
 8006ad4:	6862      	ldr	r2, [r4, #4]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006adc:	6021      	str	r1, [r4, #0]
 8006ade:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ae2:	bd70      	pop	{r4, r5, r6, pc}
 8006ae4:	08007cb5 	.word	0x08007cb5
 8006ae8:	08007d35 	.word	0x08007d35

08006aec <__multadd>:
 8006aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006af0:	690d      	ldr	r5, [r1, #16]
 8006af2:	4607      	mov	r7, r0
 8006af4:	460c      	mov	r4, r1
 8006af6:	461e      	mov	r6, r3
 8006af8:	f101 0c14 	add.w	ip, r1, #20
 8006afc:	2000      	movs	r0, #0
 8006afe:	f8dc 3000 	ldr.w	r3, [ip]
 8006b02:	b299      	uxth	r1, r3
 8006b04:	fb02 6101 	mla	r1, r2, r1, r6
 8006b08:	0c1e      	lsrs	r6, r3, #16
 8006b0a:	0c0b      	lsrs	r3, r1, #16
 8006b0c:	fb02 3306 	mla	r3, r2, r6, r3
 8006b10:	b289      	uxth	r1, r1
 8006b12:	3001      	adds	r0, #1
 8006b14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006b18:	4285      	cmp	r5, r0
 8006b1a:	f84c 1b04 	str.w	r1, [ip], #4
 8006b1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006b22:	dcec      	bgt.n	8006afe <__multadd+0x12>
 8006b24:	b30e      	cbz	r6, 8006b6a <__multadd+0x7e>
 8006b26:	68a3      	ldr	r3, [r4, #8]
 8006b28:	42ab      	cmp	r3, r5
 8006b2a:	dc19      	bgt.n	8006b60 <__multadd+0x74>
 8006b2c:	6861      	ldr	r1, [r4, #4]
 8006b2e:	4638      	mov	r0, r7
 8006b30:	3101      	adds	r1, #1
 8006b32:	f7ff ff79 	bl	8006a28 <_Balloc>
 8006b36:	4680      	mov	r8, r0
 8006b38:	b928      	cbnz	r0, 8006b46 <__multadd+0x5a>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	4b0c      	ldr	r3, [pc, #48]	; (8006b70 <__multadd+0x84>)
 8006b3e:	480d      	ldr	r0, [pc, #52]	; (8006b74 <__multadd+0x88>)
 8006b40:	21ba      	movs	r1, #186	; 0xba
 8006b42:	f000 fd2b 	bl	800759c <__assert_func>
 8006b46:	6922      	ldr	r2, [r4, #16]
 8006b48:	3202      	adds	r2, #2
 8006b4a:	f104 010c 	add.w	r1, r4, #12
 8006b4e:	0092      	lsls	r2, r2, #2
 8006b50:	300c      	adds	r0, #12
 8006b52:	f000 fd15 	bl	8007580 <memcpy>
 8006b56:	4621      	mov	r1, r4
 8006b58:	4638      	mov	r0, r7
 8006b5a:	f7ff ffa5 	bl	8006aa8 <_Bfree>
 8006b5e:	4644      	mov	r4, r8
 8006b60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b64:	3501      	adds	r5, #1
 8006b66:	615e      	str	r6, [r3, #20]
 8006b68:	6125      	str	r5, [r4, #16]
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b70:	08007d24 	.word	0x08007d24
 8006b74:	08007d35 	.word	0x08007d35

08006b78 <__hi0bits>:
 8006b78:	0c03      	lsrs	r3, r0, #16
 8006b7a:	041b      	lsls	r3, r3, #16
 8006b7c:	b9d3      	cbnz	r3, 8006bb4 <__hi0bits+0x3c>
 8006b7e:	0400      	lsls	r0, r0, #16
 8006b80:	2310      	movs	r3, #16
 8006b82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006b86:	bf04      	itt	eq
 8006b88:	0200      	lsleq	r0, r0, #8
 8006b8a:	3308      	addeq	r3, #8
 8006b8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006b90:	bf04      	itt	eq
 8006b92:	0100      	lsleq	r0, r0, #4
 8006b94:	3304      	addeq	r3, #4
 8006b96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006b9a:	bf04      	itt	eq
 8006b9c:	0080      	lsleq	r0, r0, #2
 8006b9e:	3302      	addeq	r3, #2
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	db05      	blt.n	8006bb0 <__hi0bits+0x38>
 8006ba4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006ba8:	f103 0301 	add.w	r3, r3, #1
 8006bac:	bf08      	it	eq
 8006bae:	2320      	moveq	r3, #32
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	4770      	bx	lr
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	e7e4      	b.n	8006b82 <__hi0bits+0xa>

08006bb8 <__lo0bits>:
 8006bb8:	6803      	ldr	r3, [r0, #0]
 8006bba:	f013 0207 	ands.w	r2, r3, #7
 8006bbe:	d00c      	beq.n	8006bda <__lo0bits+0x22>
 8006bc0:	07d9      	lsls	r1, r3, #31
 8006bc2:	d422      	bmi.n	8006c0a <__lo0bits+0x52>
 8006bc4:	079a      	lsls	r2, r3, #30
 8006bc6:	bf49      	itett	mi
 8006bc8:	085b      	lsrmi	r3, r3, #1
 8006bca:	089b      	lsrpl	r3, r3, #2
 8006bcc:	6003      	strmi	r3, [r0, #0]
 8006bce:	2201      	movmi	r2, #1
 8006bd0:	bf5c      	itt	pl
 8006bd2:	6003      	strpl	r3, [r0, #0]
 8006bd4:	2202      	movpl	r2, #2
 8006bd6:	4610      	mov	r0, r2
 8006bd8:	4770      	bx	lr
 8006bda:	b299      	uxth	r1, r3
 8006bdc:	b909      	cbnz	r1, 8006be2 <__lo0bits+0x2a>
 8006bde:	0c1b      	lsrs	r3, r3, #16
 8006be0:	2210      	movs	r2, #16
 8006be2:	b2d9      	uxtb	r1, r3
 8006be4:	b909      	cbnz	r1, 8006bea <__lo0bits+0x32>
 8006be6:	3208      	adds	r2, #8
 8006be8:	0a1b      	lsrs	r3, r3, #8
 8006bea:	0719      	lsls	r1, r3, #28
 8006bec:	bf04      	itt	eq
 8006bee:	091b      	lsreq	r3, r3, #4
 8006bf0:	3204      	addeq	r2, #4
 8006bf2:	0799      	lsls	r1, r3, #30
 8006bf4:	bf04      	itt	eq
 8006bf6:	089b      	lsreq	r3, r3, #2
 8006bf8:	3202      	addeq	r2, #2
 8006bfa:	07d9      	lsls	r1, r3, #31
 8006bfc:	d403      	bmi.n	8006c06 <__lo0bits+0x4e>
 8006bfe:	085b      	lsrs	r3, r3, #1
 8006c00:	f102 0201 	add.w	r2, r2, #1
 8006c04:	d003      	beq.n	8006c0e <__lo0bits+0x56>
 8006c06:	6003      	str	r3, [r0, #0]
 8006c08:	e7e5      	b.n	8006bd6 <__lo0bits+0x1e>
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	e7e3      	b.n	8006bd6 <__lo0bits+0x1e>
 8006c0e:	2220      	movs	r2, #32
 8006c10:	e7e1      	b.n	8006bd6 <__lo0bits+0x1e>
	...

08006c14 <__i2b>:
 8006c14:	b510      	push	{r4, lr}
 8006c16:	460c      	mov	r4, r1
 8006c18:	2101      	movs	r1, #1
 8006c1a:	f7ff ff05 	bl	8006a28 <_Balloc>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	b928      	cbnz	r0, 8006c2e <__i2b+0x1a>
 8006c22:	4b05      	ldr	r3, [pc, #20]	; (8006c38 <__i2b+0x24>)
 8006c24:	4805      	ldr	r0, [pc, #20]	; (8006c3c <__i2b+0x28>)
 8006c26:	f240 1145 	movw	r1, #325	; 0x145
 8006c2a:	f000 fcb7 	bl	800759c <__assert_func>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	6144      	str	r4, [r0, #20]
 8006c32:	6103      	str	r3, [r0, #16]
 8006c34:	bd10      	pop	{r4, pc}
 8006c36:	bf00      	nop
 8006c38:	08007d24 	.word	0x08007d24
 8006c3c:	08007d35 	.word	0x08007d35

08006c40 <__multiply>:
 8006c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c44:	4691      	mov	r9, r2
 8006c46:	690a      	ldr	r2, [r1, #16]
 8006c48:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	bfb8      	it	lt
 8006c50:	460b      	movlt	r3, r1
 8006c52:	460c      	mov	r4, r1
 8006c54:	bfbc      	itt	lt
 8006c56:	464c      	movlt	r4, r9
 8006c58:	4699      	movlt	r9, r3
 8006c5a:	6927      	ldr	r7, [r4, #16]
 8006c5c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006c60:	68a3      	ldr	r3, [r4, #8]
 8006c62:	6861      	ldr	r1, [r4, #4]
 8006c64:	eb07 060a 	add.w	r6, r7, sl
 8006c68:	42b3      	cmp	r3, r6
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	bfb8      	it	lt
 8006c6e:	3101      	addlt	r1, #1
 8006c70:	f7ff feda 	bl	8006a28 <_Balloc>
 8006c74:	b930      	cbnz	r0, 8006c84 <__multiply+0x44>
 8006c76:	4602      	mov	r2, r0
 8006c78:	4b44      	ldr	r3, [pc, #272]	; (8006d8c <__multiply+0x14c>)
 8006c7a:	4845      	ldr	r0, [pc, #276]	; (8006d90 <__multiply+0x150>)
 8006c7c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006c80:	f000 fc8c 	bl	800759c <__assert_func>
 8006c84:	f100 0514 	add.w	r5, r0, #20
 8006c88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c8c:	462b      	mov	r3, r5
 8006c8e:	2200      	movs	r2, #0
 8006c90:	4543      	cmp	r3, r8
 8006c92:	d321      	bcc.n	8006cd8 <__multiply+0x98>
 8006c94:	f104 0314 	add.w	r3, r4, #20
 8006c98:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006c9c:	f109 0314 	add.w	r3, r9, #20
 8006ca0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006ca4:	9202      	str	r2, [sp, #8]
 8006ca6:	1b3a      	subs	r2, r7, r4
 8006ca8:	3a15      	subs	r2, #21
 8006caa:	f022 0203 	bic.w	r2, r2, #3
 8006cae:	3204      	adds	r2, #4
 8006cb0:	f104 0115 	add.w	r1, r4, #21
 8006cb4:	428f      	cmp	r7, r1
 8006cb6:	bf38      	it	cc
 8006cb8:	2204      	movcc	r2, #4
 8006cba:	9201      	str	r2, [sp, #4]
 8006cbc:	9a02      	ldr	r2, [sp, #8]
 8006cbe:	9303      	str	r3, [sp, #12]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d80c      	bhi.n	8006cde <__multiply+0x9e>
 8006cc4:	2e00      	cmp	r6, #0
 8006cc6:	dd03      	ble.n	8006cd0 <__multiply+0x90>
 8006cc8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d05b      	beq.n	8006d88 <__multiply+0x148>
 8006cd0:	6106      	str	r6, [r0, #16]
 8006cd2:	b005      	add	sp, #20
 8006cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cd8:	f843 2b04 	str.w	r2, [r3], #4
 8006cdc:	e7d8      	b.n	8006c90 <__multiply+0x50>
 8006cde:	f8b3 a000 	ldrh.w	sl, [r3]
 8006ce2:	f1ba 0f00 	cmp.w	sl, #0
 8006ce6:	d024      	beq.n	8006d32 <__multiply+0xf2>
 8006ce8:	f104 0e14 	add.w	lr, r4, #20
 8006cec:	46a9      	mov	r9, r5
 8006cee:	f04f 0c00 	mov.w	ip, #0
 8006cf2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006cf6:	f8d9 1000 	ldr.w	r1, [r9]
 8006cfa:	fa1f fb82 	uxth.w	fp, r2
 8006cfe:	b289      	uxth	r1, r1
 8006d00:	fb0a 110b 	mla	r1, sl, fp, r1
 8006d04:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006d08:	f8d9 2000 	ldr.w	r2, [r9]
 8006d0c:	4461      	add	r1, ip
 8006d0e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006d12:	fb0a c20b 	mla	r2, sl, fp, ip
 8006d16:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006d1a:	b289      	uxth	r1, r1
 8006d1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006d20:	4577      	cmp	r7, lr
 8006d22:	f849 1b04 	str.w	r1, [r9], #4
 8006d26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006d2a:	d8e2      	bhi.n	8006cf2 <__multiply+0xb2>
 8006d2c:	9a01      	ldr	r2, [sp, #4]
 8006d2e:	f845 c002 	str.w	ip, [r5, r2]
 8006d32:	9a03      	ldr	r2, [sp, #12]
 8006d34:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006d38:	3304      	adds	r3, #4
 8006d3a:	f1b9 0f00 	cmp.w	r9, #0
 8006d3e:	d021      	beq.n	8006d84 <__multiply+0x144>
 8006d40:	6829      	ldr	r1, [r5, #0]
 8006d42:	f104 0c14 	add.w	ip, r4, #20
 8006d46:	46ae      	mov	lr, r5
 8006d48:	f04f 0a00 	mov.w	sl, #0
 8006d4c:	f8bc b000 	ldrh.w	fp, [ip]
 8006d50:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006d54:	fb09 220b 	mla	r2, r9, fp, r2
 8006d58:	4452      	add	r2, sl
 8006d5a:	b289      	uxth	r1, r1
 8006d5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006d60:	f84e 1b04 	str.w	r1, [lr], #4
 8006d64:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006d68:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006d6c:	f8be 1000 	ldrh.w	r1, [lr]
 8006d70:	fb09 110a 	mla	r1, r9, sl, r1
 8006d74:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006d78:	4567      	cmp	r7, ip
 8006d7a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006d7e:	d8e5      	bhi.n	8006d4c <__multiply+0x10c>
 8006d80:	9a01      	ldr	r2, [sp, #4]
 8006d82:	50a9      	str	r1, [r5, r2]
 8006d84:	3504      	adds	r5, #4
 8006d86:	e799      	b.n	8006cbc <__multiply+0x7c>
 8006d88:	3e01      	subs	r6, #1
 8006d8a:	e79b      	b.n	8006cc4 <__multiply+0x84>
 8006d8c:	08007d24 	.word	0x08007d24
 8006d90:	08007d35 	.word	0x08007d35

08006d94 <__pow5mult>:
 8006d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d98:	4615      	mov	r5, r2
 8006d9a:	f012 0203 	ands.w	r2, r2, #3
 8006d9e:	4606      	mov	r6, r0
 8006da0:	460f      	mov	r7, r1
 8006da2:	d007      	beq.n	8006db4 <__pow5mult+0x20>
 8006da4:	4c25      	ldr	r4, [pc, #148]	; (8006e3c <__pow5mult+0xa8>)
 8006da6:	3a01      	subs	r2, #1
 8006da8:	2300      	movs	r3, #0
 8006daa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006dae:	f7ff fe9d 	bl	8006aec <__multadd>
 8006db2:	4607      	mov	r7, r0
 8006db4:	10ad      	asrs	r5, r5, #2
 8006db6:	d03d      	beq.n	8006e34 <__pow5mult+0xa0>
 8006db8:	69f4      	ldr	r4, [r6, #28]
 8006dba:	b97c      	cbnz	r4, 8006ddc <__pow5mult+0x48>
 8006dbc:	2010      	movs	r0, #16
 8006dbe:	f7ff fd7f 	bl	80068c0 <malloc>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	61f0      	str	r0, [r6, #28]
 8006dc6:	b928      	cbnz	r0, 8006dd4 <__pow5mult+0x40>
 8006dc8:	4b1d      	ldr	r3, [pc, #116]	; (8006e40 <__pow5mult+0xac>)
 8006dca:	481e      	ldr	r0, [pc, #120]	; (8006e44 <__pow5mult+0xb0>)
 8006dcc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006dd0:	f000 fbe4 	bl	800759c <__assert_func>
 8006dd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006dd8:	6004      	str	r4, [r0, #0]
 8006dda:	60c4      	str	r4, [r0, #12]
 8006ddc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006de0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006de4:	b94c      	cbnz	r4, 8006dfa <__pow5mult+0x66>
 8006de6:	f240 2171 	movw	r1, #625	; 0x271
 8006dea:	4630      	mov	r0, r6
 8006dec:	f7ff ff12 	bl	8006c14 <__i2b>
 8006df0:	2300      	movs	r3, #0
 8006df2:	f8c8 0008 	str.w	r0, [r8, #8]
 8006df6:	4604      	mov	r4, r0
 8006df8:	6003      	str	r3, [r0, #0]
 8006dfa:	f04f 0900 	mov.w	r9, #0
 8006dfe:	07eb      	lsls	r3, r5, #31
 8006e00:	d50a      	bpl.n	8006e18 <__pow5mult+0x84>
 8006e02:	4639      	mov	r1, r7
 8006e04:	4622      	mov	r2, r4
 8006e06:	4630      	mov	r0, r6
 8006e08:	f7ff ff1a 	bl	8006c40 <__multiply>
 8006e0c:	4639      	mov	r1, r7
 8006e0e:	4680      	mov	r8, r0
 8006e10:	4630      	mov	r0, r6
 8006e12:	f7ff fe49 	bl	8006aa8 <_Bfree>
 8006e16:	4647      	mov	r7, r8
 8006e18:	106d      	asrs	r5, r5, #1
 8006e1a:	d00b      	beq.n	8006e34 <__pow5mult+0xa0>
 8006e1c:	6820      	ldr	r0, [r4, #0]
 8006e1e:	b938      	cbnz	r0, 8006e30 <__pow5mult+0x9c>
 8006e20:	4622      	mov	r2, r4
 8006e22:	4621      	mov	r1, r4
 8006e24:	4630      	mov	r0, r6
 8006e26:	f7ff ff0b 	bl	8006c40 <__multiply>
 8006e2a:	6020      	str	r0, [r4, #0]
 8006e2c:	f8c0 9000 	str.w	r9, [r0]
 8006e30:	4604      	mov	r4, r0
 8006e32:	e7e4      	b.n	8006dfe <__pow5mult+0x6a>
 8006e34:	4638      	mov	r0, r7
 8006e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e3a:	bf00      	nop
 8006e3c:	08007e80 	.word	0x08007e80
 8006e40:	08007cb5 	.word	0x08007cb5
 8006e44:	08007d35 	.word	0x08007d35

08006e48 <__lshift>:
 8006e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e4c:	460c      	mov	r4, r1
 8006e4e:	6849      	ldr	r1, [r1, #4]
 8006e50:	6923      	ldr	r3, [r4, #16]
 8006e52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006e56:	68a3      	ldr	r3, [r4, #8]
 8006e58:	4607      	mov	r7, r0
 8006e5a:	4691      	mov	r9, r2
 8006e5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e60:	f108 0601 	add.w	r6, r8, #1
 8006e64:	42b3      	cmp	r3, r6
 8006e66:	db0b      	blt.n	8006e80 <__lshift+0x38>
 8006e68:	4638      	mov	r0, r7
 8006e6a:	f7ff fddd 	bl	8006a28 <_Balloc>
 8006e6e:	4605      	mov	r5, r0
 8006e70:	b948      	cbnz	r0, 8006e86 <__lshift+0x3e>
 8006e72:	4602      	mov	r2, r0
 8006e74:	4b28      	ldr	r3, [pc, #160]	; (8006f18 <__lshift+0xd0>)
 8006e76:	4829      	ldr	r0, [pc, #164]	; (8006f1c <__lshift+0xd4>)
 8006e78:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006e7c:	f000 fb8e 	bl	800759c <__assert_func>
 8006e80:	3101      	adds	r1, #1
 8006e82:	005b      	lsls	r3, r3, #1
 8006e84:	e7ee      	b.n	8006e64 <__lshift+0x1c>
 8006e86:	2300      	movs	r3, #0
 8006e88:	f100 0114 	add.w	r1, r0, #20
 8006e8c:	f100 0210 	add.w	r2, r0, #16
 8006e90:	4618      	mov	r0, r3
 8006e92:	4553      	cmp	r3, sl
 8006e94:	db33      	blt.n	8006efe <__lshift+0xb6>
 8006e96:	6920      	ldr	r0, [r4, #16]
 8006e98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e9c:	f104 0314 	add.w	r3, r4, #20
 8006ea0:	f019 091f 	ands.w	r9, r9, #31
 8006ea4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ea8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006eac:	d02b      	beq.n	8006f06 <__lshift+0xbe>
 8006eae:	f1c9 0e20 	rsb	lr, r9, #32
 8006eb2:	468a      	mov	sl, r1
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	6818      	ldr	r0, [r3, #0]
 8006eb8:	fa00 f009 	lsl.w	r0, r0, r9
 8006ebc:	4310      	orrs	r0, r2
 8006ebe:	f84a 0b04 	str.w	r0, [sl], #4
 8006ec2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ec6:	459c      	cmp	ip, r3
 8006ec8:	fa22 f20e 	lsr.w	r2, r2, lr
 8006ecc:	d8f3      	bhi.n	8006eb6 <__lshift+0x6e>
 8006ece:	ebac 0304 	sub.w	r3, ip, r4
 8006ed2:	3b15      	subs	r3, #21
 8006ed4:	f023 0303 	bic.w	r3, r3, #3
 8006ed8:	3304      	adds	r3, #4
 8006eda:	f104 0015 	add.w	r0, r4, #21
 8006ede:	4584      	cmp	ip, r0
 8006ee0:	bf38      	it	cc
 8006ee2:	2304      	movcc	r3, #4
 8006ee4:	50ca      	str	r2, [r1, r3]
 8006ee6:	b10a      	cbz	r2, 8006eec <__lshift+0xa4>
 8006ee8:	f108 0602 	add.w	r6, r8, #2
 8006eec:	3e01      	subs	r6, #1
 8006eee:	4638      	mov	r0, r7
 8006ef0:	612e      	str	r6, [r5, #16]
 8006ef2:	4621      	mov	r1, r4
 8006ef4:	f7ff fdd8 	bl	8006aa8 <_Bfree>
 8006ef8:	4628      	mov	r0, r5
 8006efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006efe:	f842 0f04 	str.w	r0, [r2, #4]!
 8006f02:	3301      	adds	r3, #1
 8006f04:	e7c5      	b.n	8006e92 <__lshift+0x4a>
 8006f06:	3904      	subs	r1, #4
 8006f08:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f0c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f10:	459c      	cmp	ip, r3
 8006f12:	d8f9      	bhi.n	8006f08 <__lshift+0xc0>
 8006f14:	e7ea      	b.n	8006eec <__lshift+0xa4>
 8006f16:	bf00      	nop
 8006f18:	08007d24 	.word	0x08007d24
 8006f1c:	08007d35 	.word	0x08007d35

08006f20 <__mcmp>:
 8006f20:	b530      	push	{r4, r5, lr}
 8006f22:	6902      	ldr	r2, [r0, #16]
 8006f24:	690c      	ldr	r4, [r1, #16]
 8006f26:	1b12      	subs	r2, r2, r4
 8006f28:	d10e      	bne.n	8006f48 <__mcmp+0x28>
 8006f2a:	f100 0314 	add.w	r3, r0, #20
 8006f2e:	3114      	adds	r1, #20
 8006f30:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006f34:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006f38:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006f3c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006f40:	42a5      	cmp	r5, r4
 8006f42:	d003      	beq.n	8006f4c <__mcmp+0x2c>
 8006f44:	d305      	bcc.n	8006f52 <__mcmp+0x32>
 8006f46:	2201      	movs	r2, #1
 8006f48:	4610      	mov	r0, r2
 8006f4a:	bd30      	pop	{r4, r5, pc}
 8006f4c:	4283      	cmp	r3, r0
 8006f4e:	d3f3      	bcc.n	8006f38 <__mcmp+0x18>
 8006f50:	e7fa      	b.n	8006f48 <__mcmp+0x28>
 8006f52:	f04f 32ff 	mov.w	r2, #4294967295
 8006f56:	e7f7      	b.n	8006f48 <__mcmp+0x28>

08006f58 <__mdiff>:
 8006f58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f5c:	460c      	mov	r4, r1
 8006f5e:	4606      	mov	r6, r0
 8006f60:	4611      	mov	r1, r2
 8006f62:	4620      	mov	r0, r4
 8006f64:	4690      	mov	r8, r2
 8006f66:	f7ff ffdb 	bl	8006f20 <__mcmp>
 8006f6a:	1e05      	subs	r5, r0, #0
 8006f6c:	d110      	bne.n	8006f90 <__mdiff+0x38>
 8006f6e:	4629      	mov	r1, r5
 8006f70:	4630      	mov	r0, r6
 8006f72:	f7ff fd59 	bl	8006a28 <_Balloc>
 8006f76:	b930      	cbnz	r0, 8006f86 <__mdiff+0x2e>
 8006f78:	4b3a      	ldr	r3, [pc, #232]	; (8007064 <__mdiff+0x10c>)
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	f240 2137 	movw	r1, #567	; 0x237
 8006f80:	4839      	ldr	r0, [pc, #228]	; (8007068 <__mdiff+0x110>)
 8006f82:	f000 fb0b 	bl	800759c <__assert_func>
 8006f86:	2301      	movs	r3, #1
 8006f88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f90:	bfa4      	itt	ge
 8006f92:	4643      	movge	r3, r8
 8006f94:	46a0      	movge	r8, r4
 8006f96:	4630      	mov	r0, r6
 8006f98:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006f9c:	bfa6      	itte	ge
 8006f9e:	461c      	movge	r4, r3
 8006fa0:	2500      	movge	r5, #0
 8006fa2:	2501      	movlt	r5, #1
 8006fa4:	f7ff fd40 	bl	8006a28 <_Balloc>
 8006fa8:	b920      	cbnz	r0, 8006fb4 <__mdiff+0x5c>
 8006faa:	4b2e      	ldr	r3, [pc, #184]	; (8007064 <__mdiff+0x10c>)
 8006fac:	4602      	mov	r2, r0
 8006fae:	f240 2145 	movw	r1, #581	; 0x245
 8006fb2:	e7e5      	b.n	8006f80 <__mdiff+0x28>
 8006fb4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006fb8:	6926      	ldr	r6, [r4, #16]
 8006fba:	60c5      	str	r5, [r0, #12]
 8006fbc:	f104 0914 	add.w	r9, r4, #20
 8006fc0:	f108 0514 	add.w	r5, r8, #20
 8006fc4:	f100 0e14 	add.w	lr, r0, #20
 8006fc8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006fcc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006fd0:	f108 0210 	add.w	r2, r8, #16
 8006fd4:	46f2      	mov	sl, lr
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	f859 3b04 	ldr.w	r3, [r9], #4
 8006fdc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006fe0:	fa11 f88b 	uxtah	r8, r1, fp
 8006fe4:	b299      	uxth	r1, r3
 8006fe6:	0c1b      	lsrs	r3, r3, #16
 8006fe8:	eba8 0801 	sub.w	r8, r8, r1
 8006fec:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006ff0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006ff4:	fa1f f888 	uxth.w	r8, r8
 8006ff8:	1419      	asrs	r1, r3, #16
 8006ffa:	454e      	cmp	r6, r9
 8006ffc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007000:	f84a 3b04 	str.w	r3, [sl], #4
 8007004:	d8e8      	bhi.n	8006fd8 <__mdiff+0x80>
 8007006:	1b33      	subs	r3, r6, r4
 8007008:	3b15      	subs	r3, #21
 800700a:	f023 0303 	bic.w	r3, r3, #3
 800700e:	3304      	adds	r3, #4
 8007010:	3415      	adds	r4, #21
 8007012:	42a6      	cmp	r6, r4
 8007014:	bf38      	it	cc
 8007016:	2304      	movcc	r3, #4
 8007018:	441d      	add	r5, r3
 800701a:	4473      	add	r3, lr
 800701c:	469e      	mov	lr, r3
 800701e:	462e      	mov	r6, r5
 8007020:	4566      	cmp	r6, ip
 8007022:	d30e      	bcc.n	8007042 <__mdiff+0xea>
 8007024:	f10c 0203 	add.w	r2, ip, #3
 8007028:	1b52      	subs	r2, r2, r5
 800702a:	f022 0203 	bic.w	r2, r2, #3
 800702e:	3d03      	subs	r5, #3
 8007030:	45ac      	cmp	ip, r5
 8007032:	bf38      	it	cc
 8007034:	2200      	movcc	r2, #0
 8007036:	4413      	add	r3, r2
 8007038:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800703c:	b17a      	cbz	r2, 800705e <__mdiff+0x106>
 800703e:	6107      	str	r7, [r0, #16]
 8007040:	e7a4      	b.n	8006f8c <__mdiff+0x34>
 8007042:	f856 8b04 	ldr.w	r8, [r6], #4
 8007046:	fa11 f288 	uxtah	r2, r1, r8
 800704a:	1414      	asrs	r4, r2, #16
 800704c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007050:	b292      	uxth	r2, r2
 8007052:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007056:	f84e 2b04 	str.w	r2, [lr], #4
 800705a:	1421      	asrs	r1, r4, #16
 800705c:	e7e0      	b.n	8007020 <__mdiff+0xc8>
 800705e:	3f01      	subs	r7, #1
 8007060:	e7ea      	b.n	8007038 <__mdiff+0xe0>
 8007062:	bf00      	nop
 8007064:	08007d24 	.word	0x08007d24
 8007068:	08007d35 	.word	0x08007d35

0800706c <__d2b>:
 800706c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007070:	460f      	mov	r7, r1
 8007072:	2101      	movs	r1, #1
 8007074:	ec59 8b10 	vmov	r8, r9, d0
 8007078:	4616      	mov	r6, r2
 800707a:	f7ff fcd5 	bl	8006a28 <_Balloc>
 800707e:	4604      	mov	r4, r0
 8007080:	b930      	cbnz	r0, 8007090 <__d2b+0x24>
 8007082:	4602      	mov	r2, r0
 8007084:	4b24      	ldr	r3, [pc, #144]	; (8007118 <__d2b+0xac>)
 8007086:	4825      	ldr	r0, [pc, #148]	; (800711c <__d2b+0xb0>)
 8007088:	f240 310f 	movw	r1, #783	; 0x30f
 800708c:	f000 fa86 	bl	800759c <__assert_func>
 8007090:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007094:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007098:	bb2d      	cbnz	r5, 80070e6 <__d2b+0x7a>
 800709a:	9301      	str	r3, [sp, #4]
 800709c:	f1b8 0300 	subs.w	r3, r8, #0
 80070a0:	d026      	beq.n	80070f0 <__d2b+0x84>
 80070a2:	4668      	mov	r0, sp
 80070a4:	9300      	str	r3, [sp, #0]
 80070a6:	f7ff fd87 	bl	8006bb8 <__lo0bits>
 80070aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 80070ae:	b1e8      	cbz	r0, 80070ec <__d2b+0x80>
 80070b0:	f1c0 0320 	rsb	r3, r0, #32
 80070b4:	fa02 f303 	lsl.w	r3, r2, r3
 80070b8:	430b      	orrs	r3, r1
 80070ba:	40c2      	lsrs	r2, r0
 80070bc:	6163      	str	r3, [r4, #20]
 80070be:	9201      	str	r2, [sp, #4]
 80070c0:	9b01      	ldr	r3, [sp, #4]
 80070c2:	61a3      	str	r3, [r4, #24]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	bf14      	ite	ne
 80070c8:	2202      	movne	r2, #2
 80070ca:	2201      	moveq	r2, #1
 80070cc:	6122      	str	r2, [r4, #16]
 80070ce:	b1bd      	cbz	r5, 8007100 <__d2b+0x94>
 80070d0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80070d4:	4405      	add	r5, r0
 80070d6:	603d      	str	r5, [r7, #0]
 80070d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80070dc:	6030      	str	r0, [r6, #0]
 80070de:	4620      	mov	r0, r4
 80070e0:	b003      	add	sp, #12
 80070e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070ea:	e7d6      	b.n	800709a <__d2b+0x2e>
 80070ec:	6161      	str	r1, [r4, #20]
 80070ee:	e7e7      	b.n	80070c0 <__d2b+0x54>
 80070f0:	a801      	add	r0, sp, #4
 80070f2:	f7ff fd61 	bl	8006bb8 <__lo0bits>
 80070f6:	9b01      	ldr	r3, [sp, #4]
 80070f8:	6163      	str	r3, [r4, #20]
 80070fa:	3020      	adds	r0, #32
 80070fc:	2201      	movs	r2, #1
 80070fe:	e7e5      	b.n	80070cc <__d2b+0x60>
 8007100:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007104:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007108:	6038      	str	r0, [r7, #0]
 800710a:	6918      	ldr	r0, [r3, #16]
 800710c:	f7ff fd34 	bl	8006b78 <__hi0bits>
 8007110:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007114:	e7e2      	b.n	80070dc <__d2b+0x70>
 8007116:	bf00      	nop
 8007118:	08007d24 	.word	0x08007d24
 800711c:	08007d35 	.word	0x08007d35

08007120 <__ssputs_r>:
 8007120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007124:	688e      	ldr	r6, [r1, #8]
 8007126:	461f      	mov	r7, r3
 8007128:	42be      	cmp	r6, r7
 800712a:	680b      	ldr	r3, [r1, #0]
 800712c:	4682      	mov	sl, r0
 800712e:	460c      	mov	r4, r1
 8007130:	4690      	mov	r8, r2
 8007132:	d82c      	bhi.n	800718e <__ssputs_r+0x6e>
 8007134:	898a      	ldrh	r2, [r1, #12]
 8007136:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800713a:	d026      	beq.n	800718a <__ssputs_r+0x6a>
 800713c:	6965      	ldr	r5, [r4, #20]
 800713e:	6909      	ldr	r1, [r1, #16]
 8007140:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007144:	eba3 0901 	sub.w	r9, r3, r1
 8007148:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800714c:	1c7b      	adds	r3, r7, #1
 800714e:	444b      	add	r3, r9
 8007150:	106d      	asrs	r5, r5, #1
 8007152:	429d      	cmp	r5, r3
 8007154:	bf38      	it	cc
 8007156:	461d      	movcc	r5, r3
 8007158:	0553      	lsls	r3, r2, #21
 800715a:	d527      	bpl.n	80071ac <__ssputs_r+0x8c>
 800715c:	4629      	mov	r1, r5
 800715e:	f7ff fbd7 	bl	8006910 <_malloc_r>
 8007162:	4606      	mov	r6, r0
 8007164:	b360      	cbz	r0, 80071c0 <__ssputs_r+0xa0>
 8007166:	6921      	ldr	r1, [r4, #16]
 8007168:	464a      	mov	r2, r9
 800716a:	f000 fa09 	bl	8007580 <memcpy>
 800716e:	89a3      	ldrh	r3, [r4, #12]
 8007170:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007178:	81a3      	strh	r3, [r4, #12]
 800717a:	6126      	str	r6, [r4, #16]
 800717c:	6165      	str	r5, [r4, #20]
 800717e:	444e      	add	r6, r9
 8007180:	eba5 0509 	sub.w	r5, r5, r9
 8007184:	6026      	str	r6, [r4, #0]
 8007186:	60a5      	str	r5, [r4, #8]
 8007188:	463e      	mov	r6, r7
 800718a:	42be      	cmp	r6, r7
 800718c:	d900      	bls.n	8007190 <__ssputs_r+0x70>
 800718e:	463e      	mov	r6, r7
 8007190:	6820      	ldr	r0, [r4, #0]
 8007192:	4632      	mov	r2, r6
 8007194:	4641      	mov	r1, r8
 8007196:	f000 f9c9 	bl	800752c <memmove>
 800719a:	68a3      	ldr	r3, [r4, #8]
 800719c:	1b9b      	subs	r3, r3, r6
 800719e:	60a3      	str	r3, [r4, #8]
 80071a0:	6823      	ldr	r3, [r4, #0]
 80071a2:	4433      	add	r3, r6
 80071a4:	6023      	str	r3, [r4, #0]
 80071a6:	2000      	movs	r0, #0
 80071a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ac:	462a      	mov	r2, r5
 80071ae:	f000 fa3b 	bl	8007628 <_realloc_r>
 80071b2:	4606      	mov	r6, r0
 80071b4:	2800      	cmp	r0, #0
 80071b6:	d1e0      	bne.n	800717a <__ssputs_r+0x5a>
 80071b8:	6921      	ldr	r1, [r4, #16]
 80071ba:	4650      	mov	r0, sl
 80071bc:	f7ff fb34 	bl	8006828 <_free_r>
 80071c0:	230c      	movs	r3, #12
 80071c2:	f8ca 3000 	str.w	r3, [sl]
 80071c6:	89a3      	ldrh	r3, [r4, #12]
 80071c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071cc:	81a3      	strh	r3, [r4, #12]
 80071ce:	f04f 30ff 	mov.w	r0, #4294967295
 80071d2:	e7e9      	b.n	80071a8 <__ssputs_r+0x88>

080071d4 <_svfiprintf_r>:
 80071d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071d8:	4698      	mov	r8, r3
 80071da:	898b      	ldrh	r3, [r1, #12]
 80071dc:	061b      	lsls	r3, r3, #24
 80071de:	b09d      	sub	sp, #116	; 0x74
 80071e0:	4607      	mov	r7, r0
 80071e2:	460d      	mov	r5, r1
 80071e4:	4614      	mov	r4, r2
 80071e6:	d50e      	bpl.n	8007206 <_svfiprintf_r+0x32>
 80071e8:	690b      	ldr	r3, [r1, #16]
 80071ea:	b963      	cbnz	r3, 8007206 <_svfiprintf_r+0x32>
 80071ec:	2140      	movs	r1, #64	; 0x40
 80071ee:	f7ff fb8f 	bl	8006910 <_malloc_r>
 80071f2:	6028      	str	r0, [r5, #0]
 80071f4:	6128      	str	r0, [r5, #16]
 80071f6:	b920      	cbnz	r0, 8007202 <_svfiprintf_r+0x2e>
 80071f8:	230c      	movs	r3, #12
 80071fa:	603b      	str	r3, [r7, #0]
 80071fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007200:	e0d0      	b.n	80073a4 <_svfiprintf_r+0x1d0>
 8007202:	2340      	movs	r3, #64	; 0x40
 8007204:	616b      	str	r3, [r5, #20]
 8007206:	2300      	movs	r3, #0
 8007208:	9309      	str	r3, [sp, #36]	; 0x24
 800720a:	2320      	movs	r3, #32
 800720c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007210:	f8cd 800c 	str.w	r8, [sp, #12]
 8007214:	2330      	movs	r3, #48	; 0x30
 8007216:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80073bc <_svfiprintf_r+0x1e8>
 800721a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800721e:	f04f 0901 	mov.w	r9, #1
 8007222:	4623      	mov	r3, r4
 8007224:	469a      	mov	sl, r3
 8007226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800722a:	b10a      	cbz	r2, 8007230 <_svfiprintf_r+0x5c>
 800722c:	2a25      	cmp	r2, #37	; 0x25
 800722e:	d1f9      	bne.n	8007224 <_svfiprintf_r+0x50>
 8007230:	ebba 0b04 	subs.w	fp, sl, r4
 8007234:	d00b      	beq.n	800724e <_svfiprintf_r+0x7a>
 8007236:	465b      	mov	r3, fp
 8007238:	4622      	mov	r2, r4
 800723a:	4629      	mov	r1, r5
 800723c:	4638      	mov	r0, r7
 800723e:	f7ff ff6f 	bl	8007120 <__ssputs_r>
 8007242:	3001      	adds	r0, #1
 8007244:	f000 80a9 	beq.w	800739a <_svfiprintf_r+0x1c6>
 8007248:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800724a:	445a      	add	r2, fp
 800724c:	9209      	str	r2, [sp, #36]	; 0x24
 800724e:	f89a 3000 	ldrb.w	r3, [sl]
 8007252:	2b00      	cmp	r3, #0
 8007254:	f000 80a1 	beq.w	800739a <_svfiprintf_r+0x1c6>
 8007258:	2300      	movs	r3, #0
 800725a:	f04f 32ff 	mov.w	r2, #4294967295
 800725e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007262:	f10a 0a01 	add.w	sl, sl, #1
 8007266:	9304      	str	r3, [sp, #16]
 8007268:	9307      	str	r3, [sp, #28]
 800726a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800726e:	931a      	str	r3, [sp, #104]	; 0x68
 8007270:	4654      	mov	r4, sl
 8007272:	2205      	movs	r2, #5
 8007274:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007278:	4850      	ldr	r0, [pc, #320]	; (80073bc <_svfiprintf_r+0x1e8>)
 800727a:	f7f8 ffe1 	bl	8000240 <memchr>
 800727e:	9a04      	ldr	r2, [sp, #16]
 8007280:	b9d8      	cbnz	r0, 80072ba <_svfiprintf_r+0xe6>
 8007282:	06d0      	lsls	r0, r2, #27
 8007284:	bf44      	itt	mi
 8007286:	2320      	movmi	r3, #32
 8007288:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800728c:	0711      	lsls	r1, r2, #28
 800728e:	bf44      	itt	mi
 8007290:	232b      	movmi	r3, #43	; 0x2b
 8007292:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007296:	f89a 3000 	ldrb.w	r3, [sl]
 800729a:	2b2a      	cmp	r3, #42	; 0x2a
 800729c:	d015      	beq.n	80072ca <_svfiprintf_r+0xf6>
 800729e:	9a07      	ldr	r2, [sp, #28]
 80072a0:	4654      	mov	r4, sl
 80072a2:	2000      	movs	r0, #0
 80072a4:	f04f 0c0a 	mov.w	ip, #10
 80072a8:	4621      	mov	r1, r4
 80072aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072ae:	3b30      	subs	r3, #48	; 0x30
 80072b0:	2b09      	cmp	r3, #9
 80072b2:	d94d      	bls.n	8007350 <_svfiprintf_r+0x17c>
 80072b4:	b1b0      	cbz	r0, 80072e4 <_svfiprintf_r+0x110>
 80072b6:	9207      	str	r2, [sp, #28]
 80072b8:	e014      	b.n	80072e4 <_svfiprintf_r+0x110>
 80072ba:	eba0 0308 	sub.w	r3, r0, r8
 80072be:	fa09 f303 	lsl.w	r3, r9, r3
 80072c2:	4313      	orrs	r3, r2
 80072c4:	9304      	str	r3, [sp, #16]
 80072c6:	46a2      	mov	sl, r4
 80072c8:	e7d2      	b.n	8007270 <_svfiprintf_r+0x9c>
 80072ca:	9b03      	ldr	r3, [sp, #12]
 80072cc:	1d19      	adds	r1, r3, #4
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	9103      	str	r1, [sp, #12]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	bfbb      	ittet	lt
 80072d6:	425b      	neglt	r3, r3
 80072d8:	f042 0202 	orrlt.w	r2, r2, #2
 80072dc:	9307      	strge	r3, [sp, #28]
 80072de:	9307      	strlt	r3, [sp, #28]
 80072e0:	bfb8      	it	lt
 80072e2:	9204      	strlt	r2, [sp, #16]
 80072e4:	7823      	ldrb	r3, [r4, #0]
 80072e6:	2b2e      	cmp	r3, #46	; 0x2e
 80072e8:	d10c      	bne.n	8007304 <_svfiprintf_r+0x130>
 80072ea:	7863      	ldrb	r3, [r4, #1]
 80072ec:	2b2a      	cmp	r3, #42	; 0x2a
 80072ee:	d134      	bne.n	800735a <_svfiprintf_r+0x186>
 80072f0:	9b03      	ldr	r3, [sp, #12]
 80072f2:	1d1a      	adds	r2, r3, #4
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	9203      	str	r2, [sp, #12]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	bfb8      	it	lt
 80072fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8007300:	3402      	adds	r4, #2
 8007302:	9305      	str	r3, [sp, #20]
 8007304:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80073cc <_svfiprintf_r+0x1f8>
 8007308:	7821      	ldrb	r1, [r4, #0]
 800730a:	2203      	movs	r2, #3
 800730c:	4650      	mov	r0, sl
 800730e:	f7f8 ff97 	bl	8000240 <memchr>
 8007312:	b138      	cbz	r0, 8007324 <_svfiprintf_r+0x150>
 8007314:	9b04      	ldr	r3, [sp, #16]
 8007316:	eba0 000a 	sub.w	r0, r0, sl
 800731a:	2240      	movs	r2, #64	; 0x40
 800731c:	4082      	lsls	r2, r0
 800731e:	4313      	orrs	r3, r2
 8007320:	3401      	adds	r4, #1
 8007322:	9304      	str	r3, [sp, #16]
 8007324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007328:	4825      	ldr	r0, [pc, #148]	; (80073c0 <_svfiprintf_r+0x1ec>)
 800732a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800732e:	2206      	movs	r2, #6
 8007330:	f7f8 ff86 	bl	8000240 <memchr>
 8007334:	2800      	cmp	r0, #0
 8007336:	d038      	beq.n	80073aa <_svfiprintf_r+0x1d6>
 8007338:	4b22      	ldr	r3, [pc, #136]	; (80073c4 <_svfiprintf_r+0x1f0>)
 800733a:	bb1b      	cbnz	r3, 8007384 <_svfiprintf_r+0x1b0>
 800733c:	9b03      	ldr	r3, [sp, #12]
 800733e:	3307      	adds	r3, #7
 8007340:	f023 0307 	bic.w	r3, r3, #7
 8007344:	3308      	adds	r3, #8
 8007346:	9303      	str	r3, [sp, #12]
 8007348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800734a:	4433      	add	r3, r6
 800734c:	9309      	str	r3, [sp, #36]	; 0x24
 800734e:	e768      	b.n	8007222 <_svfiprintf_r+0x4e>
 8007350:	fb0c 3202 	mla	r2, ip, r2, r3
 8007354:	460c      	mov	r4, r1
 8007356:	2001      	movs	r0, #1
 8007358:	e7a6      	b.n	80072a8 <_svfiprintf_r+0xd4>
 800735a:	2300      	movs	r3, #0
 800735c:	3401      	adds	r4, #1
 800735e:	9305      	str	r3, [sp, #20]
 8007360:	4619      	mov	r1, r3
 8007362:	f04f 0c0a 	mov.w	ip, #10
 8007366:	4620      	mov	r0, r4
 8007368:	f810 2b01 	ldrb.w	r2, [r0], #1
 800736c:	3a30      	subs	r2, #48	; 0x30
 800736e:	2a09      	cmp	r2, #9
 8007370:	d903      	bls.n	800737a <_svfiprintf_r+0x1a6>
 8007372:	2b00      	cmp	r3, #0
 8007374:	d0c6      	beq.n	8007304 <_svfiprintf_r+0x130>
 8007376:	9105      	str	r1, [sp, #20]
 8007378:	e7c4      	b.n	8007304 <_svfiprintf_r+0x130>
 800737a:	fb0c 2101 	mla	r1, ip, r1, r2
 800737e:	4604      	mov	r4, r0
 8007380:	2301      	movs	r3, #1
 8007382:	e7f0      	b.n	8007366 <_svfiprintf_r+0x192>
 8007384:	ab03      	add	r3, sp, #12
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	462a      	mov	r2, r5
 800738a:	4b0f      	ldr	r3, [pc, #60]	; (80073c8 <_svfiprintf_r+0x1f4>)
 800738c:	a904      	add	r1, sp, #16
 800738e:	4638      	mov	r0, r7
 8007390:	f7fd ff06 	bl	80051a0 <_printf_float>
 8007394:	1c42      	adds	r2, r0, #1
 8007396:	4606      	mov	r6, r0
 8007398:	d1d6      	bne.n	8007348 <_svfiprintf_r+0x174>
 800739a:	89ab      	ldrh	r3, [r5, #12]
 800739c:	065b      	lsls	r3, r3, #25
 800739e:	f53f af2d 	bmi.w	80071fc <_svfiprintf_r+0x28>
 80073a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073a4:	b01d      	add	sp, #116	; 0x74
 80073a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073aa:	ab03      	add	r3, sp, #12
 80073ac:	9300      	str	r3, [sp, #0]
 80073ae:	462a      	mov	r2, r5
 80073b0:	4b05      	ldr	r3, [pc, #20]	; (80073c8 <_svfiprintf_r+0x1f4>)
 80073b2:	a904      	add	r1, sp, #16
 80073b4:	4638      	mov	r0, r7
 80073b6:	f7fe f97b 	bl	80056b0 <_printf_i>
 80073ba:	e7eb      	b.n	8007394 <_svfiprintf_r+0x1c0>
 80073bc:	08007e8c 	.word	0x08007e8c
 80073c0:	08007e96 	.word	0x08007e96
 80073c4:	080051a1 	.word	0x080051a1
 80073c8:	08007121 	.word	0x08007121
 80073cc:	08007e92 	.word	0x08007e92

080073d0 <__sflush_r>:
 80073d0:	898a      	ldrh	r2, [r1, #12]
 80073d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073d6:	4605      	mov	r5, r0
 80073d8:	0710      	lsls	r0, r2, #28
 80073da:	460c      	mov	r4, r1
 80073dc:	d458      	bmi.n	8007490 <__sflush_r+0xc0>
 80073de:	684b      	ldr	r3, [r1, #4]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	dc05      	bgt.n	80073f0 <__sflush_r+0x20>
 80073e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	dc02      	bgt.n	80073f0 <__sflush_r+0x20>
 80073ea:	2000      	movs	r0, #0
 80073ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073f2:	2e00      	cmp	r6, #0
 80073f4:	d0f9      	beq.n	80073ea <__sflush_r+0x1a>
 80073f6:	2300      	movs	r3, #0
 80073f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80073fc:	682f      	ldr	r7, [r5, #0]
 80073fe:	6a21      	ldr	r1, [r4, #32]
 8007400:	602b      	str	r3, [r5, #0]
 8007402:	d032      	beq.n	800746a <__sflush_r+0x9a>
 8007404:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007406:	89a3      	ldrh	r3, [r4, #12]
 8007408:	075a      	lsls	r2, r3, #29
 800740a:	d505      	bpl.n	8007418 <__sflush_r+0x48>
 800740c:	6863      	ldr	r3, [r4, #4]
 800740e:	1ac0      	subs	r0, r0, r3
 8007410:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007412:	b10b      	cbz	r3, 8007418 <__sflush_r+0x48>
 8007414:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007416:	1ac0      	subs	r0, r0, r3
 8007418:	2300      	movs	r3, #0
 800741a:	4602      	mov	r2, r0
 800741c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800741e:	6a21      	ldr	r1, [r4, #32]
 8007420:	4628      	mov	r0, r5
 8007422:	47b0      	blx	r6
 8007424:	1c43      	adds	r3, r0, #1
 8007426:	89a3      	ldrh	r3, [r4, #12]
 8007428:	d106      	bne.n	8007438 <__sflush_r+0x68>
 800742a:	6829      	ldr	r1, [r5, #0]
 800742c:	291d      	cmp	r1, #29
 800742e:	d82b      	bhi.n	8007488 <__sflush_r+0xb8>
 8007430:	4a29      	ldr	r2, [pc, #164]	; (80074d8 <__sflush_r+0x108>)
 8007432:	410a      	asrs	r2, r1
 8007434:	07d6      	lsls	r6, r2, #31
 8007436:	d427      	bmi.n	8007488 <__sflush_r+0xb8>
 8007438:	2200      	movs	r2, #0
 800743a:	6062      	str	r2, [r4, #4]
 800743c:	04d9      	lsls	r1, r3, #19
 800743e:	6922      	ldr	r2, [r4, #16]
 8007440:	6022      	str	r2, [r4, #0]
 8007442:	d504      	bpl.n	800744e <__sflush_r+0x7e>
 8007444:	1c42      	adds	r2, r0, #1
 8007446:	d101      	bne.n	800744c <__sflush_r+0x7c>
 8007448:	682b      	ldr	r3, [r5, #0]
 800744a:	b903      	cbnz	r3, 800744e <__sflush_r+0x7e>
 800744c:	6560      	str	r0, [r4, #84]	; 0x54
 800744e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007450:	602f      	str	r7, [r5, #0]
 8007452:	2900      	cmp	r1, #0
 8007454:	d0c9      	beq.n	80073ea <__sflush_r+0x1a>
 8007456:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800745a:	4299      	cmp	r1, r3
 800745c:	d002      	beq.n	8007464 <__sflush_r+0x94>
 800745e:	4628      	mov	r0, r5
 8007460:	f7ff f9e2 	bl	8006828 <_free_r>
 8007464:	2000      	movs	r0, #0
 8007466:	6360      	str	r0, [r4, #52]	; 0x34
 8007468:	e7c0      	b.n	80073ec <__sflush_r+0x1c>
 800746a:	2301      	movs	r3, #1
 800746c:	4628      	mov	r0, r5
 800746e:	47b0      	blx	r6
 8007470:	1c41      	adds	r1, r0, #1
 8007472:	d1c8      	bne.n	8007406 <__sflush_r+0x36>
 8007474:	682b      	ldr	r3, [r5, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d0c5      	beq.n	8007406 <__sflush_r+0x36>
 800747a:	2b1d      	cmp	r3, #29
 800747c:	d001      	beq.n	8007482 <__sflush_r+0xb2>
 800747e:	2b16      	cmp	r3, #22
 8007480:	d101      	bne.n	8007486 <__sflush_r+0xb6>
 8007482:	602f      	str	r7, [r5, #0]
 8007484:	e7b1      	b.n	80073ea <__sflush_r+0x1a>
 8007486:	89a3      	ldrh	r3, [r4, #12]
 8007488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800748c:	81a3      	strh	r3, [r4, #12]
 800748e:	e7ad      	b.n	80073ec <__sflush_r+0x1c>
 8007490:	690f      	ldr	r7, [r1, #16]
 8007492:	2f00      	cmp	r7, #0
 8007494:	d0a9      	beq.n	80073ea <__sflush_r+0x1a>
 8007496:	0793      	lsls	r3, r2, #30
 8007498:	680e      	ldr	r6, [r1, #0]
 800749a:	bf08      	it	eq
 800749c:	694b      	ldreq	r3, [r1, #20]
 800749e:	600f      	str	r7, [r1, #0]
 80074a0:	bf18      	it	ne
 80074a2:	2300      	movne	r3, #0
 80074a4:	eba6 0807 	sub.w	r8, r6, r7
 80074a8:	608b      	str	r3, [r1, #8]
 80074aa:	f1b8 0f00 	cmp.w	r8, #0
 80074ae:	dd9c      	ble.n	80073ea <__sflush_r+0x1a>
 80074b0:	6a21      	ldr	r1, [r4, #32]
 80074b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80074b4:	4643      	mov	r3, r8
 80074b6:	463a      	mov	r2, r7
 80074b8:	4628      	mov	r0, r5
 80074ba:	47b0      	blx	r6
 80074bc:	2800      	cmp	r0, #0
 80074be:	dc06      	bgt.n	80074ce <__sflush_r+0xfe>
 80074c0:	89a3      	ldrh	r3, [r4, #12]
 80074c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074c6:	81a3      	strh	r3, [r4, #12]
 80074c8:	f04f 30ff 	mov.w	r0, #4294967295
 80074cc:	e78e      	b.n	80073ec <__sflush_r+0x1c>
 80074ce:	4407      	add	r7, r0
 80074d0:	eba8 0800 	sub.w	r8, r8, r0
 80074d4:	e7e9      	b.n	80074aa <__sflush_r+0xda>
 80074d6:	bf00      	nop
 80074d8:	dfbffffe 	.word	0xdfbffffe

080074dc <_fflush_r>:
 80074dc:	b538      	push	{r3, r4, r5, lr}
 80074de:	690b      	ldr	r3, [r1, #16]
 80074e0:	4605      	mov	r5, r0
 80074e2:	460c      	mov	r4, r1
 80074e4:	b913      	cbnz	r3, 80074ec <_fflush_r+0x10>
 80074e6:	2500      	movs	r5, #0
 80074e8:	4628      	mov	r0, r5
 80074ea:	bd38      	pop	{r3, r4, r5, pc}
 80074ec:	b118      	cbz	r0, 80074f6 <_fflush_r+0x1a>
 80074ee:	6a03      	ldr	r3, [r0, #32]
 80074f0:	b90b      	cbnz	r3, 80074f6 <_fflush_r+0x1a>
 80074f2:	f7fe fa8b 	bl	8005a0c <__sinit>
 80074f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d0f3      	beq.n	80074e6 <_fflush_r+0xa>
 80074fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007500:	07d0      	lsls	r0, r2, #31
 8007502:	d404      	bmi.n	800750e <_fflush_r+0x32>
 8007504:	0599      	lsls	r1, r3, #22
 8007506:	d402      	bmi.n	800750e <_fflush_r+0x32>
 8007508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800750a:	f7fe fb96 	bl	8005c3a <__retarget_lock_acquire_recursive>
 800750e:	4628      	mov	r0, r5
 8007510:	4621      	mov	r1, r4
 8007512:	f7ff ff5d 	bl	80073d0 <__sflush_r>
 8007516:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007518:	07da      	lsls	r2, r3, #31
 800751a:	4605      	mov	r5, r0
 800751c:	d4e4      	bmi.n	80074e8 <_fflush_r+0xc>
 800751e:	89a3      	ldrh	r3, [r4, #12]
 8007520:	059b      	lsls	r3, r3, #22
 8007522:	d4e1      	bmi.n	80074e8 <_fflush_r+0xc>
 8007524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007526:	f7fe fb89 	bl	8005c3c <__retarget_lock_release_recursive>
 800752a:	e7dd      	b.n	80074e8 <_fflush_r+0xc>

0800752c <memmove>:
 800752c:	4288      	cmp	r0, r1
 800752e:	b510      	push	{r4, lr}
 8007530:	eb01 0402 	add.w	r4, r1, r2
 8007534:	d902      	bls.n	800753c <memmove+0x10>
 8007536:	4284      	cmp	r4, r0
 8007538:	4623      	mov	r3, r4
 800753a:	d807      	bhi.n	800754c <memmove+0x20>
 800753c:	1e43      	subs	r3, r0, #1
 800753e:	42a1      	cmp	r1, r4
 8007540:	d008      	beq.n	8007554 <memmove+0x28>
 8007542:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007546:	f803 2f01 	strb.w	r2, [r3, #1]!
 800754a:	e7f8      	b.n	800753e <memmove+0x12>
 800754c:	4402      	add	r2, r0
 800754e:	4601      	mov	r1, r0
 8007550:	428a      	cmp	r2, r1
 8007552:	d100      	bne.n	8007556 <memmove+0x2a>
 8007554:	bd10      	pop	{r4, pc}
 8007556:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800755a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800755e:	e7f7      	b.n	8007550 <memmove+0x24>

08007560 <_sbrk_r>:
 8007560:	b538      	push	{r3, r4, r5, lr}
 8007562:	4d06      	ldr	r5, [pc, #24]	; (800757c <_sbrk_r+0x1c>)
 8007564:	2300      	movs	r3, #0
 8007566:	4604      	mov	r4, r0
 8007568:	4608      	mov	r0, r1
 800756a:	602b      	str	r3, [r5, #0]
 800756c:	f7f9 fd14 	bl	8000f98 <_sbrk>
 8007570:	1c43      	adds	r3, r0, #1
 8007572:	d102      	bne.n	800757a <_sbrk_r+0x1a>
 8007574:	682b      	ldr	r3, [r5, #0]
 8007576:	b103      	cbz	r3, 800757a <_sbrk_r+0x1a>
 8007578:	6023      	str	r3, [r4, #0]
 800757a:	bd38      	pop	{r3, r4, r5, pc}
 800757c:	20000bf0 	.word	0x20000bf0

08007580 <memcpy>:
 8007580:	440a      	add	r2, r1
 8007582:	4291      	cmp	r1, r2
 8007584:	f100 33ff 	add.w	r3, r0, #4294967295
 8007588:	d100      	bne.n	800758c <memcpy+0xc>
 800758a:	4770      	bx	lr
 800758c:	b510      	push	{r4, lr}
 800758e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007592:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007596:	4291      	cmp	r1, r2
 8007598:	d1f9      	bne.n	800758e <memcpy+0xe>
 800759a:	bd10      	pop	{r4, pc}

0800759c <__assert_func>:
 800759c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800759e:	4614      	mov	r4, r2
 80075a0:	461a      	mov	r2, r3
 80075a2:	4b09      	ldr	r3, [pc, #36]	; (80075c8 <__assert_func+0x2c>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4605      	mov	r5, r0
 80075a8:	68d8      	ldr	r0, [r3, #12]
 80075aa:	b14c      	cbz	r4, 80075c0 <__assert_func+0x24>
 80075ac:	4b07      	ldr	r3, [pc, #28]	; (80075cc <__assert_func+0x30>)
 80075ae:	9100      	str	r1, [sp, #0]
 80075b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80075b4:	4906      	ldr	r1, [pc, #24]	; (80075d0 <__assert_func+0x34>)
 80075b6:	462b      	mov	r3, r5
 80075b8:	f000 f872 	bl	80076a0 <fiprintf>
 80075bc:	f000 f882 	bl	80076c4 <abort>
 80075c0:	4b04      	ldr	r3, [pc, #16]	; (80075d4 <__assert_func+0x38>)
 80075c2:	461c      	mov	r4, r3
 80075c4:	e7f3      	b.n	80075ae <__assert_func+0x12>
 80075c6:	bf00      	nop
 80075c8:	20000064 	.word	0x20000064
 80075cc:	08007ea7 	.word	0x08007ea7
 80075d0:	08007eb4 	.word	0x08007eb4
 80075d4:	08007ee2 	.word	0x08007ee2

080075d8 <_calloc_r>:
 80075d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075da:	fba1 2402 	umull	r2, r4, r1, r2
 80075de:	b94c      	cbnz	r4, 80075f4 <_calloc_r+0x1c>
 80075e0:	4611      	mov	r1, r2
 80075e2:	9201      	str	r2, [sp, #4]
 80075e4:	f7ff f994 	bl	8006910 <_malloc_r>
 80075e8:	9a01      	ldr	r2, [sp, #4]
 80075ea:	4605      	mov	r5, r0
 80075ec:	b930      	cbnz	r0, 80075fc <_calloc_r+0x24>
 80075ee:	4628      	mov	r0, r5
 80075f0:	b003      	add	sp, #12
 80075f2:	bd30      	pop	{r4, r5, pc}
 80075f4:	220c      	movs	r2, #12
 80075f6:	6002      	str	r2, [r0, #0]
 80075f8:	2500      	movs	r5, #0
 80075fa:	e7f8      	b.n	80075ee <_calloc_r+0x16>
 80075fc:	4621      	mov	r1, r4
 80075fe:	f7fe fa9e 	bl	8005b3e <memset>
 8007602:	e7f4      	b.n	80075ee <_calloc_r+0x16>

08007604 <__ascii_mbtowc>:
 8007604:	b082      	sub	sp, #8
 8007606:	b901      	cbnz	r1, 800760a <__ascii_mbtowc+0x6>
 8007608:	a901      	add	r1, sp, #4
 800760a:	b142      	cbz	r2, 800761e <__ascii_mbtowc+0x1a>
 800760c:	b14b      	cbz	r3, 8007622 <__ascii_mbtowc+0x1e>
 800760e:	7813      	ldrb	r3, [r2, #0]
 8007610:	600b      	str	r3, [r1, #0]
 8007612:	7812      	ldrb	r2, [r2, #0]
 8007614:	1e10      	subs	r0, r2, #0
 8007616:	bf18      	it	ne
 8007618:	2001      	movne	r0, #1
 800761a:	b002      	add	sp, #8
 800761c:	4770      	bx	lr
 800761e:	4610      	mov	r0, r2
 8007620:	e7fb      	b.n	800761a <__ascii_mbtowc+0x16>
 8007622:	f06f 0001 	mvn.w	r0, #1
 8007626:	e7f8      	b.n	800761a <__ascii_mbtowc+0x16>

08007628 <_realloc_r>:
 8007628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800762c:	4680      	mov	r8, r0
 800762e:	4614      	mov	r4, r2
 8007630:	460e      	mov	r6, r1
 8007632:	b921      	cbnz	r1, 800763e <_realloc_r+0x16>
 8007634:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007638:	4611      	mov	r1, r2
 800763a:	f7ff b969 	b.w	8006910 <_malloc_r>
 800763e:	b92a      	cbnz	r2, 800764c <_realloc_r+0x24>
 8007640:	f7ff f8f2 	bl	8006828 <_free_r>
 8007644:	4625      	mov	r5, r4
 8007646:	4628      	mov	r0, r5
 8007648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800764c:	f000 f841 	bl	80076d2 <_malloc_usable_size_r>
 8007650:	4284      	cmp	r4, r0
 8007652:	4607      	mov	r7, r0
 8007654:	d802      	bhi.n	800765c <_realloc_r+0x34>
 8007656:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800765a:	d812      	bhi.n	8007682 <_realloc_r+0x5a>
 800765c:	4621      	mov	r1, r4
 800765e:	4640      	mov	r0, r8
 8007660:	f7ff f956 	bl	8006910 <_malloc_r>
 8007664:	4605      	mov	r5, r0
 8007666:	2800      	cmp	r0, #0
 8007668:	d0ed      	beq.n	8007646 <_realloc_r+0x1e>
 800766a:	42bc      	cmp	r4, r7
 800766c:	4622      	mov	r2, r4
 800766e:	4631      	mov	r1, r6
 8007670:	bf28      	it	cs
 8007672:	463a      	movcs	r2, r7
 8007674:	f7ff ff84 	bl	8007580 <memcpy>
 8007678:	4631      	mov	r1, r6
 800767a:	4640      	mov	r0, r8
 800767c:	f7ff f8d4 	bl	8006828 <_free_r>
 8007680:	e7e1      	b.n	8007646 <_realloc_r+0x1e>
 8007682:	4635      	mov	r5, r6
 8007684:	e7df      	b.n	8007646 <_realloc_r+0x1e>

08007686 <__ascii_wctomb>:
 8007686:	b149      	cbz	r1, 800769c <__ascii_wctomb+0x16>
 8007688:	2aff      	cmp	r2, #255	; 0xff
 800768a:	bf85      	ittet	hi
 800768c:	238a      	movhi	r3, #138	; 0x8a
 800768e:	6003      	strhi	r3, [r0, #0]
 8007690:	700a      	strbls	r2, [r1, #0]
 8007692:	f04f 30ff 	movhi.w	r0, #4294967295
 8007696:	bf98      	it	ls
 8007698:	2001      	movls	r0, #1
 800769a:	4770      	bx	lr
 800769c:	4608      	mov	r0, r1
 800769e:	4770      	bx	lr

080076a0 <fiprintf>:
 80076a0:	b40e      	push	{r1, r2, r3}
 80076a2:	b503      	push	{r0, r1, lr}
 80076a4:	4601      	mov	r1, r0
 80076a6:	ab03      	add	r3, sp, #12
 80076a8:	4805      	ldr	r0, [pc, #20]	; (80076c0 <fiprintf+0x20>)
 80076aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80076ae:	6800      	ldr	r0, [r0, #0]
 80076b0:	9301      	str	r3, [sp, #4]
 80076b2:	f000 f83f 	bl	8007734 <_vfiprintf_r>
 80076b6:	b002      	add	sp, #8
 80076b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80076bc:	b003      	add	sp, #12
 80076be:	4770      	bx	lr
 80076c0:	20000064 	.word	0x20000064

080076c4 <abort>:
 80076c4:	b508      	push	{r3, lr}
 80076c6:	2006      	movs	r0, #6
 80076c8:	f000 fa0c 	bl	8007ae4 <raise>
 80076cc:	2001      	movs	r0, #1
 80076ce:	f7f9 fbeb 	bl	8000ea8 <_exit>

080076d2 <_malloc_usable_size_r>:
 80076d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076d6:	1f18      	subs	r0, r3, #4
 80076d8:	2b00      	cmp	r3, #0
 80076da:	bfbc      	itt	lt
 80076dc:	580b      	ldrlt	r3, [r1, r0]
 80076de:	18c0      	addlt	r0, r0, r3
 80076e0:	4770      	bx	lr

080076e2 <__sfputc_r>:
 80076e2:	6893      	ldr	r3, [r2, #8]
 80076e4:	3b01      	subs	r3, #1
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	b410      	push	{r4}
 80076ea:	6093      	str	r3, [r2, #8]
 80076ec:	da08      	bge.n	8007700 <__sfputc_r+0x1e>
 80076ee:	6994      	ldr	r4, [r2, #24]
 80076f0:	42a3      	cmp	r3, r4
 80076f2:	db01      	blt.n	80076f8 <__sfputc_r+0x16>
 80076f4:	290a      	cmp	r1, #10
 80076f6:	d103      	bne.n	8007700 <__sfputc_r+0x1e>
 80076f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076fc:	f000 b934 	b.w	8007968 <__swbuf_r>
 8007700:	6813      	ldr	r3, [r2, #0]
 8007702:	1c58      	adds	r0, r3, #1
 8007704:	6010      	str	r0, [r2, #0]
 8007706:	7019      	strb	r1, [r3, #0]
 8007708:	4608      	mov	r0, r1
 800770a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800770e:	4770      	bx	lr

08007710 <__sfputs_r>:
 8007710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007712:	4606      	mov	r6, r0
 8007714:	460f      	mov	r7, r1
 8007716:	4614      	mov	r4, r2
 8007718:	18d5      	adds	r5, r2, r3
 800771a:	42ac      	cmp	r4, r5
 800771c:	d101      	bne.n	8007722 <__sfputs_r+0x12>
 800771e:	2000      	movs	r0, #0
 8007720:	e007      	b.n	8007732 <__sfputs_r+0x22>
 8007722:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007726:	463a      	mov	r2, r7
 8007728:	4630      	mov	r0, r6
 800772a:	f7ff ffda 	bl	80076e2 <__sfputc_r>
 800772e:	1c43      	adds	r3, r0, #1
 8007730:	d1f3      	bne.n	800771a <__sfputs_r+0xa>
 8007732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007734 <_vfiprintf_r>:
 8007734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007738:	460d      	mov	r5, r1
 800773a:	b09d      	sub	sp, #116	; 0x74
 800773c:	4614      	mov	r4, r2
 800773e:	4698      	mov	r8, r3
 8007740:	4606      	mov	r6, r0
 8007742:	b118      	cbz	r0, 800774c <_vfiprintf_r+0x18>
 8007744:	6a03      	ldr	r3, [r0, #32]
 8007746:	b90b      	cbnz	r3, 800774c <_vfiprintf_r+0x18>
 8007748:	f7fe f960 	bl	8005a0c <__sinit>
 800774c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800774e:	07d9      	lsls	r1, r3, #31
 8007750:	d405      	bmi.n	800775e <_vfiprintf_r+0x2a>
 8007752:	89ab      	ldrh	r3, [r5, #12]
 8007754:	059a      	lsls	r2, r3, #22
 8007756:	d402      	bmi.n	800775e <_vfiprintf_r+0x2a>
 8007758:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800775a:	f7fe fa6e 	bl	8005c3a <__retarget_lock_acquire_recursive>
 800775e:	89ab      	ldrh	r3, [r5, #12]
 8007760:	071b      	lsls	r3, r3, #28
 8007762:	d501      	bpl.n	8007768 <_vfiprintf_r+0x34>
 8007764:	692b      	ldr	r3, [r5, #16]
 8007766:	b99b      	cbnz	r3, 8007790 <_vfiprintf_r+0x5c>
 8007768:	4629      	mov	r1, r5
 800776a:	4630      	mov	r0, r6
 800776c:	f000 f93a 	bl	80079e4 <__swsetup_r>
 8007770:	b170      	cbz	r0, 8007790 <_vfiprintf_r+0x5c>
 8007772:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007774:	07dc      	lsls	r4, r3, #31
 8007776:	d504      	bpl.n	8007782 <_vfiprintf_r+0x4e>
 8007778:	f04f 30ff 	mov.w	r0, #4294967295
 800777c:	b01d      	add	sp, #116	; 0x74
 800777e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007782:	89ab      	ldrh	r3, [r5, #12]
 8007784:	0598      	lsls	r0, r3, #22
 8007786:	d4f7      	bmi.n	8007778 <_vfiprintf_r+0x44>
 8007788:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800778a:	f7fe fa57 	bl	8005c3c <__retarget_lock_release_recursive>
 800778e:	e7f3      	b.n	8007778 <_vfiprintf_r+0x44>
 8007790:	2300      	movs	r3, #0
 8007792:	9309      	str	r3, [sp, #36]	; 0x24
 8007794:	2320      	movs	r3, #32
 8007796:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800779a:	f8cd 800c 	str.w	r8, [sp, #12]
 800779e:	2330      	movs	r3, #48	; 0x30
 80077a0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007954 <_vfiprintf_r+0x220>
 80077a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077a8:	f04f 0901 	mov.w	r9, #1
 80077ac:	4623      	mov	r3, r4
 80077ae:	469a      	mov	sl, r3
 80077b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077b4:	b10a      	cbz	r2, 80077ba <_vfiprintf_r+0x86>
 80077b6:	2a25      	cmp	r2, #37	; 0x25
 80077b8:	d1f9      	bne.n	80077ae <_vfiprintf_r+0x7a>
 80077ba:	ebba 0b04 	subs.w	fp, sl, r4
 80077be:	d00b      	beq.n	80077d8 <_vfiprintf_r+0xa4>
 80077c0:	465b      	mov	r3, fp
 80077c2:	4622      	mov	r2, r4
 80077c4:	4629      	mov	r1, r5
 80077c6:	4630      	mov	r0, r6
 80077c8:	f7ff ffa2 	bl	8007710 <__sfputs_r>
 80077cc:	3001      	adds	r0, #1
 80077ce:	f000 80a9 	beq.w	8007924 <_vfiprintf_r+0x1f0>
 80077d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077d4:	445a      	add	r2, fp
 80077d6:	9209      	str	r2, [sp, #36]	; 0x24
 80077d8:	f89a 3000 	ldrb.w	r3, [sl]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f000 80a1 	beq.w	8007924 <_vfiprintf_r+0x1f0>
 80077e2:	2300      	movs	r3, #0
 80077e4:	f04f 32ff 	mov.w	r2, #4294967295
 80077e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077ec:	f10a 0a01 	add.w	sl, sl, #1
 80077f0:	9304      	str	r3, [sp, #16]
 80077f2:	9307      	str	r3, [sp, #28]
 80077f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077f8:	931a      	str	r3, [sp, #104]	; 0x68
 80077fa:	4654      	mov	r4, sl
 80077fc:	2205      	movs	r2, #5
 80077fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007802:	4854      	ldr	r0, [pc, #336]	; (8007954 <_vfiprintf_r+0x220>)
 8007804:	f7f8 fd1c 	bl	8000240 <memchr>
 8007808:	9a04      	ldr	r2, [sp, #16]
 800780a:	b9d8      	cbnz	r0, 8007844 <_vfiprintf_r+0x110>
 800780c:	06d1      	lsls	r1, r2, #27
 800780e:	bf44      	itt	mi
 8007810:	2320      	movmi	r3, #32
 8007812:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007816:	0713      	lsls	r3, r2, #28
 8007818:	bf44      	itt	mi
 800781a:	232b      	movmi	r3, #43	; 0x2b
 800781c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007820:	f89a 3000 	ldrb.w	r3, [sl]
 8007824:	2b2a      	cmp	r3, #42	; 0x2a
 8007826:	d015      	beq.n	8007854 <_vfiprintf_r+0x120>
 8007828:	9a07      	ldr	r2, [sp, #28]
 800782a:	4654      	mov	r4, sl
 800782c:	2000      	movs	r0, #0
 800782e:	f04f 0c0a 	mov.w	ip, #10
 8007832:	4621      	mov	r1, r4
 8007834:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007838:	3b30      	subs	r3, #48	; 0x30
 800783a:	2b09      	cmp	r3, #9
 800783c:	d94d      	bls.n	80078da <_vfiprintf_r+0x1a6>
 800783e:	b1b0      	cbz	r0, 800786e <_vfiprintf_r+0x13a>
 8007840:	9207      	str	r2, [sp, #28]
 8007842:	e014      	b.n	800786e <_vfiprintf_r+0x13a>
 8007844:	eba0 0308 	sub.w	r3, r0, r8
 8007848:	fa09 f303 	lsl.w	r3, r9, r3
 800784c:	4313      	orrs	r3, r2
 800784e:	9304      	str	r3, [sp, #16]
 8007850:	46a2      	mov	sl, r4
 8007852:	e7d2      	b.n	80077fa <_vfiprintf_r+0xc6>
 8007854:	9b03      	ldr	r3, [sp, #12]
 8007856:	1d19      	adds	r1, r3, #4
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	9103      	str	r1, [sp, #12]
 800785c:	2b00      	cmp	r3, #0
 800785e:	bfbb      	ittet	lt
 8007860:	425b      	neglt	r3, r3
 8007862:	f042 0202 	orrlt.w	r2, r2, #2
 8007866:	9307      	strge	r3, [sp, #28]
 8007868:	9307      	strlt	r3, [sp, #28]
 800786a:	bfb8      	it	lt
 800786c:	9204      	strlt	r2, [sp, #16]
 800786e:	7823      	ldrb	r3, [r4, #0]
 8007870:	2b2e      	cmp	r3, #46	; 0x2e
 8007872:	d10c      	bne.n	800788e <_vfiprintf_r+0x15a>
 8007874:	7863      	ldrb	r3, [r4, #1]
 8007876:	2b2a      	cmp	r3, #42	; 0x2a
 8007878:	d134      	bne.n	80078e4 <_vfiprintf_r+0x1b0>
 800787a:	9b03      	ldr	r3, [sp, #12]
 800787c:	1d1a      	adds	r2, r3, #4
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	9203      	str	r2, [sp, #12]
 8007882:	2b00      	cmp	r3, #0
 8007884:	bfb8      	it	lt
 8007886:	f04f 33ff 	movlt.w	r3, #4294967295
 800788a:	3402      	adds	r4, #2
 800788c:	9305      	str	r3, [sp, #20]
 800788e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007964 <_vfiprintf_r+0x230>
 8007892:	7821      	ldrb	r1, [r4, #0]
 8007894:	2203      	movs	r2, #3
 8007896:	4650      	mov	r0, sl
 8007898:	f7f8 fcd2 	bl	8000240 <memchr>
 800789c:	b138      	cbz	r0, 80078ae <_vfiprintf_r+0x17a>
 800789e:	9b04      	ldr	r3, [sp, #16]
 80078a0:	eba0 000a 	sub.w	r0, r0, sl
 80078a4:	2240      	movs	r2, #64	; 0x40
 80078a6:	4082      	lsls	r2, r0
 80078a8:	4313      	orrs	r3, r2
 80078aa:	3401      	adds	r4, #1
 80078ac:	9304      	str	r3, [sp, #16]
 80078ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078b2:	4829      	ldr	r0, [pc, #164]	; (8007958 <_vfiprintf_r+0x224>)
 80078b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078b8:	2206      	movs	r2, #6
 80078ba:	f7f8 fcc1 	bl	8000240 <memchr>
 80078be:	2800      	cmp	r0, #0
 80078c0:	d03f      	beq.n	8007942 <_vfiprintf_r+0x20e>
 80078c2:	4b26      	ldr	r3, [pc, #152]	; (800795c <_vfiprintf_r+0x228>)
 80078c4:	bb1b      	cbnz	r3, 800790e <_vfiprintf_r+0x1da>
 80078c6:	9b03      	ldr	r3, [sp, #12]
 80078c8:	3307      	adds	r3, #7
 80078ca:	f023 0307 	bic.w	r3, r3, #7
 80078ce:	3308      	adds	r3, #8
 80078d0:	9303      	str	r3, [sp, #12]
 80078d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078d4:	443b      	add	r3, r7
 80078d6:	9309      	str	r3, [sp, #36]	; 0x24
 80078d8:	e768      	b.n	80077ac <_vfiprintf_r+0x78>
 80078da:	fb0c 3202 	mla	r2, ip, r2, r3
 80078de:	460c      	mov	r4, r1
 80078e0:	2001      	movs	r0, #1
 80078e2:	e7a6      	b.n	8007832 <_vfiprintf_r+0xfe>
 80078e4:	2300      	movs	r3, #0
 80078e6:	3401      	adds	r4, #1
 80078e8:	9305      	str	r3, [sp, #20]
 80078ea:	4619      	mov	r1, r3
 80078ec:	f04f 0c0a 	mov.w	ip, #10
 80078f0:	4620      	mov	r0, r4
 80078f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078f6:	3a30      	subs	r2, #48	; 0x30
 80078f8:	2a09      	cmp	r2, #9
 80078fa:	d903      	bls.n	8007904 <_vfiprintf_r+0x1d0>
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d0c6      	beq.n	800788e <_vfiprintf_r+0x15a>
 8007900:	9105      	str	r1, [sp, #20]
 8007902:	e7c4      	b.n	800788e <_vfiprintf_r+0x15a>
 8007904:	fb0c 2101 	mla	r1, ip, r1, r2
 8007908:	4604      	mov	r4, r0
 800790a:	2301      	movs	r3, #1
 800790c:	e7f0      	b.n	80078f0 <_vfiprintf_r+0x1bc>
 800790e:	ab03      	add	r3, sp, #12
 8007910:	9300      	str	r3, [sp, #0]
 8007912:	462a      	mov	r2, r5
 8007914:	4b12      	ldr	r3, [pc, #72]	; (8007960 <_vfiprintf_r+0x22c>)
 8007916:	a904      	add	r1, sp, #16
 8007918:	4630      	mov	r0, r6
 800791a:	f7fd fc41 	bl	80051a0 <_printf_float>
 800791e:	4607      	mov	r7, r0
 8007920:	1c78      	adds	r0, r7, #1
 8007922:	d1d6      	bne.n	80078d2 <_vfiprintf_r+0x19e>
 8007924:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007926:	07d9      	lsls	r1, r3, #31
 8007928:	d405      	bmi.n	8007936 <_vfiprintf_r+0x202>
 800792a:	89ab      	ldrh	r3, [r5, #12]
 800792c:	059a      	lsls	r2, r3, #22
 800792e:	d402      	bmi.n	8007936 <_vfiprintf_r+0x202>
 8007930:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007932:	f7fe f983 	bl	8005c3c <__retarget_lock_release_recursive>
 8007936:	89ab      	ldrh	r3, [r5, #12]
 8007938:	065b      	lsls	r3, r3, #25
 800793a:	f53f af1d 	bmi.w	8007778 <_vfiprintf_r+0x44>
 800793e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007940:	e71c      	b.n	800777c <_vfiprintf_r+0x48>
 8007942:	ab03      	add	r3, sp, #12
 8007944:	9300      	str	r3, [sp, #0]
 8007946:	462a      	mov	r2, r5
 8007948:	4b05      	ldr	r3, [pc, #20]	; (8007960 <_vfiprintf_r+0x22c>)
 800794a:	a904      	add	r1, sp, #16
 800794c:	4630      	mov	r0, r6
 800794e:	f7fd feaf 	bl	80056b0 <_printf_i>
 8007952:	e7e4      	b.n	800791e <_vfiprintf_r+0x1ea>
 8007954:	08007e8c 	.word	0x08007e8c
 8007958:	08007e96 	.word	0x08007e96
 800795c:	080051a1 	.word	0x080051a1
 8007960:	08007711 	.word	0x08007711
 8007964:	08007e92 	.word	0x08007e92

08007968 <__swbuf_r>:
 8007968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800796a:	460e      	mov	r6, r1
 800796c:	4614      	mov	r4, r2
 800796e:	4605      	mov	r5, r0
 8007970:	b118      	cbz	r0, 800797a <__swbuf_r+0x12>
 8007972:	6a03      	ldr	r3, [r0, #32]
 8007974:	b90b      	cbnz	r3, 800797a <__swbuf_r+0x12>
 8007976:	f7fe f849 	bl	8005a0c <__sinit>
 800797a:	69a3      	ldr	r3, [r4, #24]
 800797c:	60a3      	str	r3, [r4, #8]
 800797e:	89a3      	ldrh	r3, [r4, #12]
 8007980:	071a      	lsls	r2, r3, #28
 8007982:	d525      	bpl.n	80079d0 <__swbuf_r+0x68>
 8007984:	6923      	ldr	r3, [r4, #16]
 8007986:	b31b      	cbz	r3, 80079d0 <__swbuf_r+0x68>
 8007988:	6823      	ldr	r3, [r4, #0]
 800798a:	6922      	ldr	r2, [r4, #16]
 800798c:	1a98      	subs	r0, r3, r2
 800798e:	6963      	ldr	r3, [r4, #20]
 8007990:	b2f6      	uxtb	r6, r6
 8007992:	4283      	cmp	r3, r0
 8007994:	4637      	mov	r7, r6
 8007996:	dc04      	bgt.n	80079a2 <__swbuf_r+0x3a>
 8007998:	4621      	mov	r1, r4
 800799a:	4628      	mov	r0, r5
 800799c:	f7ff fd9e 	bl	80074dc <_fflush_r>
 80079a0:	b9e0      	cbnz	r0, 80079dc <__swbuf_r+0x74>
 80079a2:	68a3      	ldr	r3, [r4, #8]
 80079a4:	3b01      	subs	r3, #1
 80079a6:	60a3      	str	r3, [r4, #8]
 80079a8:	6823      	ldr	r3, [r4, #0]
 80079aa:	1c5a      	adds	r2, r3, #1
 80079ac:	6022      	str	r2, [r4, #0]
 80079ae:	701e      	strb	r6, [r3, #0]
 80079b0:	6962      	ldr	r2, [r4, #20]
 80079b2:	1c43      	adds	r3, r0, #1
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d004      	beq.n	80079c2 <__swbuf_r+0x5a>
 80079b8:	89a3      	ldrh	r3, [r4, #12]
 80079ba:	07db      	lsls	r3, r3, #31
 80079bc:	d506      	bpl.n	80079cc <__swbuf_r+0x64>
 80079be:	2e0a      	cmp	r6, #10
 80079c0:	d104      	bne.n	80079cc <__swbuf_r+0x64>
 80079c2:	4621      	mov	r1, r4
 80079c4:	4628      	mov	r0, r5
 80079c6:	f7ff fd89 	bl	80074dc <_fflush_r>
 80079ca:	b938      	cbnz	r0, 80079dc <__swbuf_r+0x74>
 80079cc:	4638      	mov	r0, r7
 80079ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079d0:	4621      	mov	r1, r4
 80079d2:	4628      	mov	r0, r5
 80079d4:	f000 f806 	bl	80079e4 <__swsetup_r>
 80079d8:	2800      	cmp	r0, #0
 80079da:	d0d5      	beq.n	8007988 <__swbuf_r+0x20>
 80079dc:	f04f 37ff 	mov.w	r7, #4294967295
 80079e0:	e7f4      	b.n	80079cc <__swbuf_r+0x64>
	...

080079e4 <__swsetup_r>:
 80079e4:	b538      	push	{r3, r4, r5, lr}
 80079e6:	4b2a      	ldr	r3, [pc, #168]	; (8007a90 <__swsetup_r+0xac>)
 80079e8:	4605      	mov	r5, r0
 80079ea:	6818      	ldr	r0, [r3, #0]
 80079ec:	460c      	mov	r4, r1
 80079ee:	b118      	cbz	r0, 80079f8 <__swsetup_r+0x14>
 80079f0:	6a03      	ldr	r3, [r0, #32]
 80079f2:	b90b      	cbnz	r3, 80079f8 <__swsetup_r+0x14>
 80079f4:	f7fe f80a 	bl	8005a0c <__sinit>
 80079f8:	89a3      	ldrh	r3, [r4, #12]
 80079fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079fe:	0718      	lsls	r0, r3, #28
 8007a00:	d422      	bmi.n	8007a48 <__swsetup_r+0x64>
 8007a02:	06d9      	lsls	r1, r3, #27
 8007a04:	d407      	bmi.n	8007a16 <__swsetup_r+0x32>
 8007a06:	2309      	movs	r3, #9
 8007a08:	602b      	str	r3, [r5, #0]
 8007a0a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a0e:	81a3      	strh	r3, [r4, #12]
 8007a10:	f04f 30ff 	mov.w	r0, #4294967295
 8007a14:	e034      	b.n	8007a80 <__swsetup_r+0x9c>
 8007a16:	0758      	lsls	r0, r3, #29
 8007a18:	d512      	bpl.n	8007a40 <__swsetup_r+0x5c>
 8007a1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a1c:	b141      	cbz	r1, 8007a30 <__swsetup_r+0x4c>
 8007a1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a22:	4299      	cmp	r1, r3
 8007a24:	d002      	beq.n	8007a2c <__swsetup_r+0x48>
 8007a26:	4628      	mov	r0, r5
 8007a28:	f7fe fefe 	bl	8006828 <_free_r>
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	6363      	str	r3, [r4, #52]	; 0x34
 8007a30:	89a3      	ldrh	r3, [r4, #12]
 8007a32:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a36:	81a3      	strh	r3, [r4, #12]
 8007a38:	2300      	movs	r3, #0
 8007a3a:	6063      	str	r3, [r4, #4]
 8007a3c:	6923      	ldr	r3, [r4, #16]
 8007a3e:	6023      	str	r3, [r4, #0]
 8007a40:	89a3      	ldrh	r3, [r4, #12]
 8007a42:	f043 0308 	orr.w	r3, r3, #8
 8007a46:	81a3      	strh	r3, [r4, #12]
 8007a48:	6923      	ldr	r3, [r4, #16]
 8007a4a:	b94b      	cbnz	r3, 8007a60 <__swsetup_r+0x7c>
 8007a4c:	89a3      	ldrh	r3, [r4, #12]
 8007a4e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a56:	d003      	beq.n	8007a60 <__swsetup_r+0x7c>
 8007a58:	4621      	mov	r1, r4
 8007a5a:	4628      	mov	r0, r5
 8007a5c:	f000 f884 	bl	8007b68 <__smakebuf_r>
 8007a60:	89a0      	ldrh	r0, [r4, #12]
 8007a62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a66:	f010 0301 	ands.w	r3, r0, #1
 8007a6a:	d00a      	beq.n	8007a82 <__swsetup_r+0x9e>
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	60a3      	str	r3, [r4, #8]
 8007a70:	6963      	ldr	r3, [r4, #20]
 8007a72:	425b      	negs	r3, r3
 8007a74:	61a3      	str	r3, [r4, #24]
 8007a76:	6923      	ldr	r3, [r4, #16]
 8007a78:	b943      	cbnz	r3, 8007a8c <__swsetup_r+0xa8>
 8007a7a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a7e:	d1c4      	bne.n	8007a0a <__swsetup_r+0x26>
 8007a80:	bd38      	pop	{r3, r4, r5, pc}
 8007a82:	0781      	lsls	r1, r0, #30
 8007a84:	bf58      	it	pl
 8007a86:	6963      	ldrpl	r3, [r4, #20]
 8007a88:	60a3      	str	r3, [r4, #8]
 8007a8a:	e7f4      	b.n	8007a76 <__swsetup_r+0x92>
 8007a8c:	2000      	movs	r0, #0
 8007a8e:	e7f7      	b.n	8007a80 <__swsetup_r+0x9c>
 8007a90:	20000064 	.word	0x20000064

08007a94 <_raise_r>:
 8007a94:	291f      	cmp	r1, #31
 8007a96:	b538      	push	{r3, r4, r5, lr}
 8007a98:	4604      	mov	r4, r0
 8007a9a:	460d      	mov	r5, r1
 8007a9c:	d904      	bls.n	8007aa8 <_raise_r+0x14>
 8007a9e:	2316      	movs	r3, #22
 8007aa0:	6003      	str	r3, [r0, #0]
 8007aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa6:	bd38      	pop	{r3, r4, r5, pc}
 8007aa8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007aaa:	b112      	cbz	r2, 8007ab2 <_raise_r+0x1e>
 8007aac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007ab0:	b94b      	cbnz	r3, 8007ac6 <_raise_r+0x32>
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	f000 f830 	bl	8007b18 <_getpid_r>
 8007ab8:	462a      	mov	r2, r5
 8007aba:	4601      	mov	r1, r0
 8007abc:	4620      	mov	r0, r4
 8007abe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ac2:	f000 b817 	b.w	8007af4 <_kill_r>
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d00a      	beq.n	8007ae0 <_raise_r+0x4c>
 8007aca:	1c59      	adds	r1, r3, #1
 8007acc:	d103      	bne.n	8007ad6 <_raise_r+0x42>
 8007ace:	2316      	movs	r3, #22
 8007ad0:	6003      	str	r3, [r0, #0]
 8007ad2:	2001      	movs	r0, #1
 8007ad4:	e7e7      	b.n	8007aa6 <_raise_r+0x12>
 8007ad6:	2400      	movs	r4, #0
 8007ad8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007adc:	4628      	mov	r0, r5
 8007ade:	4798      	blx	r3
 8007ae0:	2000      	movs	r0, #0
 8007ae2:	e7e0      	b.n	8007aa6 <_raise_r+0x12>

08007ae4 <raise>:
 8007ae4:	4b02      	ldr	r3, [pc, #8]	; (8007af0 <raise+0xc>)
 8007ae6:	4601      	mov	r1, r0
 8007ae8:	6818      	ldr	r0, [r3, #0]
 8007aea:	f7ff bfd3 	b.w	8007a94 <_raise_r>
 8007aee:	bf00      	nop
 8007af0:	20000064 	.word	0x20000064

08007af4 <_kill_r>:
 8007af4:	b538      	push	{r3, r4, r5, lr}
 8007af6:	4d07      	ldr	r5, [pc, #28]	; (8007b14 <_kill_r+0x20>)
 8007af8:	2300      	movs	r3, #0
 8007afa:	4604      	mov	r4, r0
 8007afc:	4608      	mov	r0, r1
 8007afe:	4611      	mov	r1, r2
 8007b00:	602b      	str	r3, [r5, #0]
 8007b02:	f7f9 f9c1 	bl	8000e88 <_kill>
 8007b06:	1c43      	adds	r3, r0, #1
 8007b08:	d102      	bne.n	8007b10 <_kill_r+0x1c>
 8007b0a:	682b      	ldr	r3, [r5, #0]
 8007b0c:	b103      	cbz	r3, 8007b10 <_kill_r+0x1c>
 8007b0e:	6023      	str	r3, [r4, #0]
 8007b10:	bd38      	pop	{r3, r4, r5, pc}
 8007b12:	bf00      	nop
 8007b14:	20000bf0 	.word	0x20000bf0

08007b18 <_getpid_r>:
 8007b18:	f7f9 b9ae 	b.w	8000e78 <_getpid>

08007b1c <__swhatbuf_r>:
 8007b1c:	b570      	push	{r4, r5, r6, lr}
 8007b1e:	460c      	mov	r4, r1
 8007b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b24:	2900      	cmp	r1, #0
 8007b26:	b096      	sub	sp, #88	; 0x58
 8007b28:	4615      	mov	r5, r2
 8007b2a:	461e      	mov	r6, r3
 8007b2c:	da0d      	bge.n	8007b4a <__swhatbuf_r+0x2e>
 8007b2e:	89a3      	ldrh	r3, [r4, #12]
 8007b30:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007b34:	f04f 0100 	mov.w	r1, #0
 8007b38:	bf0c      	ite	eq
 8007b3a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007b3e:	2340      	movne	r3, #64	; 0x40
 8007b40:	2000      	movs	r0, #0
 8007b42:	6031      	str	r1, [r6, #0]
 8007b44:	602b      	str	r3, [r5, #0]
 8007b46:	b016      	add	sp, #88	; 0x58
 8007b48:	bd70      	pop	{r4, r5, r6, pc}
 8007b4a:	466a      	mov	r2, sp
 8007b4c:	f000 f848 	bl	8007be0 <_fstat_r>
 8007b50:	2800      	cmp	r0, #0
 8007b52:	dbec      	blt.n	8007b2e <__swhatbuf_r+0x12>
 8007b54:	9901      	ldr	r1, [sp, #4]
 8007b56:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007b5a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007b5e:	4259      	negs	r1, r3
 8007b60:	4159      	adcs	r1, r3
 8007b62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b66:	e7eb      	b.n	8007b40 <__swhatbuf_r+0x24>

08007b68 <__smakebuf_r>:
 8007b68:	898b      	ldrh	r3, [r1, #12]
 8007b6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b6c:	079d      	lsls	r5, r3, #30
 8007b6e:	4606      	mov	r6, r0
 8007b70:	460c      	mov	r4, r1
 8007b72:	d507      	bpl.n	8007b84 <__smakebuf_r+0x1c>
 8007b74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b78:	6023      	str	r3, [r4, #0]
 8007b7a:	6123      	str	r3, [r4, #16]
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	6163      	str	r3, [r4, #20]
 8007b80:	b002      	add	sp, #8
 8007b82:	bd70      	pop	{r4, r5, r6, pc}
 8007b84:	ab01      	add	r3, sp, #4
 8007b86:	466a      	mov	r2, sp
 8007b88:	f7ff ffc8 	bl	8007b1c <__swhatbuf_r>
 8007b8c:	9900      	ldr	r1, [sp, #0]
 8007b8e:	4605      	mov	r5, r0
 8007b90:	4630      	mov	r0, r6
 8007b92:	f7fe febd 	bl	8006910 <_malloc_r>
 8007b96:	b948      	cbnz	r0, 8007bac <__smakebuf_r+0x44>
 8007b98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b9c:	059a      	lsls	r2, r3, #22
 8007b9e:	d4ef      	bmi.n	8007b80 <__smakebuf_r+0x18>
 8007ba0:	f023 0303 	bic.w	r3, r3, #3
 8007ba4:	f043 0302 	orr.w	r3, r3, #2
 8007ba8:	81a3      	strh	r3, [r4, #12]
 8007baa:	e7e3      	b.n	8007b74 <__smakebuf_r+0xc>
 8007bac:	89a3      	ldrh	r3, [r4, #12]
 8007bae:	6020      	str	r0, [r4, #0]
 8007bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bb4:	81a3      	strh	r3, [r4, #12]
 8007bb6:	9b00      	ldr	r3, [sp, #0]
 8007bb8:	6163      	str	r3, [r4, #20]
 8007bba:	9b01      	ldr	r3, [sp, #4]
 8007bbc:	6120      	str	r0, [r4, #16]
 8007bbe:	b15b      	cbz	r3, 8007bd8 <__smakebuf_r+0x70>
 8007bc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bc4:	4630      	mov	r0, r6
 8007bc6:	f000 f81d 	bl	8007c04 <_isatty_r>
 8007bca:	b128      	cbz	r0, 8007bd8 <__smakebuf_r+0x70>
 8007bcc:	89a3      	ldrh	r3, [r4, #12]
 8007bce:	f023 0303 	bic.w	r3, r3, #3
 8007bd2:	f043 0301 	orr.w	r3, r3, #1
 8007bd6:	81a3      	strh	r3, [r4, #12]
 8007bd8:	89a3      	ldrh	r3, [r4, #12]
 8007bda:	431d      	orrs	r5, r3
 8007bdc:	81a5      	strh	r5, [r4, #12]
 8007bde:	e7cf      	b.n	8007b80 <__smakebuf_r+0x18>

08007be0 <_fstat_r>:
 8007be0:	b538      	push	{r3, r4, r5, lr}
 8007be2:	4d07      	ldr	r5, [pc, #28]	; (8007c00 <_fstat_r+0x20>)
 8007be4:	2300      	movs	r3, #0
 8007be6:	4604      	mov	r4, r0
 8007be8:	4608      	mov	r0, r1
 8007bea:	4611      	mov	r1, r2
 8007bec:	602b      	str	r3, [r5, #0]
 8007bee:	f7f9 f9aa 	bl	8000f46 <_fstat>
 8007bf2:	1c43      	adds	r3, r0, #1
 8007bf4:	d102      	bne.n	8007bfc <_fstat_r+0x1c>
 8007bf6:	682b      	ldr	r3, [r5, #0]
 8007bf8:	b103      	cbz	r3, 8007bfc <_fstat_r+0x1c>
 8007bfa:	6023      	str	r3, [r4, #0]
 8007bfc:	bd38      	pop	{r3, r4, r5, pc}
 8007bfe:	bf00      	nop
 8007c00:	20000bf0 	.word	0x20000bf0

08007c04 <_isatty_r>:
 8007c04:	b538      	push	{r3, r4, r5, lr}
 8007c06:	4d06      	ldr	r5, [pc, #24]	; (8007c20 <_isatty_r+0x1c>)
 8007c08:	2300      	movs	r3, #0
 8007c0a:	4604      	mov	r4, r0
 8007c0c:	4608      	mov	r0, r1
 8007c0e:	602b      	str	r3, [r5, #0]
 8007c10:	f7f9 f9a9 	bl	8000f66 <_isatty>
 8007c14:	1c43      	adds	r3, r0, #1
 8007c16:	d102      	bne.n	8007c1e <_isatty_r+0x1a>
 8007c18:	682b      	ldr	r3, [r5, #0]
 8007c1a:	b103      	cbz	r3, 8007c1e <_isatty_r+0x1a>
 8007c1c:	6023      	str	r3, [r4, #0]
 8007c1e:	bd38      	pop	{r3, r4, r5, pc}
 8007c20:	20000bf0 	.word	0x20000bf0

08007c24 <_init>:
 8007c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c26:	bf00      	nop
 8007c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c2a:	bc08      	pop	{r3}
 8007c2c:	469e      	mov	lr, r3
 8007c2e:	4770      	bx	lr

08007c30 <_fini>:
 8007c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c32:	bf00      	nop
 8007c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c36:	bc08      	pop	{r3}
 8007c38:	469e      	mov	lr, r3
 8007c3a:	4770      	bx	lr
